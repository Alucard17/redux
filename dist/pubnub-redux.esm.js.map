{"version":3,"file":"pubnub-redux.esm.js","sources":["../src/features/membership/MembershipActionType.enum.ts","../src/features/membership/commands/JoinSpaces.ts","../src/features/membership/commands/LeaveSpaces.ts","../src/features/membership/commands/FetchMemberships.ts","../src/features/membership/commands/UpdateMembership.ts","../src/features/members/MembersActionType.enum.ts","../src/features/members/commands/FetchMembers.ts","../src/features/members/commands/UpdateMembers.ts","../src/features/members/commands/AddMembers.ts","../src/features/members/commands/RemoveMembers.ts","../src/features/message/MessageActionType.enum.ts","../src/features/message/commands/SendMessage.ts","../src/features/signal/SignalActionType.enum.ts","../src/features/signal/commands/SendSignal.ts","../src/features/message/commands/FetchMessageHistory.ts","../src/features/space/SpaceActionType.enum.ts","../src/features/space/commands/CreateSpace.ts","../src/features/space/commands/DeleteSpace.ts","../src/features/space/commands/FetchSpaceById.ts","../src/features/space/commands/FetchSpaces.ts","../src/features/space/commands/UpdateSpace.ts","../src/features/user/UserActionType.enum.ts","../src/features/user/commands/CreateUser.ts","../src/features/user/commands/DeleteUser.ts","../src/features/user/commands/FetchUserById.ts","../src/features/user/commands/FetchUsers.ts","../src/features/user/commands/UpdateUser.ts","../src/features/presence/PresenceActionType.enum.ts","../src/features/presence/commands/FetchHereNow.ts","../src/features/presence/commands/FetchPresenceState.ts","../src/features/user/UserListener.ts","../src/features/space/SpaceListener.ts","../src/features/membership/MembershipListener.ts","../src/features/message/MessageListener.ts","../src/features/presence/PresenceCategory.enum.ts","../src/features/presence/PresenceListener.ts","../src/features/signal/SignalListener.ts","../src/features/errorStatus/ErrorStatusCategory.enum.ts","../src/features/errorStatus/ErrorStatusActionType.enum.ts","../src/features/errorStatus/ErrorStatusListener.ts","../src/features/networkStatus/NetworkStatusActionType.enum.ts","../src/features/networkStatus/NetworkStatusCategory.enum.ts","../src/features/networkStatus/NetworkStatusListener.ts","../src/features/subscriptionStatus/SubscriptionStatusActionType.enum.ts","../src/features/subscriptionStatus/SubscriptionStatusCategory.enum.ts","../src/features/subscriptionStatus/SubscriptionStatusListener.ts","../src/foundations/CombineListeners.ts","../src/features/helpers/PubNubListener.ts","../src/features/message/MessageReducer.ts","../src/features/signal/SignalReducer.ts","../src/features/presence/PresenceReducer.ts","../src/features/networkStatus/NetworkStatusReducer.ts","../src/features/user/UserReducer.ts","../src/features/user/UserListReducer.ts","../src/features/space/SpaceReducer.ts","../src/features/space/SpaceListReducer.ts","../src/features/membership/MembershipReducer.ts","../src/features/members/MembersReducer.ts"],"sourcesContent":["// tag::RDX-enum-memberships-action[]\r\nexport enum MembershipActionType {\r\n  FETCH_MEMBERSHIP_COMMAND = 'pubnub/FETCH_MEMBERSHIP_COMMAND',\r\n  JOIN_SPACES_COMMAND = 'pubnub/JOIN_SPACES_COMMAND',\r\n  LEAVE_SPACES_COMMAND = 'pubnub/LEAVE_SPACES_COMMAND',\r\n  UPDATE_MEMBERSHIP_COMMAND = 'pubnub/UPDATE_MEMBERSHIP_COMMAND',\r\n  USER_ADDED_TO_SPACE_EVENT = 'pubnub/USER_ADDED_TO_SPACE_EVENT',\r\n  USER_REMOVED_FROM_SPACE_EVENT = 'pubnub/USER_REMOVED_FROM_SPACE_EVENT',\r\n  USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT = 'pubnub/USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT',\r\n  UPDATING_MEMBERSHIP = 'pubnub/UPDATING_MEMBERSHIP',\r\n  MEMBERSHIP_UPDATED = 'pubnub/MEMBERSHIP_UPDATED',\r\n  ERROR_UPDATING_MEMBERSHIP = 'pubnub/ERROR_UPDATING_MEMBERSHIP',\r\n  FETCHING_MEMBERSHIP = 'pubnub/FETCHING_MEMBERSHIP',\r\n  MEMBERSHIP_RETRIEVED = 'pubnub/MEMBERSHIP_RETRIEVED',\r\n  ERROR_FETCHING_MEMBERSHIP = 'pubnub/ERROR_FETCHING_MEMBERSHIP',\r\n  JOINING_SPACES = 'pubnub/JOINING_SPACES',\r\n  SPACES_JOINED = 'pubnub/SPACES_JOINED',\r\n  ERROR_JOINING_SPACES = 'pubnub/ERROR_JOINING_SPACES',\r\n  LEAVING_SPACES = 'pubnub/LEAVING_SPACES',\r\n  SPACES_LEFT = 'pubnub/SPACES_LEFT',\r\n  ERROR_LEAVING_SPACES = 'pubnub/ERROR_LEAVING_SPACES',\r\n}\r\n// end::RDX-enum-memberships-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  JoiningSpacesAction,\r\n  MembershipRequest,\r\n  Membership,\r\n  SpacesJoinedAction,\r\n  MembershipSuccess,\r\n  ErrorJoiningSpacesAction,\r\n  MembershipError,\r\n  MembershipResponse,\r\n} from '../MembershipActions';\r\nimport { MembershipActionType } from '../MembershipActionType.enum';\r\nimport { Space } from '../../../features/space/SpaceActions';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-spaces-join[]\r\nexport const joiningSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n): JoiningSpacesAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.JOINING_SPACES,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-spaces-join[]\r\n\r\n// tag::RDX-function-spaces-join-success[]\r\nexport const spacesJoined = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipSuccess<MembershipType>,\r\n  meta?: Meta\r\n): SpacesJoinedAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.SPACES_JOINED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-spaces-join-success[]\r\n\r\n// tag::RDX-function-spaces-join-error[]\r\nexport const errorJoiningSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipError<MembershipType>,\r\n  meta?: Meta\r\n): ErrorJoiningSpacesAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.ERROR_JOINING_SPACES,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-spaces-join-error[]\r\n\r\n// tag::RDX-command-spaces-join[]\r\nexport const joinSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(joiningSpaces<MembershipType, Meta>(request, meta));\r\n\r\n      pubnub.api.joinSpaces(\r\n        {\r\n          ...request,\r\n        },\r\n        (\r\n          status: PubNubApiStatus,\r\n          response: MembershipResponse<MembershipType>\r\n        ) => {\r\n          if (status.error) {\r\n            let payload: MembershipError<MembershipType> = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorJoiningSpaces<MembershipType, Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: MembershipSuccess<MembershipType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(spacesJoined<MembershipType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembershipActionType.JOIN_SPACES_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-spaces-join[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  LeavingSpacesAction,\r\n  MembershipRequest,\r\n  SpacesLeftAction,\r\n  MembershipSuccess,\r\n  ErrorLeavingSpacesAction,\r\n  MembershipError,\r\n  MembershipResponse,\r\n  Membership,\r\n} from '../MembershipActions';\r\nimport { MembershipActionType } from '../MembershipActionType.enum';\r\nimport { Space } from '../../../features/space/SpaceActions';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-spaces-leave[]\r\nexport const leavingSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n): LeavingSpacesAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.LEAVING_SPACES,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-spaces-leave[]\r\n\r\n// tag::RDX-function-spaces-leave-success[]\r\nexport const spacesLeft = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipSuccess<MembershipType>,\r\n  meta?: Meta\r\n): SpacesLeftAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.SPACES_LEFT,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-spaces-leave-success[]\r\n\r\n// tag::RDX-function-spaces-leave-error[]\r\nexport const errorLeavingSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipError<MembershipType>,\r\n  meta?: Meta\r\n): ErrorLeavingSpacesAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.ERROR_LEAVING_SPACES,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-spaces-leave-error[]\r\n\r\n// tag::RDX-command-spaces-leave[]\r\nexport const leaveSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(leavingSpaces<MembershipType, Meta>(request, meta));\r\n\r\n      pubnub.api.leaveSpaces(\r\n        {\r\n          ...request,\r\n          spaces: request.spaces.map((space) => space.id),\r\n        },\r\n        (\r\n          status: PubNubApiStatus,\r\n          response: MembershipResponse<MembershipType>\r\n        ) => {\r\n          if (status.error) {\r\n            let payload: MembershipError<MembershipType> = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorLeavingSpaces(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: MembershipSuccess<MembershipType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(spacesLeft<MembershipType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembershipActionType.LEAVE_SPACES_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-spaces-leave[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  FetchingMembershipAction,\r\n  FetchMembershipRequest,\r\n  MembershipRetrievedAction,\r\n  FetchMembershipSuccess,\r\n  ErrorFetchingMembershipAction,\r\n  FetchMembershipError,\r\n  FetchMembershipResponse,\r\n  Membership,\r\n} from '../MembershipActions';\r\nimport { MembershipActionType } from '../MembershipActionType.enum';\r\nimport { Space } from '../../../features/space/SpaceActions';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-memberships-fetch[]\r\nexport const fetchingMembership = <Meta extends ActionMeta>(\r\n  payload: FetchMembershipRequest,\r\n  meta?: Meta\r\n): FetchingMembershipAction<Meta> => ({\r\n  type: MembershipActionType.FETCHING_MEMBERSHIP,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-memberships-fetch[]\r\n\r\n// tag::RDX-function-memberships-fetch-success[]\r\nexport const membershipRetrieved = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchMembershipSuccess<MembershipType>,\r\n  meta?: Meta\r\n): MembershipRetrievedAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.MEMBERSHIP_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-memberships-fetch-success[]\r\n\r\n// tag::RDX-function-memberships-fetch-error[]\r\nexport const errorFetchingMembership = <Meta extends ActionMeta>(\r\n  payload: FetchMembershipError,\r\n  meta?: Meta\r\n): ErrorFetchingMembershipAction<Meta> => ({\r\n  type: MembershipActionType.ERROR_FETCHING_MEMBERSHIP,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-memberships-fetch-error[]\r\n\r\n// tag::RDX-command-memberships-fetch[]\r\nexport const fetchMemberships = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  request: FetchMembershipRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingMembership<Meta>(request, meta));\r\n\r\n      pubnub.api.getMemberships(\r\n        {\r\n          ...request,\r\n        },\r\n        (\r\n          status: PubNubApiStatus,\r\n          response: FetchMembershipResponse<MembershipType>\r\n        ) => {\r\n          if (status.error) {\r\n            let payload: FetchMembershipError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingMembership<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: FetchMembershipSuccess<MembershipType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(membershipRetrieved<MembershipType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembershipActionType.FETCH_MEMBERSHIP_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-memberships-fetch[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  UpdatingMembershipAction,\r\n  MembershipRequest,\r\n  MembershipUpdatedAction,\r\n  MembershipSuccess,\r\n  ErrorUpdatingMembershipAction,\r\n  MembershipError,\r\n  MembershipResponse,\r\n  Membership,\r\n} from '../MembershipActions';\r\nimport { MembershipActionType } from '../MembershipActionType.enum';\r\nimport { Space } from '../../../features/space/SpaceActions';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-memberships-update[]\r\nexport const updatingMemberships = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n): UpdatingMembershipAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.UPDATING_MEMBERSHIP,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-memberships-update[]\r\n\r\n// tag::RDX-function-memberships-update-success[]\r\nexport const membershipUpdated = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipSuccess<MembershipType>,\r\n  meta?: Meta\r\n): MembershipUpdatedAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.MEMBERSHIP_UPDATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-memberships-update-success[]\r\n\r\n// tag::RDX-function-memberships-update-error[]\r\nexport const errorUpdatingMembership = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipError<MembershipType>,\r\n  meta?: Meta\r\n): ErrorUpdatingMembershipAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.ERROR_UPDATING_MEMBERSHIP,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-memberships-update-error[]\r\n\r\n// tag::RDX-command-memberships-update[]\r\nexport const updateMembership = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(updatingMemberships<MembershipType, Meta>(request, meta));\r\n\r\n      pubnub.api.updateMemberships(\r\n        {\r\n          ...request,\r\n        },\r\n        (\r\n          status: PubNubApiStatus,\r\n          response: MembershipResponse<MembershipType>\r\n        ) => {\r\n          if (status.error) {\r\n            let payload: MembershipError<MembershipType> = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(\r\n              errorUpdatingMembership<MembershipType, Meta>(payload, meta)\r\n            );\r\n            reject(payload);\r\n          } else {\r\n            let payload: MembershipSuccess<MembershipType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(membershipUpdated<MembershipType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembershipActionType.UPDATE_MEMBERSHIP_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-memberships-update[]\r\n","// tag::RDX-enum-memmber-action[]\r\nexport enum MembersActionType {\r\n  FETCH_MEMBERS_COMMAND = 'pubnub/FETCH_MEMBERS_COMMAND',\r\n  UPDATE_MEMBERS_COMMAND = 'pubnub/UPDATE_MEMBERS_COMMAND',\r\n  ADD_MEMBERS_COMMAND = 'pubnub/ADD_MEMBERS_COMMAND',\r\n  REMOVE_MEMBERS_COMMAND = 'pubnub/REMOVE_MEMBERS_COMMAND',\r\n  FETCHING_MEMBERS = 'pubnub/FETCHING_MEMBERS',\r\n  MEMBERS_RETRIEVED = 'pubnub/MEMBERS_RETRIEVED',\r\n  ERROR_FETCHING_MEMBERS = 'pubnub/ERROR_FETCHING_MEMBERS',\r\n  UPDATING_MEMBERS = 'pubnub/UPDATING_MEMBERS',\r\n  MEMBERS_UPDATED = 'pubnub/MEMBERS_UPDATED',\r\n  ERROR_UPDATING_MEMBERS = 'pubnub/ERROR_UPDATING_MEMBERS',\r\n  ADDING_MEMBERS = 'pubnub/ADDING_MEMBERS',\r\n  MEMBERS_ADDED = 'pubnub/MEMBERS_ADDED',\r\n  ERROR_ADDING_MEMBERS = 'pubnub/ERROR_ADDING_MEMBERS',\r\n  REMOVING_MEMBERS = 'pubnub/REMOVING_MEMBERS',\r\n  MEMBERS_REMOVED = 'pubnub/MEMBERS_REMOVED',\r\n  ERROR_REMOVING_MEMBERS = 'pubnub/ERROR_REMOVING_MEMBERS',\r\n}\r\n// end::RDX-enum-memmber-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  MembersRetrievedAction,\r\n  ErrorFetchingMembersAction,\r\n  FetchingMembersAction,\r\n  FetchMembersRequest,\r\n  FetchMembersResponse,\r\n  FetchMembersError,\r\n  FetchMembersSuccess,\r\n  Members,\r\n} from '../MembersActions';\r\nimport { MembersActionType } from '../MembersActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { Space } from '../../space/SpaceActions';\r\n\r\n// tag::RDX-function-member-fetch[]\r\nexport const fetchingMembers = <Meta extends ActionMeta>(\r\n  payload: FetchMembersRequest,\r\n  meta?: Meta\r\n): FetchingMembersAction<Meta> => ({\r\n  type: MembersActionType.FETCHING_MEMBERS,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-member-fetch[]\r\n\r\n// tag::RDX-function-member-fetch-success[]\r\nexport const membersRetrieved = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchMembersSuccess<MembersType>,\r\n  meta?: Meta\r\n): MembersRetrievedAction<MembersType, Meta> => ({\r\n  type: MembersActionType.MEMBERS_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-member-fetch-success[]\r\n\r\n// tag::RDX-function-member-fetch-error[]\r\nexport const errorFetchingMembers = <Meta extends ActionMeta>(\r\n  payload: FetchMembersError,\r\n  meta?: Meta\r\n): ErrorFetchingMembersAction<Meta> => ({\r\n  type: MembersActionType.ERROR_FETCHING_MEMBERS,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-member-fetch-error[]\r\n\r\n// tag::RDX-command-member-fetch[]\r\nexport const fetchMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchMembersRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingMembers<Meta>(request, meta));\r\n\r\n      pubnub.api.getMembers(\r\n        {\r\n          ...request,\r\n        },\r\n        (\r\n          status: PubNubApiStatus,\r\n          response: FetchMembersResponse<MembersType>\r\n        ) => {\r\n          if (status.error) {\r\n            let payload: FetchMembersError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingMembers<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: FetchMembersSuccess<MembersType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(membersRetrieved<MembersType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembersActionType.FETCH_MEMBERS_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-member-fetch[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  UpdatingMembersAction,\r\n  MembersRequest,\r\n  Members,\r\n  MembersUpdatedAction,\r\n  ErrorUpdatingMembersAction,\r\n  MembersResponse,\r\n  MembersError,\r\n  MembersSuccess,\r\n} from '../MembersActions';\r\nimport { MembersActionType } from '../MembersActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { Space } from '../../space/SpaceActions';\r\n\r\n// tag::RDX-function-members-update[]\r\nexport const updatingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n): UpdatingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.UPDATING_MEMBERS,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-members-update[]\r\n\r\n// tag::RDX-function-members-update-success[]\r\nexport const membersUpdated = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersSuccess<MembersType>,\r\n  meta?: Meta\r\n): MembersUpdatedAction<MembersType, Meta> => ({\r\n  type: MembersActionType.MEMBERS_UPDATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-members-update-success[]\r\n\r\n// tag::RDX-function-members-update-error[]\r\nexport const errorUpdatingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersError<MembersType>,\r\n  meta?: Meta\r\n): ErrorUpdatingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.ERROR_UPDATING_MEMBERS,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-members-update-error[]\r\n\r\n// tag::RDX-command-members-update[]\r\nexport const updateMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(updatingMembers(request, meta));\r\n\r\n      pubnub.api.updateMembers(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: MembersResponse<MembersType>) => {\r\n          if (status.error) {\r\n            let payload: MembersError<MembersType> = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorUpdatingMembers<MembersType, Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: MembersSuccess<MembersType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(membersUpdated<MembersType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembersActionType.UPDATE_MEMBERS_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-members-update[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  AddingMembersAction,\r\n  MembersRequest,\r\n  Members,\r\n  MembersAddedAction,\r\n  MembersResponse,\r\n  ErrorAddingMembersAction,\r\n  MembersError,\r\n  MembersSuccess,\r\n} from '../MembersActions';\r\nimport { MembersActionType } from '../MembersActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { Space } from '../../space/SpaceActions';\r\n\r\n// tag::RDX-function-member-add[]\r\nexport const addingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n): AddingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.ADDING_MEMBERS,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-member-add[]\r\n\r\n// tag::RDX-function-member-add-success[]\r\nexport const membersAdded = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersSuccess<MembersType>,\r\n  meta?: Meta\r\n): MembersAddedAction<MembersType, Meta> => ({\r\n  type: MembersActionType.MEMBERS_ADDED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-member-add-success[]\r\n\r\n// tag::RDX-function-member-add-error[]\r\nexport const errorAddingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersError<MembersType>,\r\n  meta?: Meta\r\n): ErrorAddingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.ERROR_ADDING_MEMBERS,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-member-add-error[]\r\n\r\n// tag::RDX-command-member-add[]\r\nexport const addMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(addingMembers<MembersType, Meta>(request, meta));\r\n\r\n      pubnub.api.addMembers(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: MembersResponse<MembersType>) => {\r\n          if (status.error) {\r\n            let payload: MembersError<MembersType> = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorAddingMembers<MembersType, Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: MembersSuccess<MembersType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(membersAdded<MembersType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembersActionType.ADD_MEMBERS_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-member-add[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  RemovingMembersAction,\r\n  MembersRemovedAction,\r\n  MembersRequest,\r\n  Members,\r\n  MembersResponse,\r\n  ErrorRemovingMembersAction,\r\n  MembersError,\r\n  MembersSuccess,\r\n} from '../MembersActions';\r\nimport { MembersActionType } from '../MembersActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { Space } from '../../space/SpaceActions';\r\n\r\n// tag::RDX-function-members-remove[]\r\nexport const removingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n): RemovingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.REMOVING_MEMBERS,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-members-remove[]\r\n\r\n// tag::RDX-function-members-remove-success[]\r\nexport const membersRemoved = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersSuccess<MembersType>,\r\n  meta?: Meta\r\n): MembersRemovedAction<MembersType, Meta> => ({\r\n  type: MembersActionType.MEMBERS_REMOVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-members-remove-success[]\r\n\r\n// tag::RDX-function-members-remove-error[]\r\nexport const errorRemovingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersError<MembersType>,\r\n  meta?: Meta\r\n): ErrorRemovingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.ERROR_REMOVING_MEMBERS,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-members-remove-error[]\r\n\r\n// tag::RDX-command-members-remove[]\r\nexport const removeMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(removingMembers<MembersType, Meta>(request, meta));\r\n\r\n      pubnub.api.removeMembers(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: MembersResponse<MembersType>) => {\r\n          if (status.error) {\r\n            let payload: MembersError<MembersType> = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorRemovingMembers<MembersType, Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: MembersSuccess<MembersType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(membersRemoved<MembersType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembersActionType.REMOVE_MEMBERS_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-members-remove[]\r\n","// tag::RDX-enum-messages-action[]\r\nexport enum MessageActionType {\r\n  SEND_MESSAGE_COMMAND = 'pubnub/SEND_MESSAGE_COMMAND',\r\n  FETCH_MESSAGE_HISTORY_COMMAND = 'pubnub/FETCH_MESSAGE_HISTORY_COMMAND',\r\n  MESSAGE_RECEIVED = 'pubnub/MESSAGE_RECEIVED',\r\n  SENDING_MESSAGE = 'pubnub/SENDING_MESSAGE',\r\n  MESSAGE_SENT = 'pubnub/MESSAGE_SENT',\r\n  ERROR_SENDING_MESSAGE = 'pubnub/ERROR_SENDING_MESSAGE',\r\n  FETCHING_MESSAGE_HISTORY = 'pubnub/FETCHING_MESSAGE_HISTORY',\r\n  MESSAGE_HISTORY_RETRIEVED = 'pubnub/MESSAGE_HISTORY_RETRIEVED',\r\n  ERROR_FETCHING_MESSAGE_HISTORY = 'pubnub/ERROR_FETCHING_MESSAGE_HISTORY',\r\n}\r\n// end::RDX-enum-messages-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  SendMessageRequest,\r\n  SendingMessageAction,\r\n  MessageSentAction,\r\n  SendMessageSuccess,\r\n  ErrorSendingMessageAction,\r\n  SendMessageError,\r\n  SendMessageResponse,\r\n} from '../MessageActions';\r\nimport { MessageActionType } from '../MessageActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-messages-send[]\r\nexport const sendingMessage = <\r\n  MessageContentType extends object,\r\n  MessageMeta extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendMessageRequest<MessageContentType, MessageMeta>,\r\n  meta?: Meta\r\n): SendingMessageAction<MessageContentType, MessageMeta, Meta> => ({\r\n  type: MessageActionType.SENDING_MESSAGE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-messages-send[]\r\n\r\n// tag::RDX-function-messages-send-success[]\r\nexport const messageSent = <\r\n  MessageContentType extends object,\r\n  MessageMeta extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendMessageSuccess<MessageContentType, MessageMeta>,\r\n  meta?: Meta\r\n): MessageSentAction<MessageContentType, MessageMeta, Meta> => ({\r\n  type: MessageActionType.MESSAGE_SENT,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-messages-send-success[]\r\n\r\n// tag::RDX-function-messages-send-error[]\r\nexport const errorSendingMessage = <\r\n  MessageContentType extends object,\r\n  MessageMeta extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendMessageError<MessageContentType, MessageMeta>,\r\n  meta?: Meta\r\n): ErrorSendingMessageAction<MessageContentType, MessageMeta, Meta> => ({\r\n  type: MessageActionType.ERROR_SENDING_MESSAGE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-messages-send-error[]\r\n\r\n// tag::RDX-command-messages-send[]\r\nexport const sendMessage = <\r\n  MessageContentType extends object = {},\r\n  MessageMeta extends object = {},\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: SendMessageRequest<MessageContentType, MessageMeta>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(sendingMessage(request, meta));\r\n\r\n      pubnub.api.publish(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: SendMessageResponse) => {\r\n          if (status.error) {\r\n            let payload: SendMessageError<MessageContentType, MessageMeta> = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(\r\n              errorSendingMessage<MessageContentType, MessageMeta, Meta>(\r\n                payload,\r\n                meta\r\n              )\r\n            );\r\n            reject(payload);\r\n          } else {\r\n            let payload: SendMessageSuccess<MessageContentType, MessageMeta> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(\r\n              messageSent<MessageContentType, MessageMeta, Meta>(payload, meta)\r\n            );\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MessageActionType.SEND_MESSAGE_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-messages-send[]\r\n","// tag::RDX-enum-signals-action[]\r\nexport enum SignalActionType {\r\n  SEND_SIGNAL_COMMAND = 'pubnub/SEND_SIGNAL_COMMAND',\r\n  SIGNAL_RECEIVED = 'pubnub/SIGNAL_RECEIVED',\r\n  SENDING_SIGNAL = 'pubnub/SENDING_SIGNAL',\r\n  SIGNAL_SENT = 'pubnub/SIGNAL_SENT',\r\n  ERROR_SENDING_SIGNAL = 'pubnub/ERROR_SENDING_SIGNAL',\r\n}\r\n// end::RDX-enum-signals-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  SendSignalRequest,\r\n  SendingSignalAction,\r\n  SignalSentAction,\r\n  SendSignalSuccess,\r\n  ErrorSendingSignalAction,\r\n  SendSignalError,\r\n  SendSignalResponse,\r\n} from '../SignalActions';\r\nimport { SignalActionType } from '../SignalActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-signals-send[]\r\nexport const sendingSignal = <\r\n  SignalContentType extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendSignalRequest<SignalContentType>,\r\n  meta?: Meta\r\n): SendingSignalAction<SignalContentType, Meta> => ({\r\n  type: SignalActionType.SENDING_SIGNAL,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-signals-send[]\r\n\r\n// tag::RDX-function-signals-send-success[]\r\nexport const signalSent = <\r\n  SignalContentType extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendSignalSuccess<SignalContentType>,\r\n  meta?: Meta\r\n): SignalSentAction<SignalContentType, Meta> => ({\r\n  type: SignalActionType.SIGNAL_SENT,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-signals-send-success[]\r\n\r\n// tag::RDX-function-signals-send-error[]\r\nexport const errorSendingSignal = <\r\n  SignalContentType extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendSignalError<SignalContentType>,\r\n  meta?: Meta\r\n): ErrorSendingSignalAction<SignalContentType, Meta> => ({\r\n  type: SignalActionType.ERROR_SENDING_SIGNAL,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-signals-send-error[]\r\n\r\n// tag::RDX-command-signals-send[]\r\nexport const sendSignal = <\r\n  SignalContentType extends object = {},\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: SendSignalRequest<SignalContentType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(sendingSignal(request, meta));\r\n\r\n      pubnub.api.signal(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: SendSignalResponse) => {\r\n          if (status.error) {\r\n            let payload: SendSignalError<SignalContentType> = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(\r\n              errorSendingSignal<SignalContentType, Meta>(payload, meta)\r\n            );\r\n            reject(payload);\r\n          } else {\r\n            let payload: SendSignalSuccess<SignalContentType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(signalSent<SignalContentType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SignalActionType.SEND_SIGNAL_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-signals-send[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  FetchMessageHistoryRequest,\r\n  FetchMessageHistoryResponse,\r\n  FetchMessageHistoryError,\r\n  FetchingMessageHistoryAction,\r\n  ErrorFetchingMessageHistoryAction,\r\n  MessageHistoryRetrievedAction,\r\n  FetchMessageHistorySuccess,\r\n} from '../../message/MessageActions';\r\nimport { MessageActionType } from '../../message/MessageActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-presence-messagehistory[]\r\nexport const fetchingMessageHistory = <Meta extends ActionMeta>(\r\n  payload: FetchMessageHistoryRequest,\r\n  meta?: Meta\r\n): FetchingMessageHistoryAction<Meta> => ({\r\n  type: MessageActionType.FETCHING_MESSAGE_HISTORY,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-messagehistory[]\r\n\r\n// tag::RDX-function-presence-messagehistory-success[]\r\nexport const messageHistoryRetrieved = <\r\n  MessageContentType,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchMessageHistorySuccess<MessageContentType>,\r\n  meta?: Meta\r\n): MessageHistoryRetrievedAction<MessageContentType, Meta> => ({\r\n  type: MessageActionType.MESSAGE_HISTORY_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-messagehistory-success[]\r\n\r\n// tag::RDX-function-presence-messagehistory-error[]\r\nexport const errorFetchingMessageHistory = <Meta extends ActionMeta>(\r\n  payload: FetchMessageHistoryError,\r\n  meta?: Meta\r\n): ErrorFetchingMessageHistoryAction<Meta> => ({\r\n  type: MessageActionType.ERROR_FETCHING_MESSAGE_HISTORY,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-messagehistory-error[]\r\n\r\n// tag::RDX-command-presence-messagehistory[]\r\nexport const fetchMessageHistory = <\r\n  MessageContentType,\r\n  Meta extends ActionMeta\r\n>(\r\n  request: FetchMessageHistoryRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingMessageHistory(request, meta));\r\n\r\n      pubnub.api.history(\r\n        {\r\n          ...request,\r\n        },\r\n        (\r\n          status: PubNubApiStatus,\r\n          response: FetchMessageHistoryResponse<MessageContentType>\r\n        ) => {\r\n          if (status.error) {\r\n            let payload: FetchMessageHistoryError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingMessageHistory<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: FetchMessageHistorySuccess<MessageContentType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(\r\n              messageHistoryRetrieved<MessageContentType, Meta>(payload, meta)\r\n            );\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MessageActionType.FETCH_MESSAGE_HISTORY_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-presence-messagehistory[]\r\n","// tag::RDX-enum-space-action[]\r\nexport enum SpaceActionType {\r\n  FETCH_SPACES_COMMAND = 'pubnub/FETCH_SPACES_COMMAND',\r\n  FETCH_SPACE_BY_ID_COMMAND = 'pubnub/FETCH_SPACE_BY_ID_COMMAND',\r\n  CREATE_SPACE_COMMAND = 'pubnub/CREATE_SPACE_COMMAND',\r\n  UPDATE_SPACE_COMMAND = 'pubnub/UPDATE_SPACE_COMMAND',\r\n  DELETE_SPACE_COMMAND = 'pubnub/DELETE_SPACE_COMMAND',\r\n  UPDATING_SPACE = 'pubnub/UPDATING_SPACE',\r\n  SPACE_UPDATED = 'pubnub/SPACE_UPDATED',\r\n  ERROR_UPDATING_SPACE = 'pubnub/ERROR_UPDATING_SPACE',\r\n  DELETING_SPACE = 'pubnub/DELETING_SPACE',\r\n  SPACE_DELETED = 'pubnub/SPACE_DELETED',\r\n  ERROR_DELETING_SPACE = 'pubnub/ERROR_DELETING_SPACE',\r\n  CREATING_SPACE = 'pubnub/CREATING_SPACE',\r\n  SPACE_CREATED = 'pubnub/SPACE_CREATED',\r\n  ERROR_CREATING_SPACE = 'pubnub/ERROR_CREATING_SPACE',\r\n  FETCHING_SPACES = 'pubnub/FETCHING_SPACES',\r\n  SPACES_RETRIEVED = 'pubnub/SPACES_RETRIEVED',\r\n  ERROR_FETCHING_SPACES = 'pubnub/ERROR_FETCHING_SPACES',\r\n  FETCHING_SPACE_BY_ID = 'pubnub/FETCHING_SPACE_BY_ID',\r\n  SPACE_RETRIEVED = 'pubnub/SPACE_RETRIEVED',\r\n  ERROR_FETCHING_SPACE_BY_ID = 'pubnub/ERROR_FETCHING_SPACE_BY_ID',\r\n  SPACE_UPDATED_EVENT = 'pubnub/SPACE_UPDATED_EVENT',\r\n  SPACE_DELETED_EVENT = 'pubnub/SPACE_DELETED_EVENT',\r\n}\r\n// end::RDX-enum-space-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ErrorCreatingSpaceAction,\r\n  SpaceCreatedAction,\r\n  CreatingSpaceAction,\r\n  SpaceRequest,\r\n  SpaceResponse,\r\n  SpaceError,\r\n  Space,\r\n  SpaceSuccess,\r\n} from '../SpaceActions';\r\nimport { SpaceActionType } from '../SpaceActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-space-create[]\r\nexport const creatingSpace = <Meta extends ActionMeta>(\r\n  payload: SpaceRequest,\r\n  meta?: Meta\r\n): CreatingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.CREATING_SPACE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-create[]\r\n\r\n// tag::RDX-function-space-create-success[]\r\nexport const spaceCreated = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SpaceSuccess<SpaceType>,\r\n  meta?: Meta\r\n): SpaceCreatedAction<SpaceType, Meta> => ({\r\n  type: SpaceActionType.SPACE_CREATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-create-success[]\r\n\r\n// tag::RDX-function-space-create-error[]\r\nexport const errorCreatingSpace = <Meta extends ActionMeta>(\r\n  payload: SpaceError,\r\n  meta?: Meta\r\n): ErrorCreatingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.ERROR_CREATING_SPACE,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-space-create-error[]\r\n\r\n// tag::RDX-command-space-create[]\r\nexport const createSpace = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: SpaceRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(creatingSpace<Meta>(request, meta));\r\n\r\n      pubnub.api.createSpace(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: SpaceResponse<SpaceType>) => {\r\n          if (status.error) {\r\n            let payload: SpaceError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorCreatingSpace<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: SpaceSuccess<SpaceType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(spaceCreated<SpaceType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SpaceActionType.CREATE_SPACE_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-space-create[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  SpaceDeletedAction,\r\n  DeletingSpaceAction,\r\n  ErrorDeletingSpaceAction,\r\n  DeleteSpaceRequest,\r\n  DeleteSpaceResponse,\r\n  DeleteSpaceError,\r\n  DeleteSpaceSuccess,\r\n} from '../SpaceActions';\r\nimport { SpaceActionType } from '../SpaceActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-space-delete[]\r\nexport const deletingSpace = <Meta extends ActionMeta>(\r\n  payload: DeleteSpaceRequest,\r\n  meta?: Meta\r\n): DeletingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.DELETING_SPACE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-delete[]\r\n\r\n// tag::RDX-function-space-delete-success[]\r\nexport const spaceDeleted = <Meta extends ActionMeta>(\r\n  payload: DeleteSpaceSuccess,\r\n  meta?: Meta\r\n): SpaceDeletedAction<Meta> => ({\r\n  type: SpaceActionType.SPACE_DELETED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-delete-success[]\r\n\r\n// tag::RDX-function-space-delete-error[]\r\nexport const errorDeletingSpace = <Meta extends ActionMeta>(\r\n  payload: DeleteSpaceError,\r\n  meta?: Meta\r\n): ErrorDeletingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.ERROR_DELETING_SPACE,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-space-delete-error[]\r\n\r\n// tag::RDX-command-space-delete[]\r\nexport const deleteSpace = <Meta extends ActionMeta = AnyMeta>(\r\n  request: DeleteSpaceRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(deletingSpace<Meta>(request, meta));\r\n\r\n      pubnub.api.deleteSpace(\r\n        request.spaceId,\r\n        (status: PubNubApiStatus, response: DeleteSpaceResponse) => {\r\n          if (status.error) {\r\n            let payload: DeleteSpaceError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorDeletingSpace<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: DeleteSpaceSuccess = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(spaceDeleted<Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SpaceActionType.DELETE_SPACE_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-space-delete[]\r\n","import { Dispatch } from 'redux';\r\nimport { SpaceActionType } from '../SpaceActionType.enum';\r\nimport {\r\n  ErrorFetchingSpaceByIdAction,\r\n  SpaceRetrievedAction,\r\n  FetchingSpaceByIdAction,\r\n  FetchSpaceByIdRequest,\r\n  FetchSpaceByIdError,\r\n  SpaceResponse,\r\n  Space,\r\n  FetchSpaceByIdSuccess,\r\n} from '../SpaceActions';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-space-fetchbyid[]\r\nexport const fetchingSpaceById = <Meta extends ActionMeta>(\r\n  payload: FetchSpaceByIdRequest,\r\n  meta?: Meta\r\n): FetchingSpaceByIdAction<Meta> => ({\r\n  type: SpaceActionType.FETCHING_SPACE_BY_ID,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-fetchbyid[]\r\n\r\n// tag::RDX-function-space-fetchbyid-success[]\r\nexport const spaceRetrieved = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchSpaceByIdSuccess<SpaceType>,\r\n  meta?: Meta\r\n): SpaceRetrievedAction<SpaceType, Meta> => ({\r\n  type: SpaceActionType.SPACE_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-fetchbyid-success[]\r\n\r\n// tag::RDX-function-space-fetchbyid-error[]\r\nexport const errorFetchingSpaceById = <Meta extends ActionMeta>(\r\n  payload: FetchSpaceByIdError,\r\n  meta?: Meta\r\n): ErrorFetchingSpaceByIdAction<Meta> => ({\r\n  type: SpaceActionType.ERROR_FETCHING_SPACE_BY_ID,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-space-fetchbyid-error[]\r\n\r\n// tag::RDX-command-space-fetchbyid[]\r\nexport const fetchSpaceById = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchSpaceByIdRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(\r\n        fetchingSpaceById<Meta>(\r\n          {\r\n            ...request,\r\n          },\r\n          meta\r\n        )\r\n      );\r\n\r\n      pubnub.api.getSpace(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: SpaceResponse<SpaceType>) => {\r\n          if (status.error) {\r\n            let payload: FetchSpaceByIdError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingSpaceById<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: FetchSpaceByIdSuccess<SpaceType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(spaceRetrieved<SpaceType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SpaceActionType.FETCH_SPACE_BY_ID_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-space-fetchbyid[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ErrorFetchingSpacesAction,\r\n  SpacesRetrievedAction,\r\n  FetchingSpacesAction,\r\n  FetchSpacesRequest,\r\n  FetchSpacesResponse,\r\n  FetchSpacesError,\r\n  Space,\r\n  FetchSpacesSuccess,\r\n} from '../SpaceActions';\r\nimport { SpaceActionType } from '../SpaceActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-space-fetch[]\r\nexport const fetchingSpaces = <Meta extends ActionMeta>(\r\n  payload: FetchSpacesRequest,\r\n  meta?: Meta\r\n): FetchingSpacesAction<Meta> => ({\r\n  type: SpaceActionType.FETCHING_SPACES,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-fetch[]\r\n\r\n// tag::RDX-function-space-fetch-success[]\r\nexport const spacesRetrieved = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchSpacesSuccess<SpaceType>,\r\n  meta?: Meta\r\n): SpacesRetrievedAction<SpaceType, Meta> => ({\r\n  type: SpaceActionType.SPACES_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-fetch-success[]\r\n\r\n// tag::RDX-function-space-fetch-error[]\r\nexport const errorFetchingSpaces = <Meta extends ActionMeta>(\r\n  payload: FetchSpacesError,\r\n  meta?: Meta\r\n): ErrorFetchingSpacesAction<Meta> => ({\r\n  type: SpaceActionType.ERROR_FETCHING_SPACES,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-space-fetch-error[]\r\n\r\n// tag::RDX-command-space-fetch[]\r\nexport const fetchSpaces = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchSpacesRequest = {},\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingSpaces<Meta>(request, meta));\r\n\r\n      pubnub.api.getSpaces(\r\n        { ...request },\r\n        (status: PubNubApiStatus, response: FetchSpacesResponse<SpaceType>) => {\r\n          if (status.error) {\r\n            let payload: FetchSpacesError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingSpaces<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: FetchSpacesSuccess<SpaceType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(spacesRetrieved<SpaceType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SpaceActionType.FETCH_SPACES_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-space-fetch[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  SpaceRequest,\r\n  UpdatingSpaceAction,\r\n  SpaceUpdatedAction,\r\n  ErrorUpdatingSpaceAction,\r\n  SpaceResponse,\r\n  SpaceError,\r\n  Space,\r\n  SpaceSuccess,\r\n} from '../SpaceActions';\r\nimport { SpaceActionType } from '../SpaceActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-space-update[]\r\nexport const updatingSpace = <Meta extends ActionMeta>(\r\n  payload: SpaceRequest,\r\n  meta?: Meta\r\n): UpdatingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.UPDATING_SPACE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-update[]\r\n\r\n// tag::RDX-function-space-update-success[]\r\nexport const spaceUpdated = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SpaceSuccess<SpaceType>,\r\n  meta?: Meta\r\n): SpaceUpdatedAction<SpaceType, Meta> => ({\r\n  type: SpaceActionType.SPACE_UPDATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-update-success[]\r\n\r\n// tag::RDX-function-space-update-error[]\r\nexport const errorUpdatingSpace = <Meta extends ActionMeta>(\r\n  payload: SpaceError,\r\n  meta?: Meta\r\n): ErrorUpdatingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.ERROR_UPDATING_SPACE,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-space-update-error[]\r\n\r\n// tag::RDX-command-space-update[]\r\nexport const updateSpace = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: SpaceRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(updatingSpace<Meta>(request, meta));\r\n\r\n      pubnub.api.updateSpace(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: SpaceResponse<SpaceType>) => {\r\n          if (status.error) {\r\n            let payload: SpaceError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorUpdatingSpace<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: SpaceSuccess<SpaceType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(spaceUpdated<SpaceType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SpaceActionType.UPDATE_SPACE_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-space-update[]\r\n","// tag::RDX-enum-user-action[]\r\nexport enum UserActionType {\r\n  FETCH_USERS_COMMAND = 'pubnub/FETCH_USERS_COMMAND',\r\n  FETCH_USER_BY_ID_COMMAND = 'pubnub/FETCH_USER_BY_ID_COMMAND',\r\n  CREATE_USER_COMMAND = 'pubnub/CREATE_USER_COMMAND',\r\n  UPDATE_USER_COMMAND = 'pubnub/UPDATE_USER_COMMAND',\r\n  DELETE_USER_COMMAND = 'pubnub/DELETE_USER_COMMAND',\r\n  UPDATING_USER = 'pubnub/UPDATING_USER',\r\n  USER_UPDATED = 'pubnub/USER_UPDATED',\r\n  ERROR_UPDATING_USER = 'pubnub/ERROR_UPDATING_USER',\r\n  DELETING_USER = 'pubnub/DELETING_USER',\r\n  USER_DELETED = 'pubnub/USER_DELETED',\r\n  ERROR_DELETING_USER = 'pubnub/ERROR_DELETING_USER',\r\n  CREATING_USER = 'pubnub/CREATING_USER',\r\n  USER_CREATED = 'pubnub/USER_CREATED',\r\n  ERROR_CREATING_USER = 'pubnub/ERROR_CREATING_USER',\r\n  FETCHING_USERS = 'pubnub/FETCHING_USERS',\r\n  USERS_RETRIEVED = 'pubnub/USERS_RETRIEVED',\r\n  ERROR_FETCHING_USERS = 'pubnub/ERROR_FETCHING_USERS',\r\n  FETCHING_USER_BY_ID = 'pubnub/FETCHING_USER_BY_ID',\r\n  USER_RETRIEVED = 'pubnub/USER_RETRIEVED',\r\n  ERROR_FETCHING_USER_BY_ID = 'pubnub/ERROR_FETCHING_USER_BY_ID',\r\n  USER_UPDATED_EVENT = 'pubnub/USER_UPDATED_EVENT',\r\n  USER_DELETED_EVENT = 'pubnub/USER_DELETED_EVENT',\r\n}\r\n// end::RDX-enum-user-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ErrorCreatingUserAction,\r\n  UserCreatedAction,\r\n  CreatingUserAction,\r\n  UserRequest,\r\n  UserResponse,\r\n  UserSuccess,\r\n  UserError,\r\n  User,\r\n} from '../UserActions';\r\nimport { UserActionType } from '../UserActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-user-create[]\r\nexport const creatingUser = <Meta extends ActionMeta>(\r\n  payload: UserRequest,\r\n  meta?: Meta\r\n): CreatingUserAction<Meta> => ({\r\n  type: UserActionType.CREATING_USER,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-create[]\r\n\r\n// tag::RDX-function-user-create-success[]\r\nexport const userCreated = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: UserSuccess<UserType>,\r\n  meta?: Meta\r\n): UserCreatedAction<UserType, Meta> => ({\r\n  type: UserActionType.USER_CREATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-create-success[]\r\n\r\n// tag::RDX-function-user-create-error[]\r\nexport const errorCreatingUser = <Meta extends ActionMeta>(\r\n  payload: UserError,\r\n  meta?: Meta\r\n): ErrorCreatingUserAction<Meta> => ({\r\n  type: UserActionType.ERROR_CREATING_USER,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-user-create-error[]\r\n\r\n// tag::RDX-command-user-create[]\r\nexport const createUser = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: UserRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(creatingUser<Meta>(request, meta));\r\n\r\n      pubnub.api.createUser(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: UserResponse<UserType>) => {\r\n          if (status.error) {\r\n            let payload: UserError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorCreatingUser<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(userCreated<UserType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = UserActionType.CREATE_USER_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-user-create[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  UserDeletedAction,\r\n  DeletingUserAction,\r\n  ErrorDeletingUserAction,\r\n  DeleteUserRequest,\r\n  DeleteUserResponse,\r\n  DeleteUserError,\r\n  DeleteUserSuccess,\r\n} from '../UserActions';\r\nimport { UserActionType } from '../UserActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-user-delete[]\r\nexport const deletingUser = <Meta extends ActionMeta>(\r\n  payload: DeleteUserRequest,\r\n  meta?: Meta\r\n): DeletingUserAction<Meta> => ({\r\n  type: UserActionType.DELETING_USER,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-delete[]\r\n\r\n// tag::RDX-function-user-delete-success[]\r\nexport const userDeleted = <Meta extends ActionMeta>(\r\n  payload: DeleteUserSuccess,\r\n  meta?: Meta\r\n): UserDeletedAction<Meta> => ({\r\n  type: UserActionType.USER_DELETED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-delete-success[]\r\n\r\n// tag::RDX-function-user-delete-error[]\r\nexport const errorDeletingUser = <Meta extends ActionMeta>(\r\n  payload: DeleteUserError,\r\n  meta?: Meta\r\n): ErrorDeletingUserAction<Meta> => ({\r\n  type: UserActionType.ERROR_DELETING_USER,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-user-delete-error[]\r\n\r\n// tag::RDX-command-user-delete[]\r\nexport const deleteUser = <Meta extends ActionMeta = AnyMeta>(\r\n  request: DeleteUserRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(deletingUser<Meta>(request, meta));\r\n\r\n      pubnub.api.deleteUser(\r\n        request.userId,\r\n        (status: PubNubApiStatus, response: DeleteUserResponse) => {\r\n          if (status.error) {\r\n            let payload: DeleteUserError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorDeletingUser<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: DeleteUserSuccess = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(userDeleted<Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = UserActionType.DELETE_USER_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-user-delete[]\r\n","import { Dispatch } from 'redux';\r\nimport { UserActionType } from '../UserActionType.enum';\r\nimport {\r\n  ErrorFetchingUserByIdAction,\r\n  UserRetrievedAction,\r\n  FetchingUserByIdAction,\r\n  FetchUserByIdRequest,\r\n  FetchUserByIdError,\r\n  UserResponse,\r\n  User,\r\n  FetchUserByIdSuccess,\r\n} from '../UserActions';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-user-fetchbyid[]\r\nexport const fetchingUserById = <Meta extends ActionMeta>(\r\n  payload: FetchUserByIdRequest,\r\n  meta?: Meta\r\n): FetchingUserByIdAction<Meta> => ({\r\n  type: UserActionType.FETCHING_USER_BY_ID,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-fetchbyid[]\r\n\r\n// tag::RDX-function-user-fetchbyid-success[]\r\nexport const userRetrieved = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchUserByIdSuccess<UserType>,\r\n  meta?: Meta\r\n): UserRetrievedAction<UserType, Meta> => ({\r\n  type: UserActionType.USER_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-fetchbyid-success[]\r\n\r\n// tag::RDX-function-user-fetchbyid-error[]\r\nexport const errorFetchingUserById = <Meta extends ActionMeta>(\r\n  payload: FetchUserByIdError,\r\n  meta?: Meta\r\n): ErrorFetchingUserByIdAction<Meta> => ({\r\n  type: UserActionType.ERROR_FETCHING_USER_BY_ID,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-user-fetchbyid-error[]\r\n\r\n// tag::RDX-command-user-fetchbyid[]\r\nexport const fetchUserById = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchUserByIdRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(\r\n        fetchingUserById<Meta>(\r\n          {\r\n            ...request,\r\n          },\r\n          meta\r\n        )\r\n      );\r\n\r\n      pubnub.api.getUser(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: UserResponse<UserType>) => {\r\n          if (status.error) {\r\n            let payload: FetchUserByIdError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingUserById<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: FetchUserByIdSuccess<UserType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(userRetrieved<UserType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = UserActionType.FETCH_USER_BY_ID_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-user-fetchbyid[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ErrorFetchingUsersAction,\r\n  UsersRetrievedAction,\r\n  FetchingUsersAction,\r\n  FetchUsersRequest,\r\n  FetchUsersResponse,\r\n  FetchUsersError,\r\n  User,\r\n  FetchUsersSuccess,\r\n} from '../UserActions';\r\nimport { UserActionType } from '../UserActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-user-fetch[]\r\nexport const fetchingUsers = <Meta extends ActionMeta>(\r\n  payload: FetchUsersRequest,\r\n  meta?: Meta\r\n): FetchingUsersAction<Meta> => ({\r\n  type: UserActionType.FETCHING_USERS,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-fetch[]\r\n\r\n// tag::RDX-function-user-fetch-success[]\r\nexport const usersRetrieved = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchUsersSuccess<UserType>,\r\n  meta?: Meta\r\n): UsersRetrievedAction<UserType, Meta> => ({\r\n  type: UserActionType.USERS_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-fetch-success[]\r\n\r\n// tag::RDX-function-user-fetch-error[]\r\nexport const errorFetchingUsers = <Meta extends ActionMeta = AnyMeta>(\r\n  payload: FetchUsersError,\r\n  meta?: Meta\r\n): ErrorFetchingUsersAction<Meta> => ({\r\n  type: UserActionType.ERROR_FETCHING_USERS,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-user-fetch-error[]\r\n\r\n// tag::RDX-command-user-fetch[]\r\nexport const fetchUsers = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchUsersRequest = {},\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingUsers<Meta>(request, meta));\r\n\r\n      pubnub.api.getUsers(\r\n        { ...request },\r\n        (status: PubNubApiStatus, response: FetchUsersResponse<UserType>) => {\r\n          if (status.error) {\r\n            let payload: FetchUsersError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingUsers<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: FetchUsersSuccess<UserType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(usersRetrieved<UserType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = UserActionType.FETCH_USERS_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-user-fetch[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  UpdatingUserAction,\r\n  UserUpdatedAction,\r\n  ErrorUpdatingUserAction,\r\n  UserRequest,\r\n  UserResponse,\r\n  UserError,\r\n  User,\r\n  UserSuccess,\r\n} from '../UserActions';\r\nimport { UserActionType } from '../UserActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ObjectsCustom } from '../../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-user-update[]\r\nexport const updatingUser = <Meta extends ActionMeta>(\r\n  payload: UserRequest,\r\n  meta?: Meta\r\n): UpdatingUserAction<Meta> => ({\r\n  type: UserActionType.UPDATING_USER,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-update[]\r\n\r\n// tag::RDX-function-user-update-success[]\r\nexport const userUpdated = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: UserSuccess<UserType>,\r\n  meta?: Meta\r\n): UserUpdatedAction<UserType, Meta> => ({\r\n  type: UserActionType.USER_UPDATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-update-success[]\r\n\r\n// tag::RDX-function-user-update-error[]\r\nexport const errorUpdatingUser = <Meta extends ActionMeta>(\r\n  payload: UserError,\r\n  meta?: Meta\r\n): ErrorUpdatingUserAction<Meta> => ({\r\n  type: UserActionType.ERROR_UPDATING_USER,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-user-update-error[]\r\n\r\n// tag::RDX-command-user-update[]\r\nexport const updateUser = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: UserRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(updatingUser<Meta>(request, meta));\r\n\r\n      pubnub.api.updateUser(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: UserResponse<UserType>) => {\r\n          if (status.error) {\r\n            let payload: UserError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorUpdatingUser<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: UserSuccess<UserType> = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(userUpdated<UserType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = UserActionType.UPDATE_USER_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-user-update[]\r\n","// tag::RDX-enum-presence-action[]\r\nexport enum PresenceActionType {\r\n  HERE_NOW_COMMAND = 'pubnub/HERE_NOW_COMMAND',\r\n  PRESENCE_STATE_COMMAND = 'pubnub/PRESENCE_STATE_COMMAND',\r\n  FETCHING_HERE_NOW = 'pubnub/FETCHING_HERE_NOW',\r\n  HERE_NOW_RETRIEVED = 'pubnub/HERE_NOW_RETRIEVED',\r\n  ERROR_FETCHING_HERE_NOW = 'pubnub/ERROR_FETCHING_HERE_NOW',\r\n  FETCHING_PRESENCE_STATE = 'pubnub/FETCHING_PRESENCE_STATE',\r\n  PRESENCE_STATE_RETRIEVED = 'pubnub/PRESENCE_STATE_RETRIEVED',\r\n  ERROR_FETCHING_PRESENCE_STATE = 'pubnub/ERROR_FETCHING_PRESENCE_STATE',\r\n  JOIN_EVENT = 'pubnub/JOIN_EVENT',\r\n  LEAVE_EVENT = 'pubnub/LEAVE_EVENT',\r\n  TIMEOUT_EVENT = 'pubnub/TIMEOUT_EVENT',\r\n  STATE_CHANGE_EVENT = 'pubnub/STATE_CHANGE_EVENT',\r\n}\r\n// end::RDX-enum-presence-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  HereNowRequest,\r\n  HereNowResponse,\r\n  HereNowError,\r\n  FetchingHereNowAction,\r\n  ErrorFetchingHereNowAction,\r\n  HereNowRetrievedAction,\r\n  HereNowSuccess,\r\n} from '../PresenceActions';\r\nimport { PresenceActionType } from '../PresenceActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-presence-herenow[]\r\nexport const fetchingHereNow = <Meta extends ActionMeta>(\r\n  payload: HereNowRequest,\r\n  meta?: Meta\r\n): FetchingHereNowAction<Meta> => ({\r\n  type: PresenceActionType.FETCHING_HERE_NOW,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-herenow[]\r\n\r\n// tag::RDX-function-presence-herenow-success[]\r\nexport const hereNowRetrieved = <Meta extends ActionMeta>(\r\n  payload: HereNowSuccess,\r\n  meta?: Meta\r\n): HereNowRetrievedAction<Meta> => ({\r\n  type: PresenceActionType.HERE_NOW_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-herenow-success[]\r\n\r\n// tag::RDX-function-presence-herenow-error[]\r\nexport const errorFetchingHereNow = <Meta extends ActionMeta>(\r\n  payload: HereNowError,\r\n  meta?: Meta\r\n): ErrorFetchingHereNowAction<Meta> => ({\r\n  type: PresenceActionType.ERROR_FETCHING_HERE_NOW,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-herenow-error[]\r\n\r\n// tag::RDX-command-presence-herenow[]\r\nexport const fetchHereNow = <Meta extends ActionMeta>(\r\n  request: HereNowRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingHereNow(request, meta));\r\n\r\n      pubnub.api.hereNow(\r\n        {\r\n          ...request,\r\n          includeUUIDs: true,\r\n          includeState: false,\r\n        },\r\n        (status: PubNubApiStatus, response: HereNowResponse) => {\r\n          if (status.error) {\r\n            let payload: HereNowError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingHereNow<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: HereNowSuccess = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(hereNowRetrieved<Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = PresenceActionType.HERE_NOW_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-presence-herenow[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  PresenceStateRequest,\r\n  PresenceStateResponse,\r\n  PresenceStateError,\r\n  FetchingPresenceStateAction,\r\n  ErrorFetchingPresenceStateAction,\r\n  PresenceStateRetrievedAction,\r\n  PresenceStateSuccess,\r\n} from '../PresenceActions';\r\nimport { PresenceActionType } from '../PresenceActionType.enum';\r\nimport { PubNubApiStatus } from '../../../foundations/PubNubApi';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-presence-fetch[]\r\nexport const fetchingPresenceState = <Meta extends ActionMeta>(\r\n  payload: PresenceStateRequest,\r\n  meta?: Meta\r\n): FetchingPresenceStateAction<Meta> => ({\r\n  type: PresenceActionType.FETCHING_PRESENCE_STATE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-fetch[]\r\n\r\n// tag::RDX-function-presence-fetch-success[]\r\nexport const presenceStateRetrieved = <Meta extends ActionMeta>(\r\n  payload: PresenceStateSuccess,\r\n  meta?: Meta\r\n): PresenceStateRetrievedAction<Meta> => ({\r\n  type: PresenceActionType.PRESENCE_STATE_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-fetch-success[]\r\n\r\n// tag::RDX-function-presence-fetch-error[]\r\nexport const errorFetchingPresenceState = <Meta extends ActionMeta>(\r\n  payload: PresenceStateError,\r\n  meta?: Meta\r\n): ErrorFetchingPresenceStateAction<Meta> => ({\r\n  type: PresenceActionType.ERROR_FETCHING_PRESENCE_STATE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-fetch-error[]\r\n\r\n// tag::RDX-command-presence-fetch[]\r\nexport const fetchPresenceState = <Meta extends ActionMeta>(\r\n  request: PresenceStateRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingPresenceState(request, meta));\r\n\r\n      pubnub.api.getState(\r\n        {\r\n          ...request,\r\n        },\r\n        (status: PubNubApiStatus, response: PresenceStateResponse) => {\r\n          if (status.error) {\r\n            let payload: PresenceStateError = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingPresenceState<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            let payload: PresenceStateSuccess = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(presenceStateRetrieved<Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = PresenceActionType.PRESENCE_STATE_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-presence-fetch[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  UserUpdatedEventAction,\r\n  UserDeletedEventAction,\r\n  UserEventMessage,\r\n  UserListenerPayload,\r\n  UserListenerActions,\r\n  User,\r\n} from './UserActions';\r\nimport { UserActionType } from './UserActionType.enum';\r\nimport { ObjectsCustom } from '../../foundations/ObjectsCustom';\r\n\r\n// tag::RDX-event-user-updated[]\r\nexport const userUpdated = <UserType extends User<ObjectsCustom>>(\r\n  payload: UserEventMessage<UserType>\r\n): UserUpdatedEventAction<UserType> => ({\r\n  type: UserActionType.USER_UPDATED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-user-updated[]\r\n\r\n// tag::RDX-event-user-deleted[]\r\nexport const userDeleted = <UserType extends User<ObjectsCustom>>(\r\n  payload: UserEventMessage<UserType>\r\n): UserDeletedEventAction<UserType> => ({\r\n  type: UserActionType.USER_DELETED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-user-deleted[]\r\n\r\n// tag::RDX-method-listener-user[]\r\nexport const createUserListener = <UserType extends User<ObjectsCustom> = User>(\r\n  dispatch: Dispatch<UserListenerActions<UserType>>\r\n) => ({\r\n  user: (payload: UserListenerPayload<UserType>) => {\r\n    switch (payload.message.event) {\r\n      case 'update':\r\n        dispatch(userUpdated<UserType>(payload.message));\r\n        break;\r\n      case 'delete':\r\n        dispatch(userDeleted<UserType>(payload.message));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-user[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  SpaceUpdatedEventAction,\r\n  SpaceDeletedEventAction,\r\n  SpaceEventMessage,\r\n  SpaceListenerPayload,\r\n  SpaceListenerActions,\r\n  Space,\r\n} from './SpaceActions';\r\nimport { SpaceActionType } from './SpaceActionType.enum';\r\nimport { ObjectsCustom } from '../../foundations/ObjectsCustom';\r\n\r\n// tag::RDX-type-event-space-updated[]\r\nexport const spaceUpdated = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  payload: SpaceEventMessage<ReceivedSpace>\r\n): SpaceUpdatedEventAction<ReceivedSpace> => ({\r\n  type: SpaceActionType.SPACE_UPDATED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-event-space-updated[]\r\n\r\n// tag::RDX-type-event-space-deleted[]\r\nexport const spaceDeleted = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  payload: SpaceEventMessage<ReceivedSpace>\r\n): SpaceDeletedEventAction<ReceivedSpace> => ({\r\n  type: SpaceActionType.SPACE_DELETED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-event-space-deleted[]\r\n\r\n// tag::RDX-method-listener-space[]\r\nexport const createSpaceListener = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  dispatch: Dispatch<SpaceListenerActions<ReceivedSpace>>\r\n) => ({\r\n  space: (payload: SpaceListenerPayload<ReceivedSpace>) => {\r\n    switch (payload.message.event) {\r\n      case 'update':\r\n        dispatch(spaceUpdated<ReceivedSpace>(payload.message));\r\n        break;\r\n      case 'delete':\r\n        dispatch(spaceDeleted<ReceivedSpace>(payload.message));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-space[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  MembershipListenerActions,\r\n  UserMembershipUpdatedOnSpaceEventAction,\r\n  MembershipEventMessage,\r\n  MembershipListenerPayload,\r\n  UserAddedToSpaceEventAction,\r\n  UserRemovedFromSpaceEventAction,\r\n  Membership,\r\n} from './MembershipActions';\r\nimport { MembershipActionType } from './MembershipActionType.enum';\r\nimport { ObjectsCustom } from '../../foundations/ObjectsCustom';\r\nimport { Space } from '../space/SpaceActions';\r\n\r\nconst userMembershipUpdatedOnSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n): UserMembershipUpdatedOnSpaceEventAction<ReceivedMembership> => ({\r\n  type: MembershipActionType.USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT,\r\n  payload,\r\n});\r\n\r\nconst userAddedToSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n): UserAddedToSpaceEventAction<ReceivedMembership> => ({\r\n  type: MembershipActionType.USER_ADDED_TO_SPACE_EVENT,\r\n  payload,\r\n});\r\n\r\nconst userRemovedFromSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n): UserRemovedFromSpaceEventAction<ReceivedMembership> => ({\r\n  type: MembershipActionType.USER_REMOVED_FROM_SPACE_EVENT,\r\n  payload,\r\n});\r\n\r\n// tag::RDX-method-listener-membership[]\r\nexport const createMembershipListener = <\r\n  ReceivedMembership extends Membership<\r\n    ObjectsCustom,\r\n    Space<ObjectsCustom>\r\n  > = Membership\r\n>(\r\n  dispatch: Dispatch<MembershipListenerActions<ReceivedMembership>>\r\n) => ({\r\n  membership: (payload: MembershipListenerPayload<ReceivedMembership>) => {\r\n    switch (payload.message.event) {\r\n      case 'create':\r\n        dispatch(userAddedToSpace(payload.message));\r\n        break;\r\n      case 'update':\r\n        dispatch(userMembershipUpdatedOnSpace(payload.message));\r\n        break;\r\n      case 'delete':\r\n        dispatch(userRemovedFromSpace(payload.message));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-membership[]\r\n","import { Dispatch } from 'redux';\r\nimport { MessageReceivedAction, Message } from './MessageActions';\r\nimport { MessageActionType } from './MessageActionType.enum';\r\n\r\n// tag::RDX-type-messages[]\r\nexport const messageReceived = <MessageType extends Message>(\r\n  payload: MessageType\r\n): MessageReceivedAction<MessageType> => ({\r\n  type: MessageActionType.MESSAGE_RECEIVED,\r\n  payload,\r\n});\r\n// end::RDX-type-messages[]\r\n\r\n// tag::RDX-method-listener-messages[]\r\nexport const createMessageListener = <MessageType extends Message>(\r\n  dispatch: Dispatch<MessageReceivedAction<MessageType>>\r\n) => ({\r\n  message: (payload: MessageType) =>\r\n    dispatch(messageReceived<MessageType>(payload)),\r\n});\r\n// end::RDX-method-listener-messages[]\r\n","// tag::RDX-enum-presence-category[]\r\nexport enum PresenceCategory {\r\n  JOIN = 'join',\r\n  STATE_CHANGE = 'state-change',\r\n  LEAVE = 'leave',\r\n  TIMEOUT = 'timeout',\r\n}\r\n// end::RDX-enum-presence-category[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  JoinEventAction,\r\n  LeaveEventAction,\r\n  TimeoutEventAction,\r\n  StateChangeEventAction,\r\n  PresenceEventMessage,\r\n} from './PresenceActions';\r\nimport { PresenceActionType } from './PresenceActionType.enum';\r\nimport { PresenceCategory } from './PresenceCategory.enum';\r\n\r\n// tag::RDX-type-presence-user-join[]\r\nexport const userJoin = (payload: PresenceEventMessage): JoinEventAction => ({\r\n  type: PresenceActionType.JOIN_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-presence-user-join[]\r\n\r\n// tag::RDX-type-presence-user-leave[]\r\nexport const userLeave = (payload: PresenceEventMessage): LeaveEventAction => ({\r\n  type: PresenceActionType.LEAVE_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-presence-user-leave[]\r\n\r\n// tag::RDX-type-presence-user-timeout[]\r\nexport const userTimeout = (\r\n  payload: PresenceEventMessage\r\n): TimeoutEventAction => ({\r\n  type: PresenceActionType.TIMEOUT_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-presence-user-timeout[]\r\n\r\n// tag::RDX-type-presence-user-change[]\r\nexport const userStateChange = (\r\n  payload: PresenceEventMessage\r\n): StateChangeEventAction => ({\r\n  type: PresenceActionType.STATE_CHANGE_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-presence-user-change[]\r\n\r\n// tag::RDX-type-presence-listener-action[]\r\nexport type PresenceListenerActions =\r\n  | JoinEventAction\r\n  | LeaveEventAction\r\n  | TimeoutEventAction\r\n  | StateChangeEventAction;\r\n// end::RDX-type-presence-listener-action[]\r\n\r\n// tag::RDX-method-listener-presence[]\r\nexport const createPresenceListener = (\r\n  dispatch: Dispatch<PresenceListenerActions>\r\n) => ({\r\n  presence: (payload: PresenceEventMessage) => {\r\n    switch (payload.action) {\r\n      case PresenceCategory.JOIN:\r\n        dispatch(userJoin(payload));\r\n        break;\r\n      case PresenceCategory.LEAVE:\r\n        dispatch(userLeave(payload));\r\n        break;\r\n      case PresenceCategory.TIMEOUT:\r\n        dispatch(userTimeout(payload));\r\n        break;\r\n      case PresenceCategory.STATE_CHANGE:\r\n        dispatch(userStateChange(payload));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-presence[]\r\n","import { Dispatch } from 'redux';\r\nimport { SignalReceivedAction, Signal } from './SignalActions';\r\nimport { SignalActionType } from './SignalActionType.enum';\r\n\r\n// tag::RDX-type-signals[]\r\nexport const signalReceived = <SignalType extends Signal>(\r\n  payload: SignalType\r\n): SignalReceivedAction<SignalType> => ({\r\n  type: SignalActionType.SIGNAL_RECEIVED,\r\n  payload,\r\n});\r\n// end::RDX-type-signals[]\r\n\r\n// tag::RDX-method-listener-signals[]\r\nexport const createSignalListener = <SignalType extends Signal>(\r\n  dispatch: Dispatch<SignalReceivedAction<SignalType>>\r\n) => ({\r\n  signal: (payload: SignalType) =>\r\n    dispatch(signalReceived<SignalType>(payload)),\r\n});\r\n// end::RDX-method-listener-signals[]\r\n","// tag::RDX-enum-error-category[]\r\nexport enum ErrorStatusCategory {\r\n  PN_NETWORK_ISSUES_CATEGORY = 'PNNetworkIssuesCategory',\r\n  PN_ACCES_DENIED_CATEGORY = 'PNAccessDeniedCategory',\r\n  PN_MALFORMED_RESPONSE_CATEGORY = 'PNMalformedResponseCategory',\r\n  PN_BAD_REQUEST_CATEGORY = 'PNBadRequestCategory',\r\n  PN_DECRYPTION_ERROR_CATEGORY = 'PNDecryptionErrorCategory',\r\n  PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY = 'PNRequestMessageCountExceedCategory',\r\n  PN_UNKNOWN_CATEGORY = 'PNUnknownCategory',\r\n}\r\n// end::RDX-enum-error-category[]\r\n","// tag::RDX-enum-error-action[]\r\nexport enum ErrorStatusActionType {\r\n  NETWORK_ISSUES_EVENT = 'pubnub/NETWORK_ISSUES_EVENT',\r\n  ACCESS_DENIED_EVENT = 'pubnub/ACCESS_DENIED_EVENT',\r\n  MALFORMED_RESPONSE_EVENT = 'pubnub/MALFORMED_RESPONSE_EVENT',\r\n  BAD_REQUEST_EVENT = 'pubnub/BAD_REQUEST_EVENT',\r\n  DECRYPTION_ERROR_EVENT = 'pubnub/DECRYPTION_ERROR_EVENT',\r\n  TIMEOUT_CONNECTION_EVENT = 'pubnub/TIMEOUT_CONNECTION_EVENT',\r\n  REQUEST_MESSAGE_COUNT_EXCEED_EVENT = 'pubnub/REQUEST_MESSAGE_COUNT_EXCEED_EVENT',\r\n  UNKNOWN_EVENT = 'pubnub/UNKNOWN_EVENT',\r\n}\r\n// end::RDX-enum-error-action[]\r\n","import { Dispatch } from 'redux';\r\nimport { ErrorStatusCategory } from './ErrorStatusCategory.enum';\r\nimport { ErrorStatusActionType } from './ErrorStatusActionType.enum';\r\nimport {\r\n  NetworkIssuesEventAction,\r\n  AccessDeniedEventAction,\r\n  MalformedResponseEventAction,\r\n  BadRequestEventAction,\r\n  DecryptionErrorEventAction,\r\n  TimeoutConnectionEventAction,\r\n  RequestMessageCountExceedEventAction,\r\n  UnknownEventAction,\r\n  ErrorStatusResponse,\r\n} from './ErrorStatusActions';\r\n\r\n// tag::RDX-event-error-network[]\r\nexport const networkIssues = (\r\n  payload: ErrorStatusResponse\r\n): NetworkIssuesEventAction => ({\r\n  type: ErrorStatusActionType.NETWORK_ISSUES_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-network[]\r\n\r\n// tag::RDX-event-error-accessdenied[]\r\nexport const accessDenied = (\r\n  payload: ErrorStatusResponse\r\n): AccessDeniedEventAction => ({\r\n  type: ErrorStatusActionType.ACCESS_DENIED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-accessdenied[]\r\n\r\n// tag::RDX-event-error-malformed[]\r\nexport const malformedResponse = (\r\n  payload: ErrorStatusResponse\r\n): MalformedResponseEventAction => ({\r\n  type: ErrorStatusActionType.MALFORMED_RESPONSE_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-malformed[]\r\n\r\n// tag::RDX-event-error-badrequest[]\r\nexport const badRequest = (\r\n  payload: ErrorStatusResponse\r\n): BadRequestEventAction => ({\r\n  type: ErrorStatusActionType.BAD_REQUEST_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-badrequest[]\r\n\r\n// tag::RDX-event-error-decrypt[]\r\nexport const decryptionError = (\r\n  payload: ErrorStatusResponse\r\n): DecryptionErrorEventAction => ({\r\n  type: ErrorStatusActionType.DECRYPTION_ERROR_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-decrypt[]\r\n\r\n// tag::RDX-event-error-timeout[]\r\nexport const timeoutConnection = (\r\n  payload: ErrorStatusResponse\r\n): TimeoutConnectionEventAction => ({\r\n  type: ErrorStatusActionType.TIMEOUT_CONNECTION_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-timeout[]\r\n\r\n// tag::RDX-event-error-requestcount[]\r\nexport const requestMessageCountExceeded = (\r\n  payload: ErrorStatusResponse\r\n): RequestMessageCountExceedEventAction => ({\r\n  type: ErrorStatusActionType.REQUEST_MESSAGE_COUNT_EXCEED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-requestcount[]\r\n\r\n// tag::RDX-event-error-unknown[]\r\nexport const unknown = (payload: ErrorStatusResponse): UnknownEventAction => ({\r\n  type: ErrorStatusActionType.UNKNOWN_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-unknown[]\r\n\r\nexport type ErrorStatusListenerActions =\r\n  | NetworkIssuesEventAction\r\n  | AccessDeniedEventAction\r\n  | MalformedResponseEventAction\r\n  | BadRequestEventAction\r\n  | RequestMessageCountExceedEventAction\r\n  | DecryptionErrorEventAction\r\n  | TimeoutConnectionEventAction\r\n  | UnknownEventAction;\r\n\r\n// tag::RDX-listener-error[]\r\nexport const createErrorStatusListener = (\r\n  dispatch: Dispatch<ErrorStatusListenerActions>\r\n) => ({\r\n  status: (payload: ErrorStatusResponse) => {\r\n    switch (payload.category) {\r\n      case ErrorStatusCategory.PN_ACCES_DENIED_CATEGORY:\r\n        dispatch(accessDenied(payload));\r\n        break;\r\n      case ErrorStatusCategory.PN_MALFORMED_RESPONSE_CATEGORY:\r\n        dispatch(malformedResponse(payload));\r\n        break;\r\n      case ErrorStatusCategory.PN_BAD_REQUEST_CATEGORY:\r\n        dispatch(badRequest(payload));\r\n        break;\r\n      case ErrorStatusCategory.PN_DECRYPTION_ERROR_CATEGORY:\r\n        dispatch(decryptionError(payload));\r\n        break;\r\n      case ErrorStatusCategory.PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY:\r\n        dispatch(requestMessageCountExceeded(payload));\r\n        break;\r\n      case ErrorStatusCategory.PN_UNKNOWN_CATEGORY:\r\n        dispatch(unknown(payload));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-listener-error[]\r\n","// tag::RDX-enum-networkstatus-action[]\r\nexport enum NetworkStatusActionType {\r\n  NETWORK_UP_EVENT = 'pubnub/NETWORK_UP_EVENT',\r\n  NETWORK_DOWN_EVENT = 'pubnub/NETWORK_DOWN_EVENT',\r\n}\r\n// end::RDX-enum-networkstatus-action[]\r\n","// tag::RDX-enum-networkstatus-category[]\r\nexport enum NetworkStatusCategory {\r\n  PN_NETWORK_UP_CATEGORY = 'PNNetworkUpCategory',\r\n  PN_NETWORK_DOWN_CATEGORY = 'PNNetworkDownCategory',\r\n  PN_RECONNECTED_CATEGORY = 'PNReconnectedCategory',\r\n  PN_CONNECTED_CATEGORY = 'PNConnectedCategory',\r\n  PN_TIMEOUT_CATEGORY = 'PNTimeoutCategory',\r\n}\r\n// end::RDX-enum-networkstatus-category[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  NetworkUpEventAction,\r\n  NetworkDownEventAction,\r\n  NetworkStatusResponse,\r\n} from './NetworkStatusActions';\r\nimport { NetworkStatusActionType } from './NetworkStatusActionType.enum';\r\nimport { NetworkStatusCategory } from './NetworkStatusCategory.enum';\r\n\r\n// tag::RDX-type-networkup[]\r\nexport const networkUp = (): NetworkUpEventAction => ({\r\n  type: NetworkStatusActionType.NETWORK_UP_EVENT,\r\n});\r\n// end::RDX-type-networkup[]\r\n\r\n// tag::RDX-type-networkdown[]\r\nexport const networkDown = (): NetworkDownEventAction => ({\r\n  type: NetworkStatusActionType.NETWORK_DOWN_EVENT,\r\n});\r\n// end::RDX-type-networkdown[]\r\n\r\n// tag::RDX-type-networkstatus[]\r\nexport type NetworkStatusListenerActions =\r\n  | NetworkUpEventAction\r\n  | NetworkDownEventAction;\r\n// end::RDX-type-networkstatus[]\r\n\r\n// tag::RDX-method-listener-networkstatus[]\r\nexport const createNetworkStatusListener = (\r\n  dispatch: Dispatch<NetworkStatusListenerActions>\r\n) => ({\r\n  status: (payload: NetworkStatusResponse) => {\r\n    switch (payload.category) {\r\n      case NetworkStatusCategory.PN_NETWORK_UP_CATEGORY:\r\n        dispatch(networkUp());\r\n        break;\r\n      case NetworkStatusCategory.PN_NETWORK_DOWN_CATEGORY:\r\n        dispatch(networkDown());\r\n        break;\r\n      case NetworkStatusCategory.PN_RECONNECTED_CATEGORY:\r\n        dispatch(networkUp());\r\n        break;\r\n      case NetworkStatusCategory.PN_CONNECTED_CATEGORY:\r\n        dispatch(networkUp());\r\n        break;\r\n      case NetworkStatusCategory.PN_TIMEOUT_CATEGORY:\r\n        dispatch(networkDown());\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-networkstatus[]\r\n","// tag::RDX-enum-subscription-action[]\r\nexport enum SubscriptionStatusActionType {\r\n  RECONNECTED_EVENT = 'pubnub/RECONNECTED_EVENT',\r\n  CONNECTED_EVENT = 'pubnub/CONNECTED_EVENT',\r\n}\r\n// end::RDX-enum-subscription-action[]\r\n","// tag::RDX-enum-subscription-category[]\r\nexport enum SubscriptionStatusCategory {\r\n  PN_CONNECTED_CATEGORY = 'PNConnectedCategory',\r\n  PN_RECONNECTED_CATEGORY = 'PNReconnectedCategory',\r\n}\r\n// end::RDX-enum-subscription-category[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ReconnectedAction,\r\n  ConnectedAction,\r\n  SubscriptionStatusResponse,\r\n} from './SubscribeStatusActions';\r\nimport { SubscriptionStatusActionType } from './SubscriptionStatusActionType.enum';\r\nimport { SubscriptionStatusCategory } from './SubscriptionStatusCategory.enum';\r\n\r\n// tag::RDX-event-subscription-reconnect[]\r\nexport const reconnected = (\r\n  payload: SubscriptionStatusResponse\r\n): ReconnectedAction => ({\r\n  type: SubscriptionStatusActionType.RECONNECTED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-subscription-reconnect[]\r\n\r\n// tag::RDX-event-subscription-connect[]\r\nexport const connected = (\r\n  payload: SubscriptionStatusResponse\r\n): ConnectedAction => ({\r\n  type: SubscriptionStatusActionType.CONNECTED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-subscription-connect[]\r\n\r\n// tag::RDX-event-subscription-status[]\r\nexport type SubscriptionStatusListenerActions =\r\n  | ReconnectedAction\r\n  | ConnectedAction;\r\n// end::RDX-event-subscription-status[]\r\n\r\n// tag::RDX-method-listener-subscription[]\r\nexport const createSubscriptionStatusListener = (\r\n  dispatch: Dispatch<SubscriptionStatusListenerActions>\r\n) => ({\r\n  status: (payload: SubscriptionStatusResponse) => {\r\n    switch (payload.category) {\r\n      case SubscriptionStatusCategory.PN_CONNECTED_CATEGORY:\r\n        dispatch(connected(payload));\r\n        break;\r\n      case SubscriptionStatusCategory.PN_RECONNECTED_CATEGORY:\r\n        dispatch(reconnected(payload));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-subscription[]\r\n","import { Message } from 'features/message/MessageActions';\r\nimport { PresenceEventMessage } from 'features/presence/PresenceActions';\r\nimport { Signal } from 'features/signal/SignalActions';\r\nimport { User, UserListenerPayload } from 'features/user/UserActions';\r\nimport { Space, SpaceListenerPayload } from 'features/space/SpaceActions';\r\nimport {\r\n  Membership,\r\n  MembershipListenerPayload,\r\n} from 'features/membership/MembershipActions';\r\nimport { NetworkStatusResponse } from 'features/networkStatus/NetworkStatusActions';\r\nimport { SubscriptionStatusResponse } from 'features/subscriptionStatus/SubscribeStatusActions';\r\nimport { ErrorStatusResponse } from 'features/errorStatus/ErrorStatusActions';\r\nimport { ObjectsCustom } from './ObjectsCustom';\r\n\r\n// TODO: replace with type from javascript SDK\r\nexport interface PubNubListener {\r\n  message?: (message: Message) => void;\r\n  presence?: (presence: PresenceEventMessage) => void;\r\n  signal?: (signal: Signal) => void;\r\n  user?: (user: UserListenerPayload<User<ObjectsCustom>>) => void;\r\n  space?: (space: SpaceListenerPayload<Space<ObjectsCustom>>) => void;\r\n  membership?: (\r\n    membership: MembershipListenerPayload<\r\n      Membership<ObjectsCustom, Space<ObjectsCustom>>\r\n    >\r\n  ) => void;\r\n  status?: (\r\n    status: NetworkStatusResponse &\r\n      SubscriptionStatusResponse &\r\n      ErrorStatusResponse\r\n  ) => void;\r\n}\r\n\r\n/**\r\n * Combines multiple listener objects into one object that supports all of them.\r\n *\r\n * @param listeners Array of listener objects.\r\n * @returns The combined listener Object.\r\n */\r\nexport const combineListeners = (...listeners: PubNubListener[]) => {\r\n  return Object.assign({}, ...mergeListenersByType(listeners));\r\n};\r\n\r\n/**\r\n * Take a list of listeners and combine listeners of the same type together.\r\n *\r\n * @param listeners Array of listener objects.\r\n * @returns Array of listener objects with like types combined to single listener object.\r\n */\r\nconst mergeListenersByType = (\r\n  listeners: PubNubListener[]\r\n): PubNubListener[] => {\r\n  const result: PubNubListener[] = [];\r\n  const incomingListeners: {\r\n    [key in keyof PubNubListener]: PubNubListener[];\r\n  } = {};\r\n\r\n  // group the listeners by type so we can combine them\r\n  listeners.forEach((listener) => {\r\n    if (listener.message !== undefined) {\r\n      if (incomingListeners.message === undefined) {\r\n        incomingListeners['message'] = [];\r\n      }\r\n\r\n      incomingListeners['message'].push(listener);\r\n    }\r\n\r\n    if (listener.presence !== undefined) {\r\n      if (incomingListeners.presence === undefined) {\r\n        incomingListeners['presence'] = [];\r\n      }\r\n\r\n      incomingListeners['presence'].push(listener);\r\n    }\r\n\r\n    if (listener.signal !== undefined) {\r\n      if (incomingListeners.signal === undefined) {\r\n        incomingListeners['signal'] = [];\r\n      }\r\n\r\n      incomingListeners['signal'].push(listener);\r\n    }\r\n\r\n    if (listener.user !== undefined) {\r\n      if (incomingListeners.user === undefined) {\r\n        incomingListeners['user'] = [];\r\n      }\r\n\r\n      incomingListeners['user'].push(listener);\r\n    }\r\n\r\n    if (listener.space !== undefined) {\r\n      if (incomingListeners.space === undefined) {\r\n        incomingListeners['space'] = [];\r\n      }\r\n\r\n      incomingListeners['space'].push(listener);\r\n    }\r\n\r\n    if (listener.membership !== undefined) {\r\n      if (incomingListeners.membership === undefined) {\r\n        incomingListeners['membership'] = [];\r\n      }\r\n\r\n      incomingListeners['membership'].push(listener);\r\n    }\r\n\r\n    if (listener.status !== undefined) {\r\n      if (incomingListeners.status === undefined) {\r\n        incomingListeners['status'] = [];\r\n      }\r\n\r\n      incomingListeners['status'].push(listener);\r\n    }\r\n  });\r\n\r\n  // merge the grouped listeners and add to the result list\r\n  Object.entries(incomingListeners).forEach(\r\n    ([listenerType, listenersOfType]) => {\r\n      if (listenersOfType && listenersOfType.length === 1) {\r\n        // only one listener for this type so add directly to the result list\r\n        result.push(listenersOfType[0]);\r\n      } else if (listenersOfType && listenersOfType.length > 1) {\r\n        // multiple listeners for this type so combine them and add to the result list\r\n        result.push(\r\n          createCombinedListener(\r\n            listenerType as keyof PubNubListener,\r\n            listenersOfType\r\n          )\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Take a list of listeners of the same type and combine to single listener object.\r\n * For example an array of status listener objects combined to a single status listener object.\r\n *\r\n * @param listenerType The listener type.\r\n * @param listeners The Array of listeners of the same type.\r\n */\r\nconst createCombinedListener = (\r\n  listenerType: keyof PubNubListener,\r\n  listeners: PubNubListener[]\r\n): PubNubListener => {\r\n  // returns a single listener which invokes each of the incomming listeners\r\n  return {\r\n    [listenerType]: (\r\n      payload: Message &\r\n        PresenceEventMessage &\r\n        Signal &\r\n        UserListenerPayload<User<ObjectsCustom>> &\r\n        SpaceListenerPayload<Space<ObjectsCustom>> &\r\n        MembershipListenerPayload<\r\n          Membership<ObjectsCustom, Space<ObjectsCustom>>\r\n        > &\r\n        NetworkStatusResponse &\r\n        SubscriptionStatusResponse &\r\n        ErrorStatusResponse\r\n    ) => {\r\n      listeners.forEach((listener) => {\r\n        let currentListener = listener[listenerType];\r\n\r\n        if (currentListener !== undefined) {\r\n          currentListener(payload);\r\n        }\r\n      });\r\n    },\r\n  };\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport { createMessageListener } from '../message/MessageListener';\r\nimport { createPresenceListener } from '../presence/PresenceListener';\r\nimport { createSignalListener } from '../signal/SignalListener';\r\nimport { createErrorStatusListener } from '../errorStatus/ErrorStatusListener';\r\nimport { createNetworkStatusListener } from '../networkStatus/NetworkStatusListener';\r\nimport { createSubscriptionStatusListener } from '../subscriptionStatus/SubscriptionStatusListener';\r\nimport { createMembershipListener } from '../membership/MembershipListener';\r\nimport { createSpaceListener } from '../space/SpaceListener';\r\nimport { createUserListener } from '../user/UserListener';\r\nimport { combineListeners } from '../../foundations/CombineListeners';\r\n\r\n// tag::RDX-listener-pubnub[]\r\nexport const createPubNubListener = (dispatch: Dispatch) =>\r\n  combineListeners(\r\n    createMessageListener(dispatch),\r\n    createPresenceListener(dispatch),\r\n    createSignalListener(dispatch),\r\n    createErrorStatusListener(dispatch),\r\n    createErrorStatusListener(dispatch),\r\n    createNetworkStatusListener(dispatch),\r\n    createSubscriptionStatusListener(dispatch),\r\n    createUserListener(dispatch),\r\n    createSpaceListener(dispatch),\r\n    createMembershipListener(dispatch)\r\n  );\r\n// end::RDX-listener-pubnub[]\r\n","import {\r\n  Message,\r\n  MessageActions,\r\n  FetchMessageHistorySuccess,\r\n} from './MessageActions';\r\nimport { MessageActionType } from './MessageActionType.enum';\r\nimport { ActionMeta, AnyMeta } from '../../foundations/ActionMeta';\r\n\r\n// tag::RDX-type-messages[]\r\nexport type MessageState<MessageType extends Message> = {\r\n  byId: {\r\n    [channel: string]: MessageType[];\r\n  };\r\n};\r\n// end::RDX-type-messages[]\r\n\r\nconst createInitialState = <\r\n  MessageType extends Message\r\n>(): MessageState<MessageType> => ({\r\n  byId: {},\r\n});\r\n\r\nconst messageReceived = <MessageType extends Message>(\r\n  state: MessageState<MessageType>,\r\n  payload: MessageType\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  if (newState.byId[payload.channel] === undefined) {\r\n    newState.byId[payload.channel] = [];\r\n  }\r\n\r\n  newState.byId[payload.channel] = [...newState.byId[payload.channel], payload];\r\n\r\n  return newState;\r\n};\r\n\r\nconst messageHistoryRetrieved = <\r\n  MessageContentType,\r\n  MessageType extends Message\r\n>(\r\n  state: MessageState<MessageType>,\r\n  payload: FetchMessageHistorySuccess<MessageContentType>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  if (newState.byId[payload.request.channel] === undefined) {\r\n    newState.byId[payload.request.channel] = [];\r\n  }\r\n\r\n  let results: MessageType[] = payload.response.messages.map(\r\n    (m) =>\r\n      (({\r\n        channel: payload.request.channel,\r\n        message: m.entry as MessageContentType,\r\n        timetoken: m.timetoken,\r\n      } as unknown) as MessageType)\r\n  );\r\n\r\n  newState.byId[payload.request.channel] = [\r\n    ...newState.byId[payload.request.channel],\r\n    ...results,\r\n  ];\r\n\r\n  return newState;\r\n};\r\n\r\n// tag::RDX-reducer-messages[]\r\nexport const createMessageReducer = <\r\n  MessageType extends Message = Message,\r\n  MessageContentType extends object = {},\r\n  MessageMetaType extends object = {},\r\n  Meta extends ActionMeta = AnyMeta\r\n>() => (\r\n  state: MessageState<MessageType> = createInitialState<MessageType>(),\r\n  action: MessageActions<MessageType, MessageContentType, MessageMetaType, Meta>\r\n): MessageState<MessageType> => {\r\n  switch (action.type) {\r\n    case MessageActionType.MESSAGE_RECEIVED:\r\n      return messageReceived<MessageType>(state, action.payload);\r\n    case MessageActionType.MESSAGE_HISTORY_RETRIEVED:\r\n      return messageHistoryRetrieved<MessageContentType, MessageType>(\r\n        state,\r\n        action.payload\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-reducer-messages[]\r\n","import { Signal, SignalActions } from './SignalActions';\r\nimport { SignalActionType } from './SignalActionType.enum';\r\nimport { ActionMeta, AnyMeta } from '../../foundations/ActionMeta';\r\n\r\n// tag::RDX-type-signals[]\r\nexport type SignalState<SignalType extends Signal> = {\r\n  byId: {\r\n    [channel: string]: SignalType[];\r\n  };\r\n};\r\n// end::RDX-type-signals[]\r\n\r\nconst createInitialState = <\r\n  SignalType extends Signal\r\n>(): SignalState<SignalType> => ({\r\n  byId: {},\r\n});\r\n\r\nconst signalReceived = <SignalType extends Signal>(\r\n  state: SignalState<SignalType>,\r\n  payload: SignalType\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  if (newState.byId[payload.channel] === undefined) {\r\n    newState.byId[payload.channel] = [];\r\n  }\r\n\r\n  newState.byId[payload.channel] = [...newState.byId[payload.channel], payload];\r\n\r\n  return newState;\r\n};\r\n\r\n// tag::RDX-reducer-signals[]\r\nexport const createSignalReducer = <\r\n  SignalType extends Signal = Signal,\r\n  SignalContentType extends object = {},\r\n  Meta extends ActionMeta = AnyMeta\r\n>() => (\r\n  state: SignalState<SignalType> = createInitialState<SignalType>(),\r\n  action: SignalActions<SignalType, SignalContentType, Meta>\r\n): SignalState<SignalType> => {\r\n  switch (action.type) {\r\n    case SignalActionType.SIGNAL_RECEIVED:\r\n      return signalReceived<SignalType>(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-reducer-signals[]\r\n","import { AnyAction } from 'redux';\r\nimport { PresenceListenerActions } from './PresenceListener';\r\nimport { PresenceActionType } from './PresenceActionType.enum';\r\nimport {\r\n  PresenceEventMessage,\r\n  Presence,\r\n  HereNowResponse,\r\n  HereNowSuccess,\r\n  HereNowRetrievedAction,\r\n  PresenceStateRetrievedAction,\r\n} from './PresenceActions';\r\nimport { PresenceState } from './PresenceState';\r\n\r\n// tag::RDX-type-presence-byid[]\r\nexport interface PresencebyIdState<ReceivedPresence extends Presence> {\r\n  byId: {\r\n    [channelId: string]: {\r\n      name: string;\r\n      occupants: ReceivedPresence[];\r\n      occupancy: number;\r\n    };\r\n  };\r\n  totalOccupancy: number;\r\n}\r\n// end::RDX-type-presence-byid[]\r\n\r\nconst createInitialState = () => {\r\n  return {\r\n    byId: {},\r\n    totalOccupancy: 0,\r\n  };\r\n};\r\n\r\nconst hereNow = <ReceivedPresence extends Presence<PresenceState>>(\r\n  state: PresencebyIdState<ReceivedPresence>,\r\n  payload: HereNowSuccess<ReceivedPresence>\r\n) => {\r\n  let newState = {\r\n    byId: {\r\n      ...state.byId,\r\n      ...payload.response.channels,\r\n    },\r\n    totalOccupancy: payload.response.totalOccupancy,\r\n  };\r\n\r\n  return newState;\r\n};\r\n\r\nconst getState = <ReceivedPresence extends Presence<PresenceState>>(\r\n  state: PresencebyIdState<ReceivedPresence>,\r\n  payload: HereNowResponse<ReceivedPresence>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n    totalOccupancy: state.totalOccupancy,\r\n  };\r\n\r\n  Object.keys(payload.channels).forEach((channel) => {\r\n    // update occupant state if exists\r\n    if (newState.byId[channel]) {\r\n      newState.byId[channel] = payload.channels[channel];\r\n    }\r\n  });\r\n\r\n  return newState;\r\n};\r\n\r\nconst userJoined = <ReceivedPresence extends Presence<PresenceState>>(\r\n  state: PresencebyIdState<ReceivedPresence>,\r\n  payload: PresenceEventMessage<ReceivedPresence>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n    totalOccupancy: state.totalOccupancy,\r\n  };\r\n\r\n  let occupants: ReceivedPresence[] = [];\r\n\r\n  // remove occupant if exists\r\n  if (newState.byId[payload.channel]) {\r\n    occupants = newState.byId[payload.channel].occupants;\r\n\r\n    newState.byId[payload.channel].occupants = occupants.filter(\r\n      (occupant) => occupant.uuid !== payload.uuid\r\n    );\r\n\r\n    newState.byId[payload.channel].occupancy =\r\n      newState.byId[payload.channel].occupants.length;\r\n\r\n    if (occupants.length === newState.byId[payload.channel].occupants.length) {\r\n      newState.totalOccupancy++;\r\n    }\r\n  } else {\r\n    newState.totalOccupancy++;\r\n  }\r\n\r\n  // add occupant and update occupancy\r\n  newState.byId[payload.channel] = {\r\n    name: payload.channel,\r\n    occupants: [\r\n      ...occupants,\r\n      {\r\n        uuid: payload.uuid,\r\n        state: payload.state,\r\n      } as ReceivedPresence,\r\n    ],\r\n    occupancy: payload.occupancy,\r\n  };\r\n\r\n  return newState;\r\n};\r\n\r\nconst userLeft = <ReceivedPresence extends Presence<PresenceState>>(\r\n  state: PresencebyIdState<ReceivedPresence>,\r\n  payload: PresenceEventMessage<ReceivedPresence>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n    totalOccupancy: state.totalOccupancy,\r\n  };\r\n\r\n  // remove occupant if exists\r\n  if (newState.byId[payload.channel]) {\r\n    let occupants = newState.byId[payload.channel].occupants;\r\n\r\n    newState.byId[payload.channel].occupants = occupants.filter(\r\n      (occupant) => occupant.uuid !== payload.uuid\r\n    );\r\n\r\n    if (occupants.length > newState.byId[payload.channel].occupants.length) {\r\n      newState.byId[payload.channel].occupancy--;\r\n      newState.totalOccupancy--;\r\n    }\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\nconst userStateChange = <ReceivedPresence extends Presence<PresenceState>>(\r\n  state: PresencebyIdState<ReceivedPresence>,\r\n  payload: PresenceEventMessage<ReceivedPresence>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n    totalOccupancy: state.totalOccupancy,\r\n  };\r\n\r\n  // update occupant state if exists\r\n  if (newState.byId[payload.channel]) {\r\n    let occupants = newState.byId[payload.channel].occupants;\r\n\r\n    occupants.forEach((occupant) => {\r\n      if (occupant.uuid === payload.uuid) {\r\n        occupant.state = payload.state;\r\n      }\r\n    });\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\n// tag::RDX-type-presence-action[]\r\nexport type PresenceActions<RetrievedPresence extends Presence> =\r\n  | HereNowRetrievedAction<RetrievedPresence>\r\n  | PresenceStateRetrievedAction<RetrievedPresence>\r\n  | PresenceListenerActions;\r\n// end::RDX-type-presence-action[]\r\n\r\n// tag::RDX-type-presence[]\r\nexport type PresenceReducer<\r\n  StoredPresence extends Presence,\r\n  PresenceAction extends AnyAction\r\n> = (\r\n  state: PresencebyIdState<StoredPresence> | undefined,\r\n  action: PresenceAction\r\n) => PresencebyIdState<StoredPresence>;\r\n// end::RDX-type-presence[]\r\n\r\n// tag::RDX-method-reducer-presence[]\r\nexport const createPresenceReducer = <\r\n  StoredPresence extends Presence<PresenceState> = Presence,\r\n  PresenceAction extends AnyAction = PresenceActions<StoredPresence>\r\n>(): PresenceReducer<StoredPresence, PresenceAction> => (\r\n  state: PresencebyIdState<StoredPresence> = createInitialState(),\r\n  action: PresenceAction\r\n): PresencebyIdState<StoredPresence> => {\r\n  switch (action.type) {\r\n    case PresenceActionType.HERE_NOW_RETRIEVED:\r\n      return hereNow<StoredPresence>(state, action.payload);\r\n    case PresenceActionType.PRESENCE_STATE_RETRIEVED:\r\n      return getState<StoredPresence>(state, action.payload);\r\n    case PresenceActionType.JOIN_EVENT:\r\n      return userJoined<StoredPresence>(state, action.payload);\r\n    case PresenceActionType.LEAVE_EVENT:\r\n    case PresenceActionType.TIMEOUT_EVENT:\r\n      return userLeft<StoredPresence>(state, action.payload);\r\n    case PresenceActionType.STATE_CHANGE_EVENT:\r\n      return userStateChange<StoredPresence>(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-presence[]\r\n","import { NetworkStatusListenerActions } from './NetworkStatusListener';\r\nimport { NetworkStatusActionType } from './NetworkStatusActionType.enum';\r\n\r\n// tag::RDX-type-state-networkstatus[]\r\nexport interface NetworkStatusState {\r\n  isConnected: boolean;\r\n}\r\n// end::RDX-type-state-networkstatus[]\r\n\r\ntype NetworkStatusInitializerFunction = () => boolean;\r\n\r\n// tag::RDX-reducer-networkstatus[]\r\nexport const createNetworkStatusReducer = (\r\n  initializer: NetworkStatusInitializerFunction | boolean\r\n) => {\r\n  let initialState: NetworkStatusState;\r\n\r\n  if (typeof initializer === 'boolean') {\r\n    initialState = { isConnected: initializer };\r\n  } else if (typeof initializer === 'function') {\r\n    initialState = { isConnected: initializer() };\r\n    if (typeof initialState.isConnected !== 'boolean') {\r\n      throw new Error(\r\n        'The initializer function must return a boolean value (true or false)'\r\n      );\r\n    }\r\n  } else {\r\n    throw new Error(\r\n      'The initializer parameter must be a boolean value (true or false) or function'\r\n    );\r\n  }\r\n\r\n  return function networkStatusReducer(\r\n    state = initialState,\r\n    action: NetworkStatusListenerActions\r\n  ): NetworkStatusState {\r\n    switch (action.type) {\r\n      case NetworkStatusActionType.NETWORK_UP_EVENT:\r\n        return {\r\n          isConnected: true,\r\n        };\r\n      case NetworkStatusActionType.NETWORK_DOWN_EVENT:\r\n        return {\r\n          isConnected: false,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n};\r\n// end::RDX-reducer-networkstatus[]\r\n","import { AnyAction } from 'redux';\r\nimport {\r\n  UserActions,\r\n  UserListenerActions,\r\n  User,\r\n  UserEventMessage,\r\n  UserSuccess,\r\n  DeleteUserSuccess,\r\n  FetchUsersSuccess,\r\n  FetchUserByIdSuccess,\r\n} from './UserActions';\r\nimport { UserActionType } from './UserActionType.enum';\r\nimport {\r\n  MembersActions,\r\n  Members,\r\n  FetchMembersSuccess,\r\n} from '../../features/members/MembersActions';\r\nimport {\r\n  MembershipActions,\r\n  Membership,\r\n} from '../../features/membership/MembershipActions';\r\nimport { Space } from '../../features/space/SpaceActions';\r\nimport { MembersActionType } from '../../features/members/MembersActionType.enum';\r\nimport { ObjectsCustom } from '../../foundations/ObjectsCustom';\r\nimport { AnyMeta } from '../../foundations/ActionMeta';\r\n\r\n// tag::RDX-state-users-byid[]\r\nexport interface UsersByIdState<ReceivedUser extends User<ObjectsCustom>> {\r\n  byId: {\r\n    [userId: string]: ReceivedUser;\r\n  };\r\n}\r\n// end::RDX-state-users-byid[]\r\n\r\nconst createInitialState = () => ({\r\n  byId: {},\r\n});\r\n\r\nconst userCreated = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: UserSuccess<ReceivedUser>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst userUpdated = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: UserSuccess<ReceivedUser>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst userDeleted = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: DeleteUserSuccess\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  delete newState.byId[payload.request.userId];\r\n\r\n  return newState;\r\n};\r\n\r\nconst usersRetrieved = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: FetchUsersSuccess<ReceivedUser>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  payload.response.data.forEach((item) => {\r\n    newState.byId[item.id] = item;\r\n  });\r\n\r\n  return newState;\r\n};\r\n\r\nconst userRetrieved = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: FetchUserByIdSuccess<ReceivedUser>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst userUpdatedEventReceived = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: UserEventMessage<ReceivedUser>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.data.id] = payload.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst userDeletedEventReceived = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: UserEventMessage<ReceivedUser>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  delete newState.byId[payload.data.id];\r\n\r\n  return newState;\r\n};\r\n\r\nconst membersRetrieved = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: FetchMembersSuccess<Members<ObjectsCustom, ReceivedUser>>\r\n) => {\r\n  let newState = state;\r\n\r\n  if (payload.response.data.length > 0) {\r\n    newState = {\r\n      byId: {\r\n        ...state.byId,\r\n      },\r\n    };\r\n\r\n    for (let i = 0; i < payload.response.data.length; i++) {\r\n      let currentMember = payload.response.data[i];\r\n\r\n      if (currentMember.user) {\r\n        newState.byId[currentMember.id] = currentMember.user;\r\n      }\r\n    }\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\ntype UserReducerActions<StoredUser extends User<ObjectsCustom>> =\r\n  | UserActions<StoredUser, AnyMeta>\r\n  | UserListenerActions<StoredUser>\r\n  | MembersActions<Members<ObjectsCustom, Space>, AnyMeta>\r\n  | MembershipActions<Membership<ObjectsCustom, Space>, AnyMeta>;\r\n\r\n// tag::RDX-type-user[]\r\nexport type UserReducer<\r\n  StoredUser extends User<ObjectsCustom>,\r\n  UserAction extends AnyAction\r\n> = (\r\n  state: UsersByIdState<StoredUser> | undefined,\r\n  action: UserAction\r\n) => UsersByIdState<StoredUser>;\r\n// end::RDX-type-user[]\r\n\r\n// tag::RDX-method-reducer-user[]\r\nexport const createUserReducer = <\r\n  StoredUser extends User<ObjectsCustom> = User,\r\n  UserAction extends AnyAction = UserReducerActions<StoredUser>\r\n>(): UserReducer<StoredUser, UserAction> => (\r\n  state: UsersByIdState<StoredUser> = createInitialState(),\r\n  action: UserAction\r\n): UsersByIdState<StoredUser> => {\r\n  switch (action.type) {\r\n    case UserActionType.USER_CREATED:\r\n      return userCreated<StoredUser>(state, action.payload);\r\n    case UserActionType.USER_UPDATED:\r\n      return userUpdated<StoredUser>(state, action.payload);\r\n    case UserActionType.USER_DELETED:\r\n      return userDeleted<StoredUser>(state, action.payload);\r\n    case UserActionType.USERS_RETRIEVED:\r\n      return usersRetrieved<StoredUser>(state, action.payload);\r\n    case UserActionType.USER_RETRIEVED:\r\n      return userRetrieved<StoredUser>(state, action.payload);\r\n    case UserActionType.USER_UPDATED_EVENT:\r\n      return userUpdatedEventReceived<StoredUser>(state, action.payload);\r\n    case UserActionType.USER_DELETED_EVENT:\r\n      return userDeletedEventReceived<StoredUser>(state, action.payload);\r\n    case MembersActionType.MEMBERS_RETRIEVED:\r\n      return membersRetrieved<StoredUser>(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-user[]\r\n","import { UsersRetrievedAction, User, FetchUsersSuccess } from './UserActions';\r\nimport { UserActionType } from './UserActionType.enum';\r\nimport { ObjectsCustom } from '../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../foundations/ActionMeta';\r\n\r\n// tag::RDX-state-userlist[]\r\ninterface UserListState {\r\n  userIds: string[];\r\n}\r\n// end::RDX-state-userlist[]\r\n\r\nconst createInitialState = (): UserListState => ({\r\n  userIds: [],\r\n});\r\n\r\nconst usersRetrieved = <UserType extends User<ObjectsCustom>>(\r\n  payload: FetchUsersSuccess<UserType>\r\n) => ({ userIds: payload.response.data.map((user) => user.id) });\r\n\r\n// tag::RDX-method-reducer-userlist[]\r\nexport const createUserListReducer = <\r\n  UserType extends User<ObjectsCustom> = User,\r\n  Meta extends ActionMeta = AnyMeta\r\n>() => (\r\n  state: UserListState = createInitialState(),\r\n  action: UsersRetrievedAction<UserType, Meta>\r\n): UserListState => {\r\n  switch (action.type) {\r\n    case UserActionType.USERS_RETRIEVED:\r\n      return usersRetrieved(action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-userlist[]\r\n","import { AnyAction } from 'redux';\r\nimport {\r\n  SpaceActions,\r\n  SpaceListenerActions,\r\n  Space,\r\n  SpaceEventMessage,\r\n  SpaceSuccess,\r\n  DeleteSpaceSuccess,\r\n  FetchSpacesSuccess,\r\n  FetchSpaceByIdSuccess,\r\n} from './SpaceActions';\r\nimport { SpaceActionType } from './SpaceActionType.enum';\r\nimport {\r\n  MembershipActions,\r\n  FetchMembershipSuccess,\r\n  MembershipRetrievedAction,\r\n  Membership,\r\n} from '../membership/MembershipActions';\r\nimport { MembershipActionType } from '../../features/membership/MembershipActionType.enum';\r\nimport { AnyMeta } from '../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from '../../foundations/ObjectsCustom';\r\n\r\n// tag::RDX-type-spacesbyid[]\r\nexport type SpacesByIdState<ReceivedSpace extends Space<ObjectsCustom>> = {\r\n  byId: {\r\n    [spaceId: string]: ReceivedSpace;\r\n  };\r\n};\r\n// end::RDX-type-spacesbyid[]\r\n\r\nconst createInitialState = () => ({\r\n  byId: {},\r\n});\r\n\r\nconst spaceCreated = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: SpaceSuccess<ReceivedSpace>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst spaceUpdated = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: SpaceSuccess<ReceivedSpace>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst spaceDeleted = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: DeleteSpaceSuccess\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  delete newState.byId[payload.request.spaceId];\r\n\r\n  return newState;\r\n};\r\n\r\nconst spacesRetrieved = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: FetchSpacesSuccess<ReceivedSpace>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  payload.response.data.forEach((item) => {\r\n    newState.byId[item.id] = item;\r\n  });\r\n\r\n  return newState;\r\n};\r\n\r\nconst spaceRetrieved = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: FetchSpaceByIdSuccess<ReceivedSpace>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst spaceUpdatedEventReceived = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: SpaceEventMessage<ReceivedSpace>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.data.id] = payload.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst spaceDeletedEventReceived = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: SpaceEventMessage<ReceivedSpace>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  delete newState.byId[payload.data.id];\r\n\r\n  return newState;\r\n};\r\n\r\nconst membershipRetrieved = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: FetchMembershipSuccess<Membership<ObjectsCustom, ReceivedSpace>>\r\n) => {\r\n  let newState = state;\r\n\r\n  if (payload.response.data.length > 0) {\r\n    newState = {\r\n      byId: {\r\n        ...state.byId,\r\n      },\r\n    };\r\n\r\n    for (let i = 0; i < payload.response.data.length; i++) {\r\n      let currentMembership = payload.response.data[i];\r\n\r\n      if (currentMembership.space) {\r\n        newState.byId[currentMembership.id] = currentMembership.space;\r\n      }\r\n    }\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\ntype SpaceReducerActions<StoredSpace extends Space<ObjectsCustom>> =\r\n  | SpaceActions<StoredSpace, AnyMeta>\r\n  | SpaceListenerActions<StoredSpace>\r\n  | MembershipRetrievedAction<Membership, AnyMeta>\r\n  | MembershipActions<Membership<ObjectsCustom, StoredSpace>, AnyMeta>;\r\n\r\n// tag::RDX-type-space[]\r\nexport type SpaceReducer<\r\n  StoredSpace extends Space<ObjectsCustom>,\r\n  SpaceAction extends AnyAction\r\n> = (\r\n  state: SpacesByIdState<StoredSpace> | undefined,\r\n  action: SpaceAction\r\n) => SpacesByIdState<StoredSpace>;\r\n// end::RDX-type-space[]\r\n\r\n// tag::RDX-method-reducer-space[]\r\nexport const createSpaceReducer = <\r\n  StoredSpace extends Space<ObjectsCustom> = Space,\r\n  SpaceAction extends AnyAction = SpaceReducerActions<StoredSpace>\r\n>(): SpaceReducer<StoredSpace, SpaceAction> => (\r\n  state: SpacesByIdState<StoredSpace> = createInitialState(),\r\n  action: SpaceAction\r\n): SpacesByIdState<StoredSpace> => {\r\n  switch (action.type) {\r\n    case SpaceActionType.SPACE_CREATED:\r\n      return spaceCreated<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACE_UPDATED:\r\n      return spaceUpdated<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACE_DELETED:\r\n      return spaceDeleted<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACES_RETRIEVED:\r\n      return spacesRetrieved<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACE_RETRIEVED:\r\n      return spaceRetrieved<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACE_UPDATED_EVENT:\r\n      return spaceUpdatedEventReceived<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACE_DELETED_EVENT:\r\n      return spaceDeletedEventReceived<StoredSpace>(state, action.payload);\r\n    case MembershipActionType.MEMBERSHIP_RETRIEVED:\r\n      return membershipRetrieved<StoredSpace>(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-space[]\r\n","import {\r\n  SpacesRetrievedAction,\r\n  Space,\r\n  FetchSpacesSuccess,\r\n} from './SpaceActions';\r\nimport { SpaceActionType } from './SpaceActionType.enum';\r\nimport { ObjectsCustom } from '../../foundations/ObjectsCustom';\r\nimport { ActionMeta, AnyMeta } from '../../foundations/ActionMeta';\r\n\r\ninterface SpaceListState {\r\n  spaceIds: string[];\r\n}\r\n\r\nconst createInitialState = (): SpaceListState => ({\r\n  spaceIds: [],\r\n});\r\n\r\nconst spacesRetrieved = <SpaceType extends Space<ObjectsCustom>>(\r\n  payload: FetchSpacesSuccess<SpaceType>\r\n) => ({ spaceIds: payload.response.data.map((space) => space.id) });\r\n\r\n// tag::RDX-method-reducer-spacelist[]\r\nexport const createSpaceListReducer = <\r\n  SpaceType extends Space<ObjectsCustom> = Space,\r\n  Meta extends ActionMeta = AnyMeta\r\n>() => (\r\n  state: SpaceListState = createInitialState(),\r\n  action: SpacesRetrievedAction<SpaceType, Meta>\r\n): SpaceListState => {\r\n  switch (action.type) {\r\n    case SpaceActionType.SPACES_RETRIEVED:\r\n      return spacesRetrieved<SpaceType>(action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-spacelist[]\r\n","import { AnyAction } from 'redux';\r\nimport {\r\n  MembershipEventMessage,\r\n  FetchMembershipSuccess,\r\n  MembershipSuccess,\r\n  MembershipListenerActions,\r\n  MembershipActions,\r\n  Membership,\r\n} from './MembershipActions';\r\nimport { MembershipActionType } from './MembershipActionType.enum';\r\nimport { ObjectsCustom } from '../../foundations/ObjectsCustom';\r\nimport { AnyMeta } from '../../foundations/ActionMeta';\r\nimport { User } from '../user/UserActions';\r\n\r\n// tag::RDX-type-memberships-byuserid[]\r\nexport type MembershipByUserIdState<\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n> = {\r\n  byId: {\r\n    [userId: string]: ReceivedMembership[];\r\n  };\r\n};\r\n// end::RDX-type-memberships-byuserid[]\r\n\r\nconst createInitialState = () => ({\r\n  byId: {},\r\n});\r\n\r\nconst userAddedToSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n>(\r\n  state: MembershipByUserIdState<ReceivedMembership>,\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n) => {\r\n  if (\r\n    state.byId[payload.data.userId] &&\r\n    state.byId[payload.data.userId].filter(\r\n      (membership) => membership.id === payload.data.spaceId\r\n    ).length === 0\r\n  ) {\r\n    let newState = {\r\n      byId: { ...state.byId },\r\n    };\r\n\r\n    newState.byId[payload.data.userId] = [\r\n      ...newState.byId[payload.data.userId],\r\n      ({\r\n        id: payload.data.spaceId,\r\n        custom: payload.data.custom,\r\n      } as unknown) as ReceivedMembership, // TODO: find out a better pattern here\r\n    ];\r\n\r\n    return newState;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst userRemovedFromSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n>(\r\n  state: MembershipByUserIdState<ReceivedMembership>,\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n) => {\r\n  if (\r\n    state.byId[payload.data.userId] &&\r\n    state.byId[payload.data.userId].filter(\r\n      (membership) => membership.id === payload.data.spaceId\r\n    ).length > 0\r\n  ) {\r\n    let newState = {\r\n      byId: { ...state.byId },\r\n    };\r\n\r\n    newState.byId[payload.data.userId] = newState.byId[\r\n      payload.data.userId\r\n    ].filter((membership) => membership.id !== payload.data.spaceId);\r\n\r\n    return newState;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst userMembershipUpdatedOnSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n>(\r\n  state: MembershipByUserIdState<ReceivedMembership>,\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  let clonedUser = newState.byId[payload.data.userId];\r\n\r\n  if (clonedUser !== undefined) {\r\n    clonedUser = clonedUser.map((space) => {\r\n      if (space.id === payload.data.spaceId) {\r\n        return {\r\n          ...space,\r\n          custom: payload.data.custom,\r\n        };\r\n      } else {\r\n        return space;\r\n      }\r\n    });\r\n  }\r\n\r\n  newState.byId[payload.data.userId] = clonedUser;\r\n\r\n  return newState;\r\n};\r\n\r\nconst membershipResult = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n>(\r\n  state: MembershipByUserIdState<ReceivedMembership>,\r\n  payload:\r\n    | FetchMembershipSuccess<ReceivedMembership>\r\n    | MembershipSuccess<ReceivedMembership>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.request.userId] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\ntype MembershipReducerActions<\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n> =\r\n  | MembershipActions<ReceivedMembership, AnyMeta>\r\n  | MembershipListenerActions<ReceivedMembership>;\r\n\r\n// tag::RDX-type-membership[]\r\nexport type MembershipReducer<\r\n  StoredMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>,\r\n  MembershipAction extends AnyAction\r\n> = (\r\n  state: MembershipByUserIdState<StoredMembership> | undefined,\r\n  action: MembershipAction\r\n) => MembershipByUserIdState<StoredMembership>;\r\n// end::RDX-type-membership[]\r\n\r\n// tag::RDX-method-reducer-membership[]\r\nexport const createMembershipReducer = <\r\n  StoredMembership extends Membership<\r\n    ObjectsCustom,\r\n    User<ObjectsCustom>\r\n  > = Membership,\r\n  MembershipAction extends AnyAction = MembershipReducerActions<\r\n    StoredMembership\r\n  >\r\n>(): MembershipReducer<StoredMembership, MembershipAction> => (\r\n  state = createInitialState(),\r\n  action: MembershipAction\r\n): MembershipByUserIdState<StoredMembership> => {\r\n  switch (action.type) {\r\n    case MembershipActionType.MEMBERSHIP_RETRIEVED:\r\n    case MembershipActionType.MEMBERSHIP_UPDATED:\r\n    case MembershipActionType.SPACES_JOINED:\r\n    case MembershipActionType.SPACES_LEFT:\r\n      return membershipResult<StoredMembership>(state, action.payload);\r\n    case MembershipActionType.USER_ADDED_TO_SPACE_EVENT:\r\n      return userAddedToSpace<StoredMembership>(state, action.payload);\r\n    case MembershipActionType.USER_REMOVED_FROM_SPACE_EVENT:\r\n      return userRemovedFromSpace<StoredMembership>(state, action.payload);\r\n    case MembershipActionType.USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT:\r\n      return userMembershipUpdatedOnSpace<StoredMembership>(\r\n        state,\r\n        action.payload\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-membership[]\r\n","import { AnyAction } from 'redux';\r\nimport {\r\n  MembersActions,\r\n  Members,\r\n  FetchMembersSuccess,\r\n  MembersSuccess,\r\n} from './MembersActions';\r\nimport { MembersActionType } from './MembersActionType.enum';\r\nimport {\r\n  MembershipListenerActions,\r\n  MembershipEventMessage,\r\n  Membership,\r\n} from '../../features/membership/MembershipActions';\r\nimport { MembershipActionType } from '../../features/membership/MembershipActionType.enum';\r\nimport { ObjectsCustom } from '../../foundations/ObjectsCustom';\r\nimport { Space } from '../space/SpaceActions';\r\nimport { AnyMeta } from '../../foundations/ActionMeta';\r\n\r\n// tag::RDX-type-members-byspaceid[]\r\nexport type MembersBySpaceIdState<\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n> = {\r\n  byId: {\r\n    [spaceId: string]: ReceivedMembers[];\r\n  };\r\n};\r\n// end::RDX-type-members-byspaceid[]\r\n\r\nconst createInitialState = () => ({\r\n  byId: {},\r\n});\r\n\r\nconst userAddedToSpace = <\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  state: MembersBySpaceIdState<ReceivedMembers>,\r\n  payload: MembershipEventMessage<Membership>\r\n) => {\r\n  if (\r\n    state.byId[payload.data.spaceId] &&\r\n    state.byId[payload.data.spaceId].filter(\r\n      (membership) => membership.id === payload.data.userId\r\n    ).length === 0\r\n  ) {\r\n    let newState = {\r\n      byId: { ...state.byId },\r\n    };\r\n\r\n    newState.byId[payload.data.spaceId] = [\r\n      ...newState.byId[payload.data.spaceId],\r\n      ({\r\n        id: payload.data.userId,\r\n        custom: payload.data.custom,\r\n      } as unknown) as ReceivedMembers, // TODO: find out a better pattern here\r\n    ];\r\n\r\n    return newState;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst userRemovedFromSpace = <\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  state: MembersBySpaceIdState<ReceivedMembers>,\r\n  payload: MembershipEventMessage<Membership>\r\n) => {\r\n  if (\r\n    state.byId[payload.data.spaceId] &&\r\n    state.byId[payload.data.spaceId].filter(\r\n      (membership) => membership.id === payload.data.userId\r\n    ).length > 0\r\n  ) {\r\n    let newState = {\r\n      byId: { ...state.byId },\r\n    };\r\n\r\n    newState.byId[payload.data.spaceId] = newState.byId[\r\n      payload.data.spaceId\r\n    ].filter((membership) => membership.id !== payload.data.userId);\r\n\r\n    return newState;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst userMembershipUpdatedOnSpace = <\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  state: MembersBySpaceIdState<ReceivedMembers>,\r\n  payload: MembershipEventMessage<Membership>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  let clonedSpace = newState.byId[payload.data.spaceId];\r\n\r\n  if (clonedSpace !== undefined) {\r\n    clonedSpace = clonedSpace.map((user) => {\r\n      if (user.id === payload.data.userId) {\r\n        return {\r\n          ...user,\r\n          custom: payload.data.custom,\r\n        };\r\n      } else {\r\n        return user;\r\n      }\r\n    });\r\n  }\r\n\r\n  newState.byId[payload.data.spaceId] = clonedSpace;\r\n\r\n  return newState;\r\n};\r\n\r\nconst membersResult = <\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  state: MembersBySpaceIdState<ReceivedMembers>,\r\n  payload:\r\n    | FetchMembersSuccess<ReceivedMembers>\r\n    | MembersSuccess<ReceivedMembers>\r\n) => {\r\n  let newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.request.spaceId] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\ntype MembersReducerActions<\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n> =\r\n  | MembersActions<ReceivedMembers, AnyMeta>\r\n  | MembershipListenerActions<Membership>;\r\n\r\n// tag::RDX-type-member[]\r\nexport type MembersReducer<\r\n  StoredMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  MembersAction extends AnyAction\r\n> = (\r\n  state: MembersBySpaceIdState<StoredMembers> | undefined,\r\n  action: MembersAction\r\n) => MembersBySpaceIdState<StoredMembers>;\r\n// end::RDX-type-member[]\r\n\r\n// tag::RDX-method-reducer-member[]\r\nexport const createMembersReducer = <\r\n  StoredMembers extends Members<ObjectsCustom, Space<ObjectsCustom>> = Members,\r\n  MembersAction extends AnyAction = MembersReducerActions<StoredMembers>\r\n>(): MembersReducer<StoredMembers, MembersAction> => (\r\n  state = createInitialState(),\r\n  action: MembersAction\r\n): MembersBySpaceIdState<StoredMembers> => {\r\n  switch (action.type) {\r\n    case MembersActionType.MEMBERS_RETRIEVED:\r\n    case MembersActionType.MEMBERS_UPDATED:\r\n    case MembersActionType.MEMBERS_ADDED:\r\n    case MembersActionType.MEMBERS_REMOVED:\r\n      return membersResult<StoredMembers>(state, action.payload);\r\n    case MembershipActionType.USER_ADDED_TO_SPACE_EVENT:\r\n      return userAddedToSpace<StoredMembers>(state, action.payload);\r\n    case MembershipActionType.USER_REMOVED_FROM_SPACE_EVENT:\r\n      return userRemovedFromSpace<StoredMembers>(state, action.payload);\r\n    case MembershipActionType.USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT:\r\n      return userMembershipUpdatedOnSpace<StoredMembers>(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-member[]\r\n"],"names":["MembershipActionType","joiningSpaces","payload","meta","type","JOINING_SPACES","spacesJoined","SPACES_JOINED","errorJoiningSpaces","ERROR_JOINING_SPACES","error","joinSpaces","request","thunkFunction","dispatch","_getState","pubnub","Promise","resolve","reject","api","status","response","JOIN_SPACES_COMMAND","leavingSpaces","LEAVING_SPACES","spacesLeft","SPACES_LEFT","errorLeavingSpaces","ERROR_LEAVING_SPACES","leaveSpaces","spaces","map","space","id","LEAVE_SPACES_COMMAND","fetchingMembership","FETCHING_MEMBERSHIP","membershipRetrieved","MEMBERSHIP_RETRIEVED","errorFetchingMembership","ERROR_FETCHING_MEMBERSHIP","fetchMemberships","getMemberships","FETCH_MEMBERSHIP_COMMAND","updatingMemberships","UPDATING_MEMBERSHIP","membershipUpdated","MEMBERSHIP_UPDATED","errorUpdatingMembership","ERROR_UPDATING_MEMBERSHIP","updateMembership","updateMemberships","UPDATE_MEMBERSHIP_COMMAND","MembersActionType","fetchingMembers","FETCHING_MEMBERS","membersRetrieved","MEMBERS_RETRIEVED","errorFetchingMembers","ERROR_FETCHING_MEMBERS","fetchMembers","getMembers","FETCH_MEMBERS_COMMAND","updatingMembers","UPDATING_MEMBERS","membersUpdated","MEMBERS_UPDATED","errorUpdatingMembers","ERROR_UPDATING_MEMBERS","updateMembers","UPDATE_MEMBERS_COMMAND","addingMembers","ADDING_MEMBERS","membersAdded","MEMBERS_ADDED","errorAddingMembers","ERROR_ADDING_MEMBERS","addMembers","ADD_MEMBERS_COMMAND","removingMembers","REMOVING_MEMBERS","membersRemoved","MEMBERS_REMOVED","errorRemovingMembers","ERROR_REMOVING_MEMBERS","removeMembers","REMOVE_MEMBERS_COMMAND","MessageActionType","sendingMessage","SENDING_MESSAGE","messageSent","MESSAGE_SENT","errorSendingMessage","ERROR_SENDING_MESSAGE","sendMessage","publish","SEND_MESSAGE_COMMAND","SignalActionType","sendingSignal","SENDING_SIGNAL","signalSent","SIGNAL_SENT","errorSendingSignal","ERROR_SENDING_SIGNAL","sendSignal","signal","SEND_SIGNAL_COMMAND","fetchingMessageHistory","FETCHING_MESSAGE_HISTORY","messageHistoryRetrieved","MESSAGE_HISTORY_RETRIEVED","errorFetchingMessageHistory","ERROR_FETCHING_MESSAGE_HISTORY","fetchMessageHistory","history","FETCH_MESSAGE_HISTORY_COMMAND","SpaceActionType","creatingSpace","CREATING_SPACE","spaceCreated","SPACE_CREATED","errorCreatingSpace","ERROR_CREATING_SPACE","createSpace","CREATE_SPACE_COMMAND","deletingSpace","DELETING_SPACE","spaceDeleted","SPACE_DELETED","errorDeletingSpace","ERROR_DELETING_SPACE","deleteSpace","spaceId","DELETE_SPACE_COMMAND","fetchingSpaceById","FETCHING_SPACE_BY_ID","spaceRetrieved","SPACE_RETRIEVED","errorFetchingSpaceById","ERROR_FETCHING_SPACE_BY_ID","fetchSpaceById","getSpace","FETCH_SPACE_BY_ID_COMMAND","fetchingSpaces","FETCHING_SPACES","spacesRetrieved","SPACES_RETRIEVED","errorFetchingSpaces","ERROR_FETCHING_SPACES","fetchSpaces","getSpaces","FETCH_SPACES_COMMAND","updatingSpace","UPDATING_SPACE","spaceUpdated","SPACE_UPDATED","errorUpdatingSpace","ERROR_UPDATING_SPACE","updateSpace","UPDATE_SPACE_COMMAND","UserActionType","creatingUser","CREATING_USER","userCreated","USER_CREATED","errorCreatingUser","ERROR_CREATING_USER","createUser","CREATE_USER_COMMAND","deletingUser","DELETING_USER","userDeleted","USER_DELETED","errorDeletingUser","ERROR_DELETING_USER","deleteUser","userId","DELETE_USER_COMMAND","fetchingUserById","FETCHING_USER_BY_ID","userRetrieved","USER_RETRIEVED","errorFetchingUserById","ERROR_FETCHING_USER_BY_ID","fetchUserById","getUser","FETCH_USER_BY_ID_COMMAND","fetchingUsers","FETCHING_USERS","usersRetrieved","USERS_RETRIEVED","errorFetchingUsers","ERROR_FETCHING_USERS","fetchUsers","getUsers","FETCH_USERS_COMMAND","updatingUser","UPDATING_USER","userUpdated","USER_UPDATED","errorUpdatingUser","ERROR_UPDATING_USER","updateUser","UPDATE_USER_COMMAND","PresenceActionType","fetchingHereNow","FETCHING_HERE_NOW","hereNowRetrieved","HERE_NOW_RETRIEVED","errorFetchingHereNow","ERROR_FETCHING_HERE_NOW","fetchHereNow","hereNow","includeUUIDs","includeState","HERE_NOW_COMMAND","fetchingPresenceState","FETCHING_PRESENCE_STATE","presenceStateRetrieved","PRESENCE_STATE_RETRIEVED","errorFetchingPresenceState","ERROR_FETCHING_PRESENCE_STATE","fetchPresenceState","getState","PRESENCE_STATE_COMMAND","USER_UPDATED_EVENT","USER_DELETED_EVENT","createUserListener","user","message","event","SPACE_UPDATED_EVENT","SPACE_DELETED_EVENT","createSpaceListener","userMembershipUpdatedOnSpace","USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT","userAddedToSpace","USER_ADDED_TO_SPACE_EVENT","userRemovedFromSpace","USER_REMOVED_FROM_SPACE_EVENT","createMembershipListener","membership","messageReceived","MESSAGE_RECEIVED","createMessageListener","PresenceCategory","userJoin","JOIN_EVENT","userLeave","LEAVE_EVENT","userTimeout","TIMEOUT_EVENT","userStateChange","STATE_CHANGE_EVENT","createPresenceListener","presence","action","JOIN","LEAVE","TIMEOUT","STATE_CHANGE","signalReceived","SIGNAL_RECEIVED","createSignalListener","ErrorStatusCategory","ErrorStatusActionType","networkIssues","NETWORK_ISSUES_EVENT","accessDenied","ACCESS_DENIED_EVENT","malformedResponse","MALFORMED_RESPONSE_EVENT","badRequest","BAD_REQUEST_EVENT","decryptionError","DECRYPTION_ERROR_EVENT","timeoutConnection","TIMEOUT_CONNECTION_EVENT","requestMessageCountExceeded","REQUEST_MESSAGE_COUNT_EXCEED_EVENT","unknown","UNKNOWN_EVENT","createErrorStatusListener","category","PN_ACCES_DENIED_CATEGORY","PN_MALFORMED_RESPONSE_CATEGORY","PN_BAD_REQUEST_CATEGORY","PN_DECRYPTION_ERROR_CATEGORY","PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY","PN_UNKNOWN_CATEGORY","NetworkStatusActionType","NetworkStatusCategory","networkUp","NETWORK_UP_EVENT","networkDown","NETWORK_DOWN_EVENT","createNetworkStatusListener","PN_NETWORK_UP_CATEGORY","PN_NETWORK_DOWN_CATEGORY","PN_RECONNECTED_CATEGORY","PN_CONNECTED_CATEGORY","PN_TIMEOUT_CATEGORY","SubscriptionStatusActionType","SubscriptionStatusCategory","reconnected","RECONNECTED_EVENT","connected","CONNECTED_EVENT","createSubscriptionStatusListener","combineListeners","listeners","Object","assign","mergeListenersByType","result","incomingListeners","forEach","listener","undefined","push","entries","listenerType","listenersOfType","length","createCombinedListener","currentListener","createPubNubListener","createInitialState","byId","state","newState","channel","results","messages","m","entry","timetoken","createMessageReducer","createSignalReducer","totalOccupancy","channels","keys","userJoined","occupants","filter","occupant","uuid","occupancy","name","userLeft","createPresenceReducer","createNetworkStatusReducer","initializer","initialState","isConnected","Error","networkStatusReducer","data","item","userUpdatedEventReceived","userDeletedEventReceived","i","currentMember","createUserReducer","userIds","createUserListReducer","spaceUpdatedEventReceived","spaceDeletedEventReceived","currentMembership","createSpaceReducer","spaceIds","createSpaceListReducer","custom","clonedUser","membershipResult","createMembershipReducer","clonedSpace","membersResult","createMembersReducer"],"mappings":"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"}