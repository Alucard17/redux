{"version":3,"file":"pubnub-redux.cjs.production.min.js","sources":["../src/features/membership/MembershipActionType.enum.ts","../src/features/members/MembersActionType.enum.ts","../src/features/membership/commands/JoinSpaces.ts","../src/features/membership/commands/LeaveSpaces.ts","../src/features/membership/commands/FetchMemberships.ts","../src/features/membership/commands/UpdateMembership.ts","../src/features/message/MessageActionType.enum.ts","../src/features/members/commands/FetchMembers.ts","../src/features/members/commands/UpdateMembers.ts","../src/features/members/commands/AddMembers.ts","../src/features/members/commands/RemoveMembers.ts","../src/features/signal/SignalActionType.enum.ts","../src/features/message/commands/SendMessage.ts","../src/features/space/SpaceActionType.enum.ts","../src/features/signal/commands/SendSignal.ts","../src/features/message/commands/FetchMessageHistory.ts","../src/features/user/UserActionType.enum.ts","../src/features/space/commands/CreateSpace.ts","../src/features/space/commands/DeleteSpace.ts","../src/features/space/commands/FetchSpaceById.ts","../src/features/space/commands/FetchSpaces.ts","../src/features/space/commands/UpdateSpace.ts","../src/features/presence/PresenceActionType.enum.ts","../src/features/user/commands/CreateUser.ts","../src/features/user/commands/DeleteUser.ts","../src/features/user/commands/FetchUserById.ts","../src/features/user/commands/FetchUsers.ts","../src/features/user/commands/UpdateUser.ts","../src/features/presence/PresenceCategory.enum.ts","../src/features/presence/commands/FetchHereNow.ts","../src/features/presence/commands/FetchPresenceState.ts","../src/features/user/UserListener.ts","../src/features/space/SpaceListener.ts","../src/features/membership/MembershipListener.ts","../src/features/message/MessageListener.ts","../src/features/presence/PresenceListener.ts","../src/features/errorStatus/ErrorStatusCategory.enum.ts","../src/features/errorStatus/ErrorStatusActionType.enum.ts","../src/features/signal/SignalListener.ts","../src/features/networkStatus/NetworkStatusActionType.enum.ts","../src/features/networkStatus/NetworkStatusCategory.enum.ts","../src/features/errorStatus/ErrorStatusListener.ts","../src/features/subscriptionStatus/SubscriptionStatusActionType.enum.ts","../src/features/subscriptionStatus/SubscriptionStatusCategory.enum.ts","../src/features/networkStatus/NetworkStatusListener.ts","../src/features/subscriptionStatus/SubscriptionStatusListener.ts","../src/foundations/CombineListeners.ts","../src/features/members/MembersReducer.ts","../src/features/membership/MembershipReducer.ts","../src/features/message/MessageReducer.ts","../src/features/networkStatus/NetworkStatusReducer.ts","../src/features/presence/PresenceReducer.ts","../src/features/helpers/PubNubListener.ts","../src/features/signal/SignalReducer.ts","../src/features/space/SpaceListReducer.ts","../src/features/space/SpaceReducer.ts","../src/features/user/UserListReducer.ts","../src/features/user/UserReducer.ts"],"sourcesContent":["// tag::RDX-enum-memberships-action[]\r\nexport enum MembershipActionType {\r\n  FETCH_MEMBERSHIP_COMMAND = 'pubnub/FETCH_MEMBERSHIP_COMMAND',\r\n  JOIN_SPACES_COMMAND = 'pubnub/JOIN_SPACES_COMMAND',\r\n  LEAVE_SPACES_COMMAND = 'pubnub/LEAVE_SPACES_COMMAND',\r\n  UPDATE_MEMBERSHIP_COMMAND = 'pubnub/UPDATE_MEMBERSHIP_COMMAND',\r\n  USER_ADDED_TO_SPACE_EVENT = 'pubnub/USER_ADDED_TO_SPACE_EVENT',\r\n  USER_REMOVED_FROM_SPACE_EVENT = 'pubnub/USER_REMOVED_FROM_SPACE_EVENT',\r\n  USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT = 'pubnub/USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT',\r\n  UPDATING_MEMBERSHIP = 'pubnub/UPDATING_MEMBERSHIP',\r\n  MEMBERSHIP_UPDATED = 'pubnub/MEMBERSHIP_UPDATED',\r\n  ERROR_UPDATING_MEMBERSHIP = 'pubnub/ERROR_UPDATING_MEMBERSHIP',\r\n  FETCHING_MEMBERSHIP = 'pubnub/FETCHING_MEMBERSHIP',\r\n  MEMBERSHIP_RETRIEVED = 'pubnub/MEMBERSHIP_RETRIEVED',\r\n  ERROR_FETCHING_MEMBERSHIP = 'pubnub/ERROR_FETCHING_MEMBERSHIP',\r\n  JOINING_SPACES = 'pubnub/JOINING_SPACES',\r\n  SPACES_JOINED = 'pubnub/SPACES_JOINED',\r\n  ERROR_JOINING_SPACES = 'pubnub/ERROR_JOINING_SPACES',\r\n  LEAVING_SPACES = 'pubnub/LEAVING_SPACES',\r\n  SPACES_LEFT = 'pubnub/SPACES_LEFT',\r\n  ERROR_LEAVING_SPACES = 'pubnub/ERROR_LEAVING_SPACES',\r\n}\r\n// end::RDX-enum-memberships-action[]\r\n","// tag::RDX-enum-memmber-action[]\r\nexport enum MembersActionType {\r\n  FETCH_MEMBERS_COMMAND = 'pubnub/FETCH_MEMBERS_COMMAND',\r\n  UPDATE_MEMBERS_COMMAND = 'pubnub/UPDATE_MEMBERS_COMMAND',\r\n  ADD_MEMBERS_COMMAND = 'pubnub/ADD_MEMBERS_COMMAND',\r\n  REMOVE_MEMBERS_COMMAND = 'pubnub/REMOVE_MEMBERS_COMMAND',\r\n  FETCHING_MEMBERS = 'pubnub/FETCHING_MEMBERS',\r\n  MEMBERS_RETRIEVED = 'pubnub/MEMBERS_RETRIEVED',\r\n  ERROR_FETCHING_MEMBERS = 'pubnub/ERROR_FETCHING_MEMBERS',\r\n  UPDATING_MEMBERS = 'pubnub/UPDATING_MEMBERS',\r\n  MEMBERS_UPDATED = 'pubnub/MEMBERS_UPDATED',\r\n  ERROR_UPDATING_MEMBERS = 'pubnub/ERROR_UPDATING_MEMBERS',\r\n  ADDING_MEMBERS = 'pubnub/ADDING_MEMBERS',\r\n  MEMBERS_ADDED = 'pubnub/MEMBERS_ADDED',\r\n  ERROR_ADDING_MEMBERS = 'pubnub/ERROR_ADDING_MEMBERS',\r\n  REMOVING_MEMBERS = 'pubnub/REMOVING_MEMBERS',\r\n  MEMBERS_REMOVED = 'pubnub/MEMBERS_REMOVED',\r\n  ERROR_REMOVING_MEMBERS = 'pubnub/ERROR_REMOVING_MEMBERS',\r\n}\r\n// end::RDX-enum-memmber-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  JoiningSpacesAction,\r\n  SpacesJoinedAction,\r\n  MembershipSuccess,\r\n  ErrorJoiningSpacesAction,\r\n  MembershipError,\r\n  Membership,\r\n  MembershipRequest,\r\n  MembershipResponse,\r\n} from '../MembershipActions';\r\nimport { MembershipActionType } from '../MembershipActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\n// tag::RDX-function-spaces-join[]\r\nexport const joiningSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n): JoiningSpacesAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.JOINING_SPACES,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-spaces-join[]\r\n\r\n// tag::RDX-function-spaces-join-success[]\r\nexport const spacesJoined = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipSuccess<MembershipType>,\r\n  meta?: Meta\r\n): SpacesJoinedAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.SPACES_JOINED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-spaces-join-success[]\r\n\r\n// tag::RDX-function-spaces-join-error[]\r\nexport const errorJoiningSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipError<MembershipType>,\r\n  meta?: Meta\r\n): ErrorJoiningSpacesAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.ERROR_JOINING_SPACES,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-spaces-join-error[]\r\n\r\n// tag::RDX-command-spaces-join[]\r\nexport const joinSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(joiningSpaces<MembershipType, Meta>(request, meta));\r\n\r\n      pubnub.api.joinSpaces(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorJoiningSpaces<MembershipType, Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as MembershipResponse<MembershipType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(spacesJoined<MembershipType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembershipActionType.JOIN_SPACES_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-spaces-join[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  LeavingSpacesAction,\r\n  SpacesLeftAction,\r\n  MembershipSuccess,\r\n  ErrorLeavingSpacesAction,\r\n  MembershipError,\r\n  Membership,\r\n  MembershipRequest,\r\n  MembershipResponse,\r\n} from '../MembershipActions';\r\nimport { MembershipActionType } from '../MembershipActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\n// tag::RDX-function-spaces-leave[]\r\nexport const leavingSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n): LeavingSpacesAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.LEAVING_SPACES,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-spaces-leave[]\r\n\r\n// tag::RDX-function-spaces-leave-success[]\r\nexport const spacesLeft = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipSuccess<MembershipType>,\r\n  meta?: Meta\r\n): SpacesLeftAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.SPACES_LEFT,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-spaces-leave-success[]\r\n\r\n// tag::RDX-function-spaces-leave-error[]\r\nexport const errorLeavingSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipError<MembershipType>,\r\n  meta?: Meta\r\n): ErrorLeavingSpacesAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.ERROR_LEAVING_SPACES,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-spaces-leave-error[]\r\n\r\n// tag::RDX-command-spaces-leave[]\r\nexport const leaveSpaces = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(leavingSpaces<MembershipType, Meta>(request, meta));\r\n\r\n      pubnub.api.leaveSpaces(\r\n        {\r\n          ...request,\r\n          spaces: request.spaces.map((space) => space.id),\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorLeavingSpaces(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as MembershipResponse<MembershipType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(spacesLeft<MembershipType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembershipActionType.LEAVE_SPACES_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-spaces-leave[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  FetchingMembershipAction,\r\n  MembershipRetrievedAction,\r\n  FetchMembershipSuccess,\r\n  ErrorFetchingMembershipAction,\r\n  FetchMembershipError,\r\n  FetchMembershipRequest,\r\n  Membership,\r\n  MembershipResponse,\r\n} from '../MembershipActions';\r\nimport { MembershipActionType } from '../MembershipActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\n// tag::RDX-function-memberships-fetch[]\r\nexport const fetchingMembership = <Meta extends ActionMeta>(\r\n  payload: FetchMembershipRequest,\r\n  meta?: Meta\r\n): FetchingMembershipAction<Meta> => ({\r\n  type: MembershipActionType.FETCHING_MEMBERSHIP,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-memberships-fetch[]\r\n\r\n// tag::RDX-function-memberships-fetch-success[]\r\nexport const membershipRetrieved = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchMembershipSuccess<MembershipType>,\r\n  meta?: Meta\r\n): MembershipRetrievedAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.MEMBERSHIP_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-memberships-fetch-success[]\r\n\r\n// tag::RDX-function-memberships-fetch-error[]\r\nexport const errorFetchingMembership = <Meta extends ActionMeta>(\r\n  payload: FetchMembershipError,\r\n  meta?: Meta\r\n): ErrorFetchingMembershipAction<Meta> => ({\r\n  type: MembershipActionType.ERROR_FETCHING_MEMBERSHIP,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-memberships-fetch-error[]\r\n\r\n// tag::RDX-command-memberships-fetch[]\r\nexport const fetchMemberships = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchMembershipRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingMembership<Meta>(request, meta));\r\n\r\n      pubnub.api.getMemberships(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingMembership<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as MembershipResponse<MembershipType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(membershipRetrieved<MembershipType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembershipActionType.FETCH_MEMBERSHIP_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-memberships-fetch[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  UpdatingMembershipAction,\r\n  MembershipUpdatedAction,\r\n  MembershipSuccess,\r\n  ErrorUpdatingMembershipAction,\r\n  MembershipError,\r\n  Membership,\r\n  MembershipRequest,\r\n  MembershipResponse,\r\n} from '../MembershipActions';\r\nimport { MembershipActionType } from '../MembershipActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\n// tag::RDX-function-memberships-update[]\r\nexport const updatingMemberships = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n): UpdatingMembershipAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.UPDATING_MEMBERSHIP,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-memberships-update[]\r\n\r\n// tag::RDX-function-memberships-update-success[]\r\nexport const membershipUpdated = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipSuccess<MembershipType>,\r\n  meta?: Meta\r\n): MembershipUpdatedAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.MEMBERSHIP_UPDATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-memberships-update-success[]\r\n\r\n// tag::RDX-function-memberships-update-error[]\r\nexport const errorUpdatingMembership = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembershipError<MembershipType>,\r\n  meta?: Meta\r\n): ErrorUpdatingMembershipAction<MembershipType, Meta> => ({\r\n  type: MembershipActionType.ERROR_UPDATING_MEMBERSHIP,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-memberships-update-error[]\r\n\r\n// tag::RDX-command-memberships-update[]\r\nexport const updateMembership = <\r\n  MembershipType extends Membership<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembershipRequest<MembershipType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(updatingMemberships<MembershipType, Meta>(request, meta));\r\n\r\n      pubnub.api.updateMemberships(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(\r\n              errorUpdatingMembership<MembershipType, Meta>(payload, meta)\r\n            );\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as MembershipResponse<MembershipType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(membershipUpdated<MembershipType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembershipActionType.UPDATE_MEMBERSHIP_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-memberships-update[]\r\n","// tag::RDX-enum-messages-action[]\r\nexport enum MessageActionType {\r\n  SEND_MESSAGE_COMMAND = 'pubnub/SEND_MESSAGE_COMMAND',\r\n  FETCH_MESSAGE_HISTORY_COMMAND = 'pubnub/FETCH_MESSAGE_HISTORY_COMMAND',\r\n  MESSAGE_RECEIVED = 'pubnub/MESSAGE_RECEIVED',\r\n  SENDING_MESSAGE = 'pubnub/SENDING_MESSAGE',\r\n  MESSAGE_SENT = 'pubnub/MESSAGE_SENT',\r\n  ERROR_SENDING_MESSAGE = 'pubnub/ERROR_SENDING_MESSAGE',\r\n  FETCHING_MESSAGE_HISTORY = 'pubnub/FETCHING_MESSAGE_HISTORY',\r\n  MESSAGE_HISTORY_RETRIEVED = 'pubnub/MESSAGE_HISTORY_RETRIEVED',\r\n  ERROR_FETCHING_MESSAGE_HISTORY = 'pubnub/ERROR_FETCHING_MESSAGE_HISTORY',\r\n}\r\n// end::RDX-enum-messages-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  MembersRetrievedAction,\r\n  ErrorFetchingMembersAction,\r\n  FetchingMembersAction,\r\n  FetchMembersError,\r\n  FetchMembersSuccess,\r\n  FetchMembersRequest,\r\n  Members,\r\n  MembersResponse,\r\n} from '../MembersActions';\r\nimport { MembersActionType } from '../MembersActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\n// tag::RDX-function-member-fetch[]\r\nexport const fetchingMembers = <Meta extends ActionMeta>(\r\n  payload: FetchMembersRequest,\r\n  meta?: Meta\r\n): FetchingMembersAction<Meta> => ({\r\n  type: MembersActionType.FETCHING_MEMBERS,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-member-fetch[]\r\n\r\n// tag::RDX-function-member-fetch-success[]\r\nexport const membersRetrieved = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchMembersSuccess<MembersType>,\r\n  meta?: Meta\r\n): MembersRetrievedAction<MembersType, Meta> => ({\r\n  type: MembersActionType.MEMBERS_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-member-fetch-success[]\r\n\r\n// tag::RDX-function-member-fetch-error[]\r\nexport const errorFetchingMembers = <Meta extends ActionMeta>(\r\n  payload: FetchMembersError,\r\n  meta?: Meta\r\n): ErrorFetchingMembersAction<Meta> => ({\r\n  type: MembersActionType.ERROR_FETCHING_MEMBERS,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-member-fetch-error[]\r\n\r\n// tag::RDX-command-member-fetch[]\r\nexport const fetchMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchMembersRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingMembers<Meta>(request, meta));\r\n\r\n      pubnub.api.getMembers(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingMembers<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as MembersResponse<MembersType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(membersRetrieved<MembersType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembersActionType.FETCH_MEMBERS_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-member-fetch[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  UpdatingMembersAction,\r\n  MembersUpdatedAction,\r\n  ErrorUpdatingMembersAction,\r\n  MembersError,\r\n  MembersSuccess,\r\n  Members,\r\n  MembersRequest,\r\n  MembersResponse,\r\n} from '../MembersActions';\r\nimport { MembersActionType } from '../MembersActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\n// tag::RDX-function-members-update[]\r\nexport const updatingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n): UpdatingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.UPDATING_MEMBERS,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-members-update[]\r\n\r\n// tag::RDX-function-members-update-success[]\r\nexport const membersUpdated = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersSuccess<MembersType>,\r\n  meta?: Meta\r\n): MembersUpdatedAction<MembersType, Meta> => ({\r\n  type: MembersActionType.MEMBERS_UPDATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-members-update-success[]\r\n\r\n// tag::RDX-function-members-update-error[]\r\nexport const errorUpdatingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersError<MembersType>,\r\n  meta?: Meta\r\n): ErrorUpdatingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.ERROR_UPDATING_MEMBERS,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-members-update-error[]\r\n\r\n// tag::RDX-command-members-update[]\r\nexport const updateMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(updatingMembers(request, meta));\r\n\r\n      pubnub.api.updateMembers(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorUpdatingMembers<MembersType, Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as MembersResponse<MembersType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(membersUpdated<MembersType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembersActionType.UPDATE_MEMBERS_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-members-update[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  AddingMembersAction,\r\n  MembersAddedAction,\r\n  ErrorAddingMembersAction,\r\n  MembersError,\r\n  MembersSuccess,\r\n  Members,\r\n  MembersRequest,\r\n  MembersResponse,\r\n} from '../MembersActions';\r\nimport { MembersActionType } from '../MembersActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\n// tag::RDX-function-member-add[]\r\nexport const addingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n): AddingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.ADDING_MEMBERS,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-member-add[]\r\n\r\n// tag::RDX-function-member-add-success[]\r\nexport const membersAdded = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersSuccess<MembersType>,\r\n  meta?: Meta\r\n): MembersAddedAction<MembersType, Meta> => ({\r\n  type: MembersActionType.MEMBERS_ADDED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-member-add-success[]\r\n\r\n// tag::RDX-function-member-add-error[]\r\nexport const errorAddingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersError<MembersType>,\r\n  meta?: Meta\r\n): ErrorAddingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.ERROR_ADDING_MEMBERS,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-member-add-error[]\r\n\r\n// tag::RDX-command-member-add[]\r\nexport const addMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(addingMembers<MembersType, Meta>(request, meta));\r\n\r\n      pubnub.api.addMembers(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorAddingMembers<MembersType, Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as MembersResponse<MembersType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(membersAdded<MembersType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembersActionType.ADD_MEMBERS_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-member-add[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  RemovingMembersAction,\r\n  MembersRemovedAction,\r\n  ErrorRemovingMembersAction,\r\n  MembersError,\r\n  MembersSuccess,\r\n  Members,\r\n  MembersRequest,\r\n  MembersResponse,\r\n} from '../MembersActions';\r\nimport { MembersActionType } from '../MembersActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\n// tag::RDX-function-members-remove[]\r\nexport const removingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n): RemovingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.REMOVING_MEMBERS,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-members-remove[]\r\n\r\n// tag::RDX-function-members-remove-success[]\r\nexport const membersRemoved = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersSuccess<MembersType>,\r\n  meta?: Meta\r\n): MembersRemovedAction<MembersType, Meta> => ({\r\n  type: MembersActionType.MEMBERS_REMOVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-members-remove-success[]\r\n\r\n// tag::RDX-function-members-remove-error[]\r\nexport const errorRemovingMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: MembersError<MembersType>,\r\n  meta?: Meta\r\n): ErrorRemovingMembersAction<MembersType, Meta> => ({\r\n  type: MembersActionType.ERROR_REMOVING_MEMBERS,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-members-remove-error[]\r\n\r\n// tag::RDX-command-members-remove[]\r\nexport const removeMembers = <\r\n  MembersType extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: MembersRequest<MembersType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(removingMembers<MembersType, Meta>(request, meta));\r\n\r\n      pubnub.api.removeMembers(\r\n        {\r\n          ...request,\r\n          users: request.users.map((user) => user.id),\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorRemovingMembers<MembersType, Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as MembersResponse<MembersType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(membersRemoved<MembersType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MembersActionType.REMOVE_MEMBERS_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-members-remove[]\r\n","// tag::RDX-enum-signals-action[]\r\nexport enum SignalActionType {\r\n  SEND_SIGNAL_COMMAND = 'pubnub/SEND_SIGNAL_COMMAND',\r\n  SIGNAL_RECEIVED = 'pubnub/SIGNAL_RECEIVED',\r\n  SENDING_SIGNAL = 'pubnub/SENDING_SIGNAL',\r\n  SIGNAL_SENT = 'pubnub/SIGNAL_SENT',\r\n  ERROR_SENDING_SIGNAL = 'pubnub/ERROR_SENDING_SIGNAL',\r\n}\r\n// end::RDX-enum-signals-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  SendMessageRequest,\r\n  SendingMessageAction,\r\n  MessageSentAction,\r\n  SendMessageSuccess,\r\n  ErrorSendingMessageAction,\r\n  SendMessageError,\r\n} from '../MessageActions';\r\nimport { MessageActionType } from '../MessageActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-messages-send[]\r\nexport const sendingMessage = <\r\n  MessageContentType extends object,\r\n  MessageMeta extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendMessageRequest<MessageContentType, MessageMeta>,\r\n  meta?: Meta\r\n): SendingMessageAction<MessageContentType, MessageMeta, Meta> => ({\r\n  type: MessageActionType.SENDING_MESSAGE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-messages-send[]\r\n\r\n// tag::RDX-function-messages-send-success[]\r\nexport const messageSent = <\r\n  MessageContentType extends object,\r\n  MessageMeta extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendMessageSuccess<MessageContentType, MessageMeta>,\r\n  meta?: Meta\r\n): MessageSentAction<MessageContentType, MessageMeta, Meta> => ({\r\n  type: MessageActionType.MESSAGE_SENT,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-messages-send-success[]\r\n\r\n// tag::RDX-function-messages-send-error[]\r\nexport const errorSendingMessage = <\r\n  MessageContentType extends object,\r\n  MessageMeta extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendMessageError<MessageContentType, MessageMeta>,\r\n  meta?: Meta\r\n): ErrorSendingMessageAction<MessageContentType, MessageMeta, Meta> => ({\r\n  type: MessageActionType.ERROR_SENDING_MESSAGE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-messages-send-error[]\r\n\r\n// tag::RDX-command-messages-send[]\r\nexport const sendMessage = <\r\n  MessageContentType extends object = {},\r\n  MessageMeta extends object = {},\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: SendMessageRequest<MessageContentType, MessageMeta>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(sendingMessage(request, meta));\r\n\r\n      pubnub.api.publish(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(\r\n              errorSendingMessage<MessageContentType, MessageMeta, Meta>(\r\n                payload,\r\n                meta\r\n              )\r\n            );\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(\r\n              messageSent<MessageContentType, MessageMeta, Meta>(payload, meta)\r\n            );\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MessageActionType.SEND_MESSAGE_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-messages-send[]\r\n","// tag::RDX-enum-space-action[]\r\nexport enum SpaceActionType {\r\n  FETCH_SPACES_COMMAND = 'pubnub/FETCH_SPACES_COMMAND',\r\n  FETCH_SPACE_BY_ID_COMMAND = 'pubnub/FETCH_SPACE_BY_ID_COMMAND',\r\n  CREATE_SPACE_COMMAND = 'pubnub/CREATE_SPACE_COMMAND',\r\n  UPDATE_SPACE_COMMAND = 'pubnub/UPDATE_SPACE_COMMAND',\r\n  DELETE_SPACE_COMMAND = 'pubnub/DELETE_SPACE_COMMAND',\r\n  UPDATING_SPACE = 'pubnub/UPDATING_SPACE',\r\n  SPACE_UPDATED = 'pubnub/SPACE_UPDATED',\r\n  ERROR_UPDATING_SPACE = 'pubnub/ERROR_UPDATING_SPACE',\r\n  DELETING_SPACE = 'pubnub/DELETING_SPACE',\r\n  SPACE_DELETED = 'pubnub/SPACE_DELETED',\r\n  ERROR_DELETING_SPACE = 'pubnub/ERROR_DELETING_SPACE',\r\n  CREATING_SPACE = 'pubnub/CREATING_SPACE',\r\n  SPACE_CREATED = 'pubnub/SPACE_CREATED',\r\n  ERROR_CREATING_SPACE = 'pubnub/ERROR_CREATING_SPACE',\r\n  FETCHING_SPACES = 'pubnub/FETCHING_SPACES',\r\n  SPACES_RETRIEVED = 'pubnub/SPACES_RETRIEVED',\r\n  ERROR_FETCHING_SPACES = 'pubnub/ERROR_FETCHING_SPACES',\r\n  FETCHING_SPACE_BY_ID = 'pubnub/FETCHING_SPACE_BY_ID',\r\n  SPACE_RETRIEVED = 'pubnub/SPACE_RETRIEVED',\r\n  ERROR_FETCHING_SPACE_BY_ID = 'pubnub/ERROR_FETCHING_SPACE_BY_ID',\r\n  SPACE_UPDATED_EVENT = 'pubnub/SPACE_UPDATED_EVENT',\r\n  SPACE_DELETED_EVENT = 'pubnub/SPACE_DELETED_EVENT',\r\n}\r\n// end::RDX-enum-space-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  SendSignalRequest,\r\n  SendingSignalAction,\r\n  SignalSentAction,\r\n  SendSignalSuccess,\r\n  ErrorSendingSignalAction,\r\n  SendSignalError,\r\n} from '../SignalActions';\r\nimport { SignalActionType } from '../SignalActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-signals-send[]\r\nexport const sendingSignal = <\r\n  SignalContentType extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendSignalRequest<SignalContentType>,\r\n  meta?: Meta\r\n): SendingSignalAction<SignalContentType, Meta> => ({\r\n  type: SignalActionType.SENDING_SIGNAL,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-signals-send[]\r\n\r\n// tag::RDX-function-signals-send-success[]\r\nexport const signalSent = <\r\n  SignalContentType extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendSignalSuccess<SignalContentType>,\r\n  meta?: Meta\r\n): SignalSentAction<SignalContentType, Meta> => ({\r\n  type: SignalActionType.SIGNAL_SENT,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-signals-send-success[]\r\n\r\n// tag::RDX-function-signals-send-error[]\r\nexport const errorSendingSignal = <\r\n  SignalContentType extends object,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SendSignalError<SignalContentType>,\r\n  meta?: Meta\r\n): ErrorSendingSignalAction<SignalContentType, Meta> => ({\r\n  type: SignalActionType.ERROR_SENDING_SIGNAL,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-signals-send-error[]\r\n\r\n// tag::RDX-command-signals-send[]\r\nexport const sendSignal = <\r\n  SignalContentType extends object = {},\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: SendSignalRequest<SignalContentType>,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(sendingSignal(request, meta));\r\n\r\n      pubnub.api.signal(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(\r\n              errorSendingSignal<SignalContentType, Meta>(payload, meta)\r\n            );\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(signalSent<SignalContentType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SignalActionType.SEND_SIGNAL_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-signals-send[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  FetchMessageHistoryRequest,\r\n  FetchMessageHistoryResponse,\r\n  FetchMessageHistoryError,\r\n  FetchingMessageHistoryAction,\r\n  ErrorFetchingMessageHistoryAction,\r\n  MessageHistoryRetrievedAction,\r\n  FetchMessageHistorySuccess,\r\n} from '../../message/MessageActions';\r\nimport { MessageActionType } from '../../message/MessageActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta } from '../../../foundations/ActionMeta';\r\nimport Pubnub from 'pubnub';\r\n\r\n// tag::RDX-function-presence-messagehistory[]\r\nexport const fetchingMessageHistory = <Meta extends ActionMeta>(\r\n  payload: FetchMessageHistoryRequest,\r\n  meta?: Meta\r\n): FetchingMessageHistoryAction<Meta> => ({\r\n  type: MessageActionType.FETCHING_MESSAGE_HISTORY,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-messagehistory[]\r\n\r\n// tag::RDX-function-presence-messagehistory-success[]\r\nexport const messageHistoryRetrieved = <\r\n  MessageContentType,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchMessageHistorySuccess<MessageContentType>,\r\n  meta?: Meta\r\n): MessageHistoryRetrievedAction<MessageContentType, Meta> => ({\r\n  type: MessageActionType.MESSAGE_HISTORY_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-messagehistory-success[]\r\n\r\n// tag::RDX-function-presence-messagehistory-error[]\r\nexport const errorFetchingMessageHistory = <Meta extends ActionMeta>(\r\n  payload: FetchMessageHistoryError,\r\n  meta?: Meta\r\n): ErrorFetchingMessageHistoryAction<Meta> => ({\r\n  type: MessageActionType.ERROR_FETCHING_MESSAGE_HISTORY,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-messagehistory-error[]\r\n\r\n// tag::RDX-command-presence-messagehistory[]\r\nexport const fetchMessageHistory = <\r\n  MessageContentType,\r\n  Meta extends ActionMeta\r\n>(\r\n  request: FetchMessageHistoryRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingMessageHistory(request, meta));\r\n\r\n      pubnub.api.history(\r\n        {\r\n          ...(request as Pubnub.HistoryParameters),\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingMessageHistory<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as FetchMessageHistoryResponse<\r\n                MessageContentType\r\n              >,\r\n              status,\r\n            };\r\n\r\n            dispatch(\r\n              messageHistoryRetrieved<MessageContentType, Meta>(payload, meta)\r\n            );\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = MessageActionType.FETCH_MESSAGE_HISTORY_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-presence-messagehistory[]\r\n","// tag::RDX-enum-user-action[]\r\nexport enum UserActionType {\r\n  FETCH_USERS_COMMAND = 'pubnub/FETCH_USERS_COMMAND',\r\n  FETCH_USER_BY_ID_COMMAND = 'pubnub/FETCH_USER_BY_ID_COMMAND',\r\n  CREATE_USER_COMMAND = 'pubnub/CREATE_USER_COMMAND',\r\n  UPDATE_USER_COMMAND = 'pubnub/UPDATE_USER_COMMAND',\r\n  DELETE_USER_COMMAND = 'pubnub/DELETE_USER_COMMAND',\r\n  UPDATING_USER = 'pubnub/UPDATING_USER',\r\n  USER_UPDATED = 'pubnub/USER_UPDATED',\r\n  ERROR_UPDATING_USER = 'pubnub/ERROR_UPDATING_USER',\r\n  DELETING_USER = 'pubnub/DELETING_USER',\r\n  USER_DELETED = 'pubnub/USER_DELETED',\r\n  ERROR_DELETING_USER = 'pubnub/ERROR_DELETING_USER',\r\n  CREATING_USER = 'pubnub/CREATING_USER',\r\n  USER_CREATED = 'pubnub/USER_CREATED',\r\n  ERROR_CREATING_USER = 'pubnub/ERROR_CREATING_USER',\r\n  FETCHING_USERS = 'pubnub/FETCHING_USERS',\r\n  USERS_RETRIEVED = 'pubnub/USERS_RETRIEVED',\r\n  ERROR_FETCHING_USERS = 'pubnub/ERROR_FETCHING_USERS',\r\n  FETCHING_USER_BY_ID = 'pubnub/FETCHING_USER_BY_ID',\r\n  USER_RETRIEVED = 'pubnub/USER_RETRIEVED',\r\n  ERROR_FETCHING_USER_BY_ID = 'pubnub/ERROR_FETCHING_USER_BY_ID',\r\n  USER_UPDATED_EVENT = 'pubnub/USER_UPDATED_EVENT',\r\n  USER_DELETED_EVENT = 'pubnub/USER_DELETED_EVENT',\r\n}\r\n// end::RDX-enum-user-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ErrorCreatingSpaceAction,\r\n  SpaceCreatedAction,\r\n  CreatingSpaceAction,\r\n  SpaceError,\r\n  SpaceSuccess,\r\n  SpaceRequest,\r\n  Space,\r\n  SpaceResponse,\r\n} from '../SpaceActions';\r\nimport { SpaceActionType } from '../SpaceActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-space-create[]\r\nexport const creatingSpace = <Meta extends ActionMeta>(\r\n  payload: SpaceRequest,\r\n  meta?: Meta\r\n): CreatingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.CREATING_SPACE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-create[]\r\n\r\n// tag::RDX-function-space-create-success[]\r\nexport const spaceCreated = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SpaceSuccess<SpaceType>,\r\n  meta?: Meta\r\n): SpaceCreatedAction<SpaceType, Meta> => ({\r\n  type: SpaceActionType.SPACE_CREATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-create-success[]\r\n\r\n// tag::RDX-function-space-create-error[]\r\nexport const errorCreatingSpace = <Meta extends ActionMeta>(\r\n  payload: SpaceError,\r\n  meta?: Meta\r\n): ErrorCreatingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.ERROR_CREATING_SPACE,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-space-create-error[]\r\n\r\n// tag::RDX-command-space-create[]\r\nexport const createSpace = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: SpaceRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(creatingSpace<Meta>(request, meta));\r\n\r\n      pubnub.api.createSpace(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorCreatingSpace<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as SpaceResponse<SpaceType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(spaceCreated<SpaceType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SpaceActionType.CREATE_SPACE_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-space-create[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  SpaceDeletedAction,\r\n  DeletingSpaceAction,\r\n  ErrorDeletingSpaceAction,\r\n  DeleteSpaceRequest,\r\n  DeleteSpaceError,\r\n  DeleteSpaceSuccess,\r\n} from '../SpaceActions';\r\nimport { SpaceActionType } from '../SpaceActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-space-delete[]\r\nexport const deletingSpace = <Meta extends ActionMeta>(\r\n  payload: DeleteSpaceRequest,\r\n  meta?: Meta\r\n): DeletingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.DELETING_SPACE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-delete[]\r\n\r\n// tag::RDX-function-space-delete-success[]\r\nexport const spaceDeleted = <Meta extends ActionMeta>(\r\n  payload: DeleteSpaceSuccess,\r\n  meta?: Meta\r\n): SpaceDeletedAction<Meta> => ({\r\n  type: SpaceActionType.SPACE_DELETED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-delete-success[]\r\n\r\n// tag::RDX-function-space-delete-error[]\r\nexport const errorDeletingSpace = <Meta extends ActionMeta>(\r\n  payload: DeleteSpaceError,\r\n  meta?: Meta\r\n): ErrorDeletingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.ERROR_DELETING_SPACE,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-space-delete-error[]\r\n\r\n// tag::RDX-command-space-delete[]\r\nexport const deleteSpace = <Meta extends ActionMeta = AnyMeta>(\r\n  request: DeleteSpaceRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(deletingSpace<Meta>(request, meta));\r\n\r\n      pubnub.api.deleteSpace(request.spaceId, (status) => {\r\n        if (status.error) {\r\n          const payload = {\r\n            request,\r\n            status,\r\n          };\r\n\r\n          dispatch(errorDeletingSpace<Meta>(payload, meta));\r\n          reject(payload);\r\n        } else {\r\n          const payload = {\r\n            request,\r\n            status,\r\n          };\r\n\r\n          dispatch(spaceDeleted<Meta>(payload, meta));\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n\r\n  thunkFunction.type = SpaceActionType.DELETE_SPACE_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-space-delete[]\r\n","import { Dispatch } from 'redux';\r\nimport { SpaceActionType } from '../SpaceActionType.enum';\r\nimport {\r\n  ErrorFetchingSpaceByIdAction,\r\n  SpaceRetrievedAction,\r\n  FetchingSpaceByIdAction,\r\n  FetchSpaceByIdError,\r\n  FetchSpaceByIdSuccess,\r\n  FetchSpaceByIdRequest,\r\n  Space,\r\n  SpaceResponse,\r\n} from '../SpaceActions';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-space-fetchbyid[]\r\nexport const fetchingSpaceById = <Meta extends ActionMeta>(\r\n  payload: FetchSpaceByIdRequest,\r\n  meta?: Meta\r\n): FetchingSpaceByIdAction<Meta> => ({\r\n  type: SpaceActionType.FETCHING_SPACE_BY_ID,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-fetchbyid[]\r\n\r\n// tag::RDX-function-space-fetchbyid-success[]\r\nexport const spaceRetrieved = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchSpaceByIdSuccess<SpaceType>,\r\n  meta?: Meta\r\n): SpaceRetrievedAction<SpaceType, Meta> => ({\r\n  type: SpaceActionType.SPACE_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-fetchbyid-success[]\r\n\r\n// tag::RDX-function-space-fetchbyid-error[]\r\nexport const errorFetchingSpaceById = <Meta extends ActionMeta>(\r\n  payload: FetchSpaceByIdError,\r\n  meta?: Meta\r\n): ErrorFetchingSpaceByIdAction<Meta> => ({\r\n  type: SpaceActionType.ERROR_FETCHING_SPACE_BY_ID,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-space-fetchbyid-error[]\r\n\r\n// tag::RDX-command-space-fetchbyid[]\r\nexport const fetchSpaceById = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchSpaceByIdRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(\r\n        fetchingSpaceById<Meta>(\r\n          {\r\n            ...request,\r\n          },\r\n          meta\r\n        )\r\n      );\r\n\r\n      pubnub.api.getSpace(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingSpaceById<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as SpaceResponse<SpaceType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(spaceRetrieved<SpaceType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SpaceActionType.FETCH_SPACE_BY_ID_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-space-fetchbyid[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ErrorFetchingSpacesAction,\r\n  SpacesRetrievedAction,\r\n  FetchingSpacesAction,\r\n  FetchSpacesError,\r\n  FetchSpacesSuccess,\r\n  FetchSpacesRequest,\r\n  Space,\r\n  FetchSpacesResponse,\r\n} from '../SpaceActions';\r\nimport { SpaceActionType } from '../SpaceActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-space-fetch[]\r\nexport const fetchingSpaces = <Meta extends ActionMeta>(\r\n  payload: FetchSpacesRequest,\r\n  meta?: Meta\r\n): FetchingSpacesAction<Meta> => ({\r\n  type: SpaceActionType.FETCHING_SPACES,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-fetch[]\r\n\r\n// tag::RDX-function-space-fetch-success[]\r\nexport const spacesRetrieved = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchSpacesSuccess<SpaceType>,\r\n  meta?: Meta\r\n): SpacesRetrievedAction<SpaceType, Meta> => ({\r\n  type: SpaceActionType.SPACES_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-fetch-success[]\r\n\r\n// tag::RDX-function-space-fetch-error[]\r\nexport const errorFetchingSpaces = <Meta extends ActionMeta>(\r\n  payload: FetchSpacesError,\r\n  meta?: Meta\r\n): ErrorFetchingSpacesAction<Meta> => ({\r\n  type: SpaceActionType.ERROR_FETCHING_SPACES,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-space-fetch-error[]\r\n\r\n// tag::RDX-command-space-fetch[]\r\nexport const fetchSpaces = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchSpacesRequest = {},\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingSpaces<Meta>(request, meta));\r\n\r\n      pubnub.api.getSpaces(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingSpaces<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as FetchSpacesResponse<SpaceType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(spacesRetrieved<SpaceType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SpaceActionType.FETCH_SPACES_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-space-fetch[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  UpdatingSpaceAction,\r\n  SpaceUpdatedAction,\r\n  ErrorUpdatingSpaceAction,\r\n  SpaceError,\r\n  SpaceSuccess,\r\n  SpaceRequest,\r\n  Space,\r\n  SpaceResponse,\r\n} from '../SpaceActions';\r\nimport { SpaceActionType } from '../SpaceActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-space-update[]\r\nexport const updatingSpace = <Meta extends ActionMeta>(\r\n  payload: SpaceRequest,\r\n  meta?: Meta\r\n): UpdatingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.UPDATING_SPACE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-update[]\r\n\r\n// tag::RDX-function-space-update-success[]\r\nexport const spaceUpdated = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: SpaceSuccess<SpaceType>,\r\n  meta?: Meta\r\n): SpaceUpdatedAction<SpaceType, Meta> => ({\r\n  type: SpaceActionType.SPACE_UPDATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-space-update-success[]\r\n\r\n// tag::RDX-function-space-update-error[]\r\nexport const errorUpdatingSpace = <Meta extends ActionMeta>(\r\n  payload: SpaceError,\r\n  meta?: Meta\r\n): ErrorUpdatingSpaceAction<Meta> => ({\r\n  type: SpaceActionType.ERROR_UPDATING_SPACE,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-space-update-error[]\r\n\r\n// tag::RDX-command-space-update[]\r\nexport const updateSpace = <\r\n  SpaceType extends Space<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: SpaceRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(updatingSpace<Meta>(request, meta));\r\n\r\n      pubnub.api.updateSpace(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorUpdatingSpace<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as SpaceResponse<SpaceType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(spaceUpdated<SpaceType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = SpaceActionType.UPDATE_SPACE_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-space-update[]\r\n","// tag::RDX-enum-presence-action[]\r\nexport enum PresenceActionType {\r\n  HERE_NOW_COMMAND = 'pubnub/HERE_NOW_COMMAND',\r\n  PRESENCE_STATE_COMMAND = 'pubnub/PRESENCE_STATE_COMMAND',\r\n  FETCHING_HERE_NOW = 'pubnub/FETCHING_HERE_NOW',\r\n  HERE_NOW_RETRIEVED = 'pubnub/HERE_NOW_RETRIEVED',\r\n  ERROR_FETCHING_HERE_NOW = 'pubnub/ERROR_FETCHING_HERE_NOW',\r\n  FETCHING_PRESENCE_STATE = 'pubnub/FETCHING_PRESENCE_STATE',\r\n  PRESENCE_STATE_RETRIEVED = 'pubnub/PRESENCE_STATE_RETRIEVED',\r\n  ERROR_FETCHING_PRESENCE_STATE = 'pubnub/ERROR_FETCHING_PRESENCE_STATE',\r\n  JOIN_EVENT = 'pubnub/JOIN_EVENT',\r\n  LEAVE_EVENT = 'pubnub/LEAVE_EVENT',\r\n  TIMEOUT_EVENT = 'pubnub/TIMEOUT_EVENT',\r\n  STATE_CHANGE_EVENT = 'pubnub/STATE_CHANGE_EVENT',\r\n}\r\n// end::RDX-enum-presence-action[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ErrorCreatingUserAction,\r\n  UserCreatedAction,\r\n  CreatingUserAction,\r\n  UserSuccess,\r\n  UserError,\r\n  UserResponse,\r\n  UserRequest,\r\n  User,\r\n} from '../UserActions';\r\nimport { UserActionType } from '../UserActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-user-create[]\r\nexport const creatingUser = <Meta extends ActionMeta>(\r\n  payload: UserRequest,\r\n  meta?: Meta\r\n): CreatingUserAction<Meta> => ({\r\n  type: UserActionType.CREATING_USER,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-create[]\r\n\r\n// tag::RDX-function-user-create-success[]\r\nexport const userCreated = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: UserSuccess<UserType>,\r\n  meta?: Meta\r\n): UserCreatedAction<UserType, Meta> => ({\r\n  type: UserActionType.USER_CREATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-create-success[]\r\n\r\n// tag::RDX-function-user-create-error[]\r\nexport const errorCreatingUser = <Meta extends ActionMeta>(\r\n  payload: UserError,\r\n  meta?: Meta\r\n): ErrorCreatingUserAction<Meta> => ({\r\n  type: UserActionType.ERROR_CREATING_USER,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-user-create-error[]\r\n\r\n// tag::RDX-command-user-create[]\r\nexport const createUser = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: UserRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(creatingUser<Meta>(request, meta));\r\n\r\n      pubnub.api.createUser(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorCreatingUser<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as UserResponse<UserType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(userCreated<UserType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = UserActionType.CREATE_USER_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-user-create[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  UserDeletedAction,\r\n  DeletingUserAction,\r\n  ErrorDeletingUserAction,\r\n  DeleteUserRequest,\r\n  DeleteUserError,\r\n  DeleteUserSuccess,\r\n} from '../UserActions';\r\nimport { UserActionType } from '../UserActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-user-delete[]\r\nexport const deletingUser = <Meta extends ActionMeta>(\r\n  payload: DeleteUserRequest,\r\n  meta?: Meta\r\n): DeletingUserAction<Meta> => ({\r\n  type: UserActionType.DELETING_USER,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-delete[]\r\n\r\n// tag::RDX-function-user-delete-success[]\r\nexport const userDeleted = <Meta extends ActionMeta>(\r\n  payload: DeleteUserSuccess,\r\n  meta?: Meta\r\n): UserDeletedAction<Meta> => ({\r\n  type: UserActionType.USER_DELETED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-delete-success[]\r\n\r\n// tag::RDX-function-user-delete-error[]\r\nexport const errorDeletingUser = <Meta extends ActionMeta>(\r\n  payload: DeleteUserError,\r\n  meta?: Meta\r\n): ErrorDeletingUserAction<Meta> => ({\r\n  type: UserActionType.ERROR_DELETING_USER,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-user-delete-error[]\r\n\r\n// tag::RDX-command-user-delete[]\r\nexport const deleteUser = <Meta extends ActionMeta = AnyMeta>(\r\n  request: DeleteUserRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(deletingUser<Meta>(request, meta));\r\n\r\n      pubnub.api.deleteUser(request.userId, (status) => {\r\n        if (status.error) {\r\n          const payload = {\r\n            request,\r\n            status,\r\n          };\r\n\r\n          dispatch(errorDeletingUser<Meta>(payload, meta));\r\n          reject(payload);\r\n        } else {\r\n          const payload = {\r\n            request,\r\n            status,\r\n          };\r\n\r\n          dispatch(userDeleted<Meta>(payload, meta));\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n\r\n  thunkFunction.type = UserActionType.DELETE_USER_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-user-delete[]\r\n","import { Dispatch } from 'redux';\r\nimport { UserActionType } from '../UserActionType.enum';\r\nimport {\r\n  ErrorFetchingUserByIdAction,\r\n  UserRetrievedAction,\r\n  FetchingUserByIdAction,\r\n  FetchUserByIdError,\r\n  FetchUserByIdSuccess,\r\n  FetchUserByIdRequest,\r\n  User,\r\n  UserResponse,\r\n} from '../UserActions';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-user-fetchbyid[]\r\nexport const fetchingUserById = <Meta extends ActionMeta>(\r\n  payload: FetchUserByIdRequest,\r\n  meta?: Meta\r\n): FetchingUserByIdAction<Meta> => ({\r\n  type: UserActionType.FETCHING_USER_BY_ID,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-fetchbyid[]\r\n\r\n// tag::RDX-function-user-fetchbyid-success[]\r\nexport const userRetrieved = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchUserByIdSuccess<UserType>,\r\n  meta?: Meta\r\n): UserRetrievedAction<UserType, Meta> => ({\r\n  type: UserActionType.USER_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-fetchbyid-success[]\r\n\r\n// tag::RDX-function-user-fetchbyid-error[]\r\nexport const errorFetchingUserById = <Meta extends ActionMeta>(\r\n  payload: FetchUserByIdError,\r\n  meta?: Meta\r\n): ErrorFetchingUserByIdAction<Meta> => ({\r\n  type: UserActionType.ERROR_FETCHING_USER_BY_ID,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-user-fetchbyid-error[]\r\n\r\n// tag::RDX-command-user-fetchbyid[]\r\nexport const fetchUserById = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchUserByIdRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(\r\n        fetchingUserById<Meta>(\r\n          {\r\n            ...request,\r\n          },\r\n          meta\r\n        )\r\n      );\r\n\r\n      pubnub.api.getUser(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingUserById<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as UserResponse<UserType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(userRetrieved<UserType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = UserActionType.FETCH_USER_BY_ID_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-user-fetchbyid[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ErrorFetchingUsersAction,\r\n  UsersRetrievedAction,\r\n  FetchingUsersAction,\r\n  FetchUsersError,\r\n  FetchUsersSuccess,\r\n  FetchUsersRequest,\r\n  User,\r\n  FetchUsersResponse,\r\n} from '../UserActions';\r\nimport { UserActionType } from '../UserActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-user-fetch[]\r\nexport const fetchingUsers = <Meta extends ActionMeta>(\r\n  payload: FetchUsersRequest,\r\n  meta?: Meta\r\n): FetchingUsersAction<Meta> => ({\r\n  type: UserActionType.FETCHING_USERS,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-fetch[]\r\n\r\n// tag::RDX-function-user-fetch-success[]\r\nexport const usersRetrieved = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: FetchUsersSuccess<UserType>,\r\n  meta?: Meta\r\n): UsersRetrievedAction<UserType, Meta> => ({\r\n  type: UserActionType.USERS_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-fetch-success[]\r\n\r\n// tag::RDX-function-user-fetch-error[]\r\nexport const errorFetchingUsers = <Meta extends ActionMeta = AnyMeta>(\r\n  payload: FetchUsersError,\r\n  meta?: Meta\r\n): ErrorFetchingUsersAction<Meta> => ({\r\n  type: UserActionType.ERROR_FETCHING_USERS,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-user-fetch-error[]\r\n\r\n// tag::RDX-command-user-fetch[]\r\nexport const fetchUsers = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: FetchUsersRequest = {},\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingUsers<Meta>(request, meta));\r\n\r\n      pubnub.api.getUsers(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingUsers<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as FetchUsersResponse<UserType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(usersRetrieved<UserType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = UserActionType.FETCH_USERS_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-user-fetch[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  UpdatingUserAction,\r\n  UserUpdatedAction,\r\n  ErrorUpdatingUserAction,\r\n  UserError,\r\n  UserSuccess,\r\n  UserRequest,\r\n  User,\r\n  UserResponse,\r\n} from '../UserActions';\r\nimport { UserActionType } from '../UserActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta, AnyMeta } from '../../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-function-user-update[]\r\nexport const updatingUser = <Meta extends ActionMeta>(\r\n  payload: UserRequest,\r\n  meta?: Meta\r\n): UpdatingUserAction<Meta> => ({\r\n  type: UserActionType.UPDATING_USER,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-update[]\r\n\r\n// tag::RDX-function-user-update-success[]\r\nexport const userUpdated = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta\r\n>(\r\n  payload: UserSuccess<UserType>,\r\n  meta?: Meta\r\n): UserUpdatedAction<UserType, Meta> => ({\r\n  type: UserActionType.USER_UPDATED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-user-update-success[]\r\n\r\n// tag::RDX-function-user-update-error[]\r\nexport const errorUpdatingUser = <Meta extends ActionMeta>(\r\n  payload: UserError,\r\n  meta?: Meta\r\n): ErrorUpdatingUserAction<Meta> => ({\r\n  type: UserActionType.ERROR_UPDATING_USER,\r\n  payload,\r\n  meta,\r\n  error: true,\r\n});\r\n// end::RDX-function-user-update-error[]\r\n\r\n// tag::RDX-command-user-update[]\r\nexport const updateUser = <\r\n  UserType extends User<ObjectsCustom>,\r\n  Meta extends ActionMeta = AnyMeta\r\n>(\r\n  request: UserRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(updatingUser<Meta>(request, meta));\r\n\r\n      pubnub.api.updateUser(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorUpdatingUser<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response: response as UserResponse<UserType>,\r\n              status,\r\n            };\r\n\r\n            dispatch(userUpdated<UserType, Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = UserActionType.UPDATE_USER_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-user-update[]\r\n","// tag::RDX-enum-presence-category[]\r\nexport enum PresenceCategory {\r\n  JOIN = 'join',\r\n  STATE_CHANGE = 'state-change',\r\n  LEAVE = 'leave',\r\n  TIMEOUT = 'timeout',\r\n}\r\n// end::RDX-enum-presence-category[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  HereNowRequest,\r\n  HereNowError,\r\n  FetchingHereNowAction,\r\n  ErrorFetchingHereNowAction,\r\n  HereNowRetrievedAction,\r\n  HereNowSuccess,\r\n} from '../PresenceActions';\r\nimport { PresenceActionType } from '../PresenceActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-presence-herenow[]\r\nexport const fetchingHereNow = <Meta extends ActionMeta>(\r\n  payload: HereNowRequest,\r\n  meta?: Meta\r\n): FetchingHereNowAction<Meta> => ({\r\n  type: PresenceActionType.FETCHING_HERE_NOW,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-herenow[]\r\n\r\n// tag::RDX-function-presence-herenow-success[]\r\nexport const hereNowRetrieved = <Meta extends ActionMeta>(\r\n  payload: HereNowSuccess,\r\n  meta?: Meta\r\n): HereNowRetrievedAction<Meta> => ({\r\n  type: PresenceActionType.HERE_NOW_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-herenow-success[]\r\n\r\n// tag::RDX-function-presence-herenow-error[]\r\nexport const errorFetchingHereNow = <Meta extends ActionMeta>(\r\n  payload: HereNowError,\r\n  meta?: Meta\r\n): ErrorFetchingHereNowAction<Meta> => ({\r\n  type: PresenceActionType.ERROR_FETCHING_HERE_NOW,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-herenow-error[]\r\n\r\n// tag::RDX-command-presence-herenow[]\r\nexport const fetchHereNow = <Meta extends ActionMeta>(\r\n  request: HereNowRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingHereNow(request, meta));\r\n\r\n      pubnub.api.hereNow(\r\n        {\r\n          ...request,\r\n          includeUUIDs: true,\r\n          includeState: false,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingHereNow<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(hereNowRetrieved<Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = PresenceActionType.HERE_NOW_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-presence-herenow[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  PresenceStateRequest,\r\n  PresenceStateError,\r\n  FetchingPresenceStateAction,\r\n  ErrorFetchingPresenceStateAction,\r\n  PresenceStateRetrievedAction,\r\n  PresenceStateSuccess,\r\n} from '../PresenceActions';\r\nimport { PresenceActionType } from '../PresenceActionType.enum';\r\nimport { PubnubThunkContext } from '../../../foundations/ThunkTypes';\r\nimport { ActionMeta } from '../../../foundations/ActionMeta';\r\n\r\n// tag::RDX-function-presence-fetch[]\r\nexport const fetchingPresenceState = <Meta extends ActionMeta>(\r\n  payload: PresenceStateRequest,\r\n  meta?: Meta\r\n): FetchingPresenceStateAction<Meta> => ({\r\n  type: PresenceActionType.FETCHING_PRESENCE_STATE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-fetch[]\r\n\r\n// tag::RDX-function-presence-fetch-success[]\r\nexport const presenceStateRetrieved = <Meta extends ActionMeta>(\r\n  payload: PresenceStateSuccess,\r\n  meta?: Meta\r\n): PresenceStateRetrievedAction<Meta> => ({\r\n  type: PresenceActionType.PRESENCE_STATE_RETRIEVED,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-fetch-success[]\r\n\r\n// tag::RDX-function-presence-fetch-error[]\r\nexport const errorFetchingPresenceState = <Meta extends ActionMeta>(\r\n  payload: PresenceStateError,\r\n  meta?: Meta\r\n): ErrorFetchingPresenceStateAction<Meta> => ({\r\n  type: PresenceActionType.ERROR_FETCHING_PRESENCE_STATE,\r\n  payload,\r\n  meta,\r\n});\r\n// end::RDX-function-presence-fetch-error[]\r\n\r\n// tag::RDX-command-presence-fetch[]\r\nexport const fetchPresenceState = <Meta extends ActionMeta>(\r\n  request: PresenceStateRequest,\r\n  meta?: Meta\r\n) => {\r\n  const thunkFunction = (\r\n    dispatch: Dispatch,\r\n    _getState: any,\r\n    { pubnub }: PubnubThunkContext\r\n  ) =>\r\n    new Promise<void>((resolve, reject) => {\r\n      dispatch(fetchingPresenceState(request, meta));\r\n\r\n      pubnub.api.getState(\r\n        {\r\n          ...request,\r\n        },\r\n        (status, response) => {\r\n          if (status.error) {\r\n            const payload = {\r\n              request,\r\n              status,\r\n            };\r\n\r\n            dispatch(errorFetchingPresenceState<Meta>(payload, meta));\r\n            reject(payload);\r\n          } else {\r\n            const payload = {\r\n              request,\r\n              response,\r\n              status,\r\n            };\r\n\r\n            dispatch(presenceStateRetrieved<Meta>(payload, meta));\r\n            resolve();\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n  thunkFunction.type = PresenceActionType.PRESENCE_STATE_COMMAND;\r\n\r\n  return thunkFunction;\r\n};\r\n// end::RDX-command-presence-fetch[]\r\n","import Pubnub from 'pubnub';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n  UserUpdatedEventAction,\r\n  UserDeletedEventAction,\r\n  UserListenerActions,\r\n  User,\r\n  UserEventMessage,\r\n  UserListenerPayload,\r\n} from './UserActions';\r\nimport { UserActionType } from './UserActionType.enum';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-event-user-updated[]\r\nexport const userUpdated = <UserType extends User<ObjectsCustom>>(\r\n  payload: UserEventMessage<UserType>\r\n): UserUpdatedEventAction<UserType> => ({\r\n  type: UserActionType.USER_UPDATED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-user-updated[]\r\n\r\n// tag::RDX-event-user-deleted[]\r\nexport const userDeleted = <UserType extends User<ObjectsCustom>>(\r\n  payload: UserEventMessage<UserType>\r\n): UserDeletedEventAction<UserType> => ({\r\n  type: UserActionType.USER_DELETED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-user-deleted[]\r\n\r\n// tag::RDX-method-listener-user[]\r\nexport const createUserListener = <UserType extends User<ObjectsCustom> = User>(\r\n  dispatch: Dispatch<UserListenerActions<UserType>>\r\n) => ({\r\n  user: (payload: Pubnub.UserEvent) => {\r\n    switch (payload.message.event) {\r\n      case 'update':\r\n        dispatch(\r\n          userUpdated<UserType>(\r\n            ((payload as unknown) as UserListenerPayload<UserType>).message\r\n          )\r\n        );\r\n        break;\r\n      case 'delete':\r\n        dispatch(\r\n          userDeleted<UserType>(\r\n            ((payload as unknown) as UserListenerPayload<UserType>).message\r\n          )\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-user[]\r\n","import Pubnub from 'pubnub';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n  SpaceUpdatedEventAction,\r\n  SpaceDeletedEventAction,\r\n  SpaceListenerActions,\r\n  SpaceEventMessage,\r\n  Space,\r\n  SpaceListenerPayload,\r\n} from './SpaceActions';\r\nimport { SpaceActionType } from './SpaceActionType.enum';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-type-event-space-updated[]\r\nexport const spaceUpdated = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  payload: SpaceEventMessage<ReceivedSpace>\r\n): SpaceUpdatedEventAction<ReceivedSpace> => ({\r\n  type: SpaceActionType.SPACE_UPDATED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-event-space-updated[]\r\n\r\n// tag::RDX-type-event-space-deleted[]\r\nexport const spaceDeleted = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  payload: SpaceEventMessage<ReceivedSpace>\r\n): SpaceDeletedEventAction<ReceivedSpace> => ({\r\n  type: SpaceActionType.SPACE_DELETED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-event-space-deleted[]\r\n\r\n// tag::RDX-method-listener-space[]\r\nexport const createSpaceListener = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  dispatch: Dispatch<SpaceListenerActions<ReceivedSpace>>\r\n) => ({\r\n  space: (payload: Pubnub.SpaceEvent) => {\r\n    switch (payload.message.event) {\r\n      case 'update':\r\n        dispatch(\r\n          spaceUpdated<ReceivedSpace>(\r\n            ((payload as unknown) as SpaceListenerPayload<ReceivedSpace>)\r\n              .message\r\n          )\r\n        );\r\n        break;\r\n      case 'delete':\r\n        dispatch(\r\n          spaceDeleted<ReceivedSpace>(\r\n            ((payload as unknown) as SpaceListenerPayload<ReceivedSpace>)\r\n              .message\r\n          )\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-space[]\r\n","import Pubnub from 'pubnub';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n  MembershipListenerActions,\r\n  UserMembershipUpdatedOnSpaceEventAction,\r\n  UserAddedToSpaceEventAction,\r\n  UserRemovedFromSpaceEventAction,\r\n  Membership,\r\n  MembershipEventMessage,\r\n  MembershipListenerPayload,\r\n} from './MembershipActions';\r\nimport { MembershipActionType } from './MembershipActionType.enum';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\nconst userMembershipUpdatedOnSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n): UserMembershipUpdatedOnSpaceEventAction<ReceivedMembership> => ({\r\n  type: MembershipActionType.USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT,\r\n  payload,\r\n});\r\n\r\nconst userAddedToSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n): UserAddedToSpaceEventAction<ReceivedMembership> => ({\r\n  type: MembershipActionType.USER_ADDED_TO_SPACE_EVENT,\r\n  payload,\r\n});\r\n\r\nconst userRemovedFromSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n): UserRemovedFromSpaceEventAction<ReceivedMembership> => ({\r\n  type: MembershipActionType.USER_REMOVED_FROM_SPACE_EVENT,\r\n  payload,\r\n});\r\n\r\n// tag::RDX-method-listener-membership[]\r\nexport const createMembershipListener = <\r\n  ReceivedMembership extends Membership<\r\n    ObjectsCustom,\r\n    Space<ObjectsCustom>\r\n  > = Membership\r\n>(\r\n  dispatch: Dispatch<MembershipListenerActions<ReceivedMembership>>\r\n) => ({\r\n  membership: (payload: Pubnub.MembershipEvent) => {\r\n    switch (payload.message.event) {\r\n      case 'create':\r\n        dispatch(\r\n          userAddedToSpace(\r\n            ((payload as unknown) as MembershipListenerPayload<\r\n              ReceivedMembership\r\n            >).message\r\n          )\r\n        );\r\n        break;\r\n      case 'update':\r\n        dispatch(\r\n          userMembershipUpdatedOnSpace(\r\n            ((payload as unknown) as MembershipListenerPayload<\r\n              ReceivedMembership\r\n            >).message\r\n          )\r\n        );\r\n        break;\r\n      case 'delete':\r\n        dispatch(\r\n          userRemovedFromSpace(\r\n            ((payload as unknown) as MembershipListenerPayload<\r\n              ReceivedMembership\r\n            >).message\r\n          )\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-membership[]\r\n","import Pubnub from 'pubnub';\r\nimport { Dispatch } from 'redux';\r\nimport { MessageReceivedAction, Message } from './MessageActions';\r\nimport { MessageActionType } from './MessageActionType.enum';\r\n\r\n// tag::RDX-type-messages[]\r\nexport const messageReceived = <MessageType extends Message>(\r\n  payload: MessageType\r\n): MessageReceivedAction<MessageType> => ({\r\n  type: MessageActionType.MESSAGE_RECEIVED,\r\n  payload,\r\n});\r\n// end::RDX-type-messages[]\r\n\r\n// tag::RDX-method-listener-messages[]\r\nexport const createMessageListener = <MessageType extends Message>(\r\n  dispatch: Dispatch<MessageReceivedAction<MessageType>>\r\n) => ({\r\n  message: (payload: Pubnub.MessageEvent) =>\r\n    dispatch(messageReceived<MessageType>((payload as unknown) as MessageType)),\r\n});\r\n// end::RDX-method-listener-messages[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  PresenceListenerActions,\r\n  JoinEventAction,\r\n  LeaveEventAction,\r\n  TimeoutEventAction,\r\n  StateChangeEventAction,\r\n  PresenceEventMessage,\r\n} from './PresenceActions';\r\nimport { PresenceActionType } from './PresenceActionType.enum';\r\nimport { PresenceCategory } from './PresenceCategory.enum';\r\n\r\n// tag::RDX-type-presence-user-join[]\r\nexport const userJoin = (payload: PresenceEventMessage): JoinEventAction => ({\r\n  type: PresenceActionType.JOIN_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-presence-user-join[]\r\n\r\n// tag::RDX-type-presence-user-leave[]\r\nexport const userLeave = (payload: PresenceEventMessage): LeaveEventAction => ({\r\n  type: PresenceActionType.LEAVE_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-presence-user-leave[]\r\n\r\n// tag::RDX-type-presence-user-timeout[]\r\nexport const userTimeout = (\r\n  payload: PresenceEventMessage\r\n): TimeoutEventAction => ({\r\n  type: PresenceActionType.TIMEOUT_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-presence-user-timeout[]\r\n\r\n// tag::RDX-type-presence-user-change[]\r\nexport const userStateChange = (\r\n  payload: PresenceEventMessage\r\n): StateChangeEventAction => ({\r\n  type: PresenceActionType.STATE_CHANGE_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-type-presence-user-change[]\r\n\r\n// tag::RDX-method-listener-presence[]\r\nexport const createPresenceListener = (\r\n  dispatch: Dispatch<PresenceListenerActions>\r\n) => ({\r\n  presence: (payload: PresenceEventMessage) => {\r\n    switch (payload.action) {\r\n      case PresenceCategory.JOIN:\r\n        dispatch(userJoin(payload));\r\n        break;\r\n      case PresenceCategory.LEAVE:\r\n        dispatch(userLeave(payload));\r\n        break;\r\n      case PresenceCategory.TIMEOUT:\r\n        dispatch(userTimeout(payload));\r\n        break;\r\n      case PresenceCategory.STATE_CHANGE:\r\n        dispatch(userStateChange(payload));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-presence[]\r\n","// tag::RDX-enum-error-category[]\r\nexport enum ErrorStatusCategory {\r\n  PN_NETWORK_ISSUES_CATEGORY = 'PNNetworkIssuesCategory',\r\n  PN_ACCES_DENIED_CATEGORY = 'PNAccessDeniedCategory',\r\n  PN_MALFORMED_RESPONSE_CATEGORY = 'PNMalformedResponseCategory',\r\n  PN_BAD_REQUEST_CATEGORY = 'PNBadRequestCategory',\r\n  PN_DECRYPTION_ERROR_CATEGORY = 'PNDecryptionErrorCategory',\r\n  PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY = 'PNRequestMessageCountExceedCategory',\r\n  PN_UNKNOWN_CATEGORY = 'PNUnknownCategory',\r\n}\r\n// end::RDX-enum-error-category[]\r\n","// tag::RDX-enum-error-action[]\r\nexport enum ErrorStatusActionType {\r\n  NETWORK_ISSUES_EVENT = 'pubnub/NETWORK_ISSUES_EVENT',\r\n  ACCESS_DENIED_EVENT = 'pubnub/ACCESS_DENIED_EVENT',\r\n  MALFORMED_RESPONSE_EVENT = 'pubnub/MALFORMED_RESPONSE_EVENT',\r\n  BAD_REQUEST_EVENT = 'pubnub/BAD_REQUEST_EVENT',\r\n  DECRYPTION_ERROR_EVENT = 'pubnub/DECRYPTION_ERROR_EVENT',\r\n  TIMEOUT_CONNECTION_EVENT = 'pubnub/TIMEOUT_CONNECTION_EVENT',\r\n  REQUEST_MESSAGE_COUNT_EXCEED_EVENT = 'pubnub/REQUEST_MESSAGE_COUNT_EXCEED_EVENT',\r\n  UNKNOWN_EVENT = 'pubnub/UNKNOWN_EVENT',\r\n}\r\n// end::RDX-enum-error-action[]\r\n","import Pubnub from 'pubnub';\r\nimport { Dispatch } from 'redux';\r\nimport { SignalReceivedAction, Signal } from './SignalActions';\r\nimport { SignalActionType } from './SignalActionType.enum';\r\n\r\n// tag::RDX-type-signals[]\r\nexport const signalReceived = <SignalType extends Signal>(\r\n  payload: SignalType\r\n): SignalReceivedAction<SignalType> => ({\r\n  type: SignalActionType.SIGNAL_RECEIVED,\r\n  payload,\r\n});\r\n// end::RDX-type-signals[]\r\n\r\n// tag::RDX-method-listener-signals[]\r\nexport const createSignalListener = <SignalType extends Signal>(\r\n  dispatch: Dispatch<SignalReceivedAction<SignalType>>\r\n) => ({\r\n  signal: (payload: Pubnub.SignalEvent) =>\r\n    dispatch(signalReceived<SignalType>((payload as unknown) as SignalType)),\r\n});\r\n// end::RDX-method-listener-signals[]\r\n","// tag::RDX-enum-networkstatus-action[]\r\nexport enum NetworkStatusActionType {\r\n  NETWORK_UP_EVENT = 'pubnub/NETWORK_UP_EVENT',\r\n  NETWORK_DOWN_EVENT = 'pubnub/NETWORK_DOWN_EVENT',\r\n}\r\n// end::RDX-enum-networkstatus-action[]\r\n","// tag::RDX-enum-networkstatus-category[]\r\nexport enum NetworkStatusCategory {\r\n  PN_NETWORK_UP_CATEGORY = 'PNNetworkUpCategory',\r\n  PN_NETWORK_DOWN_CATEGORY = 'PNNetworkDownCategory',\r\n  PN_RECONNECTED_CATEGORY = 'PNReconnectedCategory',\r\n  PN_CONNECTED_CATEGORY = 'PNConnectedCategory',\r\n  PN_TIMEOUT_CATEGORY = 'PNTimeoutCategory',\r\n}\r\n// end::RDX-enum-networkstatus-category[]\r\n","import { Dispatch } from 'redux';\r\nimport { ErrorStatusCategory } from './ErrorStatusCategory.enum';\r\nimport { ErrorStatusActionType } from './ErrorStatusActionType.enum';\r\nimport {\r\n  NetworkIssuesEventAction,\r\n  AccessDeniedEventAction,\r\n  MalformedResponseEventAction,\r\n  BadRequestEventAction,\r\n  DecryptionErrorEventAction,\r\n  TimeoutConnectionEventAction,\r\n  RequestMessageCountExceedEventAction,\r\n  UnknownEventAction,\r\n  ErrorStatusResponse,\r\n} from './ErrorStatusActions';\r\n\r\n// tag::RDX-event-error-network[]\r\nexport const networkIssues = (\r\n  payload: ErrorStatusResponse\r\n): NetworkIssuesEventAction => ({\r\n  type: ErrorStatusActionType.NETWORK_ISSUES_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-network[]\r\n\r\n// tag::RDX-event-error-accessdenied[]\r\nexport const accessDenied = (\r\n  payload: ErrorStatusResponse\r\n): AccessDeniedEventAction => ({\r\n  type: ErrorStatusActionType.ACCESS_DENIED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-accessdenied[]\r\n\r\n// tag::RDX-event-error-malformed[]\r\nexport const malformedResponse = (\r\n  payload: ErrorStatusResponse\r\n): MalformedResponseEventAction => ({\r\n  type: ErrorStatusActionType.MALFORMED_RESPONSE_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-malformed[]\r\n\r\n// tag::RDX-event-error-badrequest[]\r\nexport const badRequest = (\r\n  payload: ErrorStatusResponse\r\n): BadRequestEventAction => ({\r\n  type: ErrorStatusActionType.BAD_REQUEST_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-badrequest[]\r\n\r\n// tag::RDX-event-error-decrypt[]\r\nexport const decryptionError = (\r\n  payload: ErrorStatusResponse\r\n): DecryptionErrorEventAction => ({\r\n  type: ErrorStatusActionType.DECRYPTION_ERROR_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-decrypt[]\r\n\r\n// tag::RDX-event-error-timeout[]\r\nexport const timeoutConnection = (\r\n  payload: ErrorStatusResponse\r\n): TimeoutConnectionEventAction => ({\r\n  type: ErrorStatusActionType.TIMEOUT_CONNECTION_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-timeout[]\r\n\r\n// tag::RDX-event-error-requestcount[]\r\nexport const requestMessageCountExceeded = (\r\n  payload: ErrorStatusResponse\r\n): RequestMessageCountExceedEventAction => ({\r\n  type: ErrorStatusActionType.REQUEST_MESSAGE_COUNT_EXCEED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-requestcount[]\r\n\r\n// tag::RDX-event-error-unknown[]\r\nexport const unknown = (payload: ErrorStatusResponse): UnknownEventAction => ({\r\n  type: ErrorStatusActionType.UNKNOWN_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-error-unknown[]\r\n\r\nexport type ErrorStatusListenerActions =\r\n  | NetworkIssuesEventAction\r\n  | AccessDeniedEventAction\r\n  | MalformedResponseEventAction\r\n  | BadRequestEventAction\r\n  | RequestMessageCountExceedEventAction\r\n  | DecryptionErrorEventAction\r\n  | TimeoutConnectionEventAction\r\n  | UnknownEventAction;\r\n\r\n// tag::RDX-listener-error[]\r\nexport const createErrorStatusListener = (\r\n  dispatch: Dispatch<ErrorStatusListenerActions>\r\n) => ({\r\n  status: (payload: ErrorStatusResponse) => {\r\n    switch (payload.category) {\r\n      case ErrorStatusCategory.PN_ACCES_DENIED_CATEGORY:\r\n        dispatch(accessDenied(payload));\r\n        break;\r\n      case ErrorStatusCategory.PN_MALFORMED_RESPONSE_CATEGORY:\r\n        dispatch(malformedResponse(payload));\r\n        break;\r\n      case ErrorStatusCategory.PN_BAD_REQUEST_CATEGORY:\r\n        dispatch(badRequest(payload));\r\n        break;\r\n      case ErrorStatusCategory.PN_DECRYPTION_ERROR_CATEGORY:\r\n        dispatch(decryptionError(payload));\r\n        break;\r\n      case ErrorStatusCategory.PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY:\r\n        dispatch(requestMessageCountExceeded(payload));\r\n        break;\r\n      case ErrorStatusCategory.PN_UNKNOWN_CATEGORY:\r\n        dispatch(unknown(payload));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-listener-error[]\r\n","// tag::RDX-enum-subscription-action[]\r\nexport enum SubscriptionStatusActionType {\r\n  RECONNECTED_EVENT = 'pubnub/RECONNECTED_EVENT',\r\n  CONNECTED_EVENT = 'pubnub/CONNECTED_EVENT',\r\n}\r\n// end::RDX-enum-subscription-action[]\r\n","// tag::RDX-enum-subscription-category[]\r\nexport enum SubscriptionStatusCategory {\r\n  PN_CONNECTED_CATEGORY = 'PNConnectedCategory',\r\n  PN_RECONNECTED_CATEGORY = 'PNReconnectedCategory',\r\n}\r\n// end::RDX-enum-subscription-category[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  NetworkUpEventAction,\r\n  NetworkDownEventAction,\r\n  NetworkStatusResponse,\r\n} from './NetworkStatusActions';\r\nimport { NetworkStatusActionType } from './NetworkStatusActionType.enum';\r\nimport { NetworkStatusCategory } from './NetworkStatusCategory.enum';\r\n\r\n// tag::RDX-type-networkup[]\r\nexport const networkUp = (): NetworkUpEventAction => ({\r\n  type: NetworkStatusActionType.NETWORK_UP_EVENT,\r\n});\r\n// end::RDX-type-networkup[]\r\n\r\n// tag::RDX-type-networkdown[]\r\nexport const networkDown = (): NetworkDownEventAction => ({\r\n  type: NetworkStatusActionType.NETWORK_DOWN_EVENT,\r\n});\r\n// end::RDX-type-networkdown[]\r\n\r\n// tag::RDX-type-networkstatus[]\r\nexport type NetworkStatusListenerActions =\r\n  | NetworkUpEventAction\r\n  | NetworkDownEventAction;\r\n// end::RDX-type-networkstatus[]\r\n\r\n// tag::RDX-method-listener-networkstatus[]\r\nexport const createNetworkStatusListener = (\r\n  dispatch: Dispatch<NetworkStatusListenerActions>\r\n) => ({\r\n  status: (payload: NetworkStatusResponse) => {\r\n    switch (payload.category) {\r\n      case NetworkStatusCategory.PN_NETWORK_UP_CATEGORY:\r\n        dispatch(networkUp());\r\n        break;\r\n      case NetworkStatusCategory.PN_NETWORK_DOWN_CATEGORY:\r\n        dispatch(networkDown());\r\n        break;\r\n      case NetworkStatusCategory.PN_RECONNECTED_CATEGORY:\r\n        dispatch(networkUp());\r\n        break;\r\n      case NetworkStatusCategory.PN_CONNECTED_CATEGORY:\r\n        dispatch(networkUp());\r\n        break;\r\n      case NetworkStatusCategory.PN_TIMEOUT_CATEGORY:\r\n        dispatch(networkDown());\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-networkstatus[]\r\n","import { Dispatch } from 'redux';\r\nimport {\r\n  ReconnectedAction,\r\n  ConnectedAction,\r\n  SubscriptionStatusResponse,\r\n} from './SubscribeStatusActions';\r\nimport { SubscriptionStatusActionType } from './SubscriptionStatusActionType.enum';\r\nimport { SubscriptionStatusCategory } from './SubscriptionStatusCategory.enum';\r\n\r\n// tag::RDX-event-subscription-reconnect[]\r\nexport const reconnected = (\r\n  payload: SubscriptionStatusResponse\r\n): ReconnectedAction => ({\r\n  type: SubscriptionStatusActionType.RECONNECTED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-subscription-reconnect[]\r\n\r\n// tag::RDX-event-subscription-connect[]\r\nexport const connected = (\r\n  payload: SubscriptionStatusResponse\r\n): ConnectedAction => ({\r\n  type: SubscriptionStatusActionType.CONNECTED_EVENT,\r\n  payload,\r\n});\r\n// end::RDX-event-subscription-connect[]\r\n\r\n// tag::RDX-event-subscription-status[]\r\nexport type SubscriptionStatusListenerActions =\r\n  | ReconnectedAction\r\n  | ConnectedAction;\r\n// end::RDX-event-subscription-status[]\r\n\r\n// tag::RDX-method-listener-subscription[]\r\nexport const createSubscriptionStatusListener = (\r\n  dispatch: Dispatch<SubscriptionStatusListenerActions>\r\n) => ({\r\n  status: (payload: SubscriptionStatusResponse) => {\r\n    switch (payload.category) {\r\n      case SubscriptionStatusCategory.PN_CONNECTED_CATEGORY:\r\n        dispatch(connected(payload));\r\n        break;\r\n      case SubscriptionStatusCategory.PN_RECONNECTED_CATEGORY:\r\n        dispatch(reconnected(payload));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n});\r\n// end::RDX-method-listener-subscription[]\r\n","import Pubnub, {\r\n  PresenceEvent,\r\n  SignalEvent,\r\n  UserEvent,\r\n  SpaceEvent,\r\n  MessageActionEvent,\r\n  StatusEvent,\r\n  MembershipEvent,\r\n} from 'pubnub';\r\n\r\n/**\r\n * Combines multiple listener objects into one object that supports all of them.\r\n *\r\n * @param listeners Array of listener objects.\r\n * @returns The combined listener Object.\r\n */\r\nexport const combineListeners = (...listeners: Pubnub.ListenerParameters[]) => {\r\n  return Object.assign({}, ...mergeListenersByType(listeners));\r\n};\r\n\r\n/**\r\n * Take a list of listeners and combine listeners of the same type together.\r\n *\r\n * @param listeners Array of listener objects.\r\n * @returns Array of listener objects with like types combined to single listener object.\r\n */\r\nconst mergeListenersByType = (\r\n  listeners: Pubnub.ListenerParameters[]\r\n): Pubnub.ListenerParameters[] => {\r\n  const result: Pubnub.ListenerParameters[] = [];\r\n  const incomingListeners: {\r\n    [key in keyof Pubnub.ListenerParameters]: Pubnub.ListenerParameters[];\r\n  } = {};\r\n\r\n  // group the listeners by type so we can combine them\r\n  listeners.forEach((listener) => {\r\n    if (listener.message !== undefined) {\r\n      if (incomingListeners.message === undefined) {\r\n        incomingListeners['message'] = [];\r\n      }\r\n\r\n      incomingListeners['message'].push(listener);\r\n    }\r\n\r\n    if (listener.presence !== undefined) {\r\n      if (incomingListeners.presence === undefined) {\r\n        incomingListeners['presence'] = [];\r\n      }\r\n\r\n      incomingListeners['presence'].push(listener);\r\n    }\r\n\r\n    if (listener.signal !== undefined) {\r\n      if (incomingListeners.signal === undefined) {\r\n        incomingListeners['signal'] = [];\r\n      }\r\n\r\n      incomingListeners['signal'].push(listener);\r\n    }\r\n\r\n    if (listener.user !== undefined) {\r\n      if (incomingListeners.user === undefined) {\r\n        incomingListeners['user'] = [];\r\n      }\r\n\r\n      incomingListeners['user'].push(listener);\r\n    }\r\n\r\n    if (listener.space !== undefined) {\r\n      if (incomingListeners.space === undefined) {\r\n        incomingListeners['space'] = [];\r\n      }\r\n\r\n      incomingListeners['space'].push(listener);\r\n    }\r\n\r\n    if (listener.membership !== undefined) {\r\n      if (incomingListeners.membership === undefined) {\r\n        incomingListeners['membership'] = [];\r\n      }\r\n\r\n      incomingListeners['membership'].push(listener);\r\n    }\r\n\r\n    if (listener.status !== undefined) {\r\n      if (incomingListeners.status === undefined) {\r\n        incomingListeners['status'] = [];\r\n      }\r\n\r\n      incomingListeners['status'].push(listener);\r\n    }\r\n  });\r\n\r\n  // merge the grouped listeners and add to the result list\r\n  Object.entries(incomingListeners).forEach(\r\n    ([listenerType, listenersOfType]) => {\r\n      if (listenersOfType && listenersOfType.length === 1) {\r\n        // only one listener for this type so add directly to the result list\r\n        result.push(listenersOfType[0]);\r\n      } else if (listenersOfType && listenersOfType.length > 1) {\r\n        // multiple listeners for this type so combine them and add to the result list\r\n        result.push(\r\n          createCombinedListener(\r\n            listenerType as keyof Pubnub.ListenerParameters,\r\n            listenersOfType\r\n          )\r\n        );\r\n      }\r\n    }\r\n  );\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Take a list of listeners of the same type and combine to single listener object.\r\n * For example an array of status listener objects combined to a single status listener object.\r\n *\r\n * @param listenerType The listener type.\r\n * @param listeners The Array of listeners of the same type.\r\n */\r\nconst createCombinedListener = (\r\n  listenerType: keyof Pubnub.ListenerParameters,\r\n  listeners: Pubnub.ListenerParameters[]\r\n): Pubnub.ListenerParameters => {\r\n  // returns a single listener which invokes each of the incomming listeners\r\n  return {\r\n    [listenerType]: (\r\n      payload: MessageEvent &\r\n        PresenceEvent &\r\n        SignalEvent &\r\n        UserEvent &\r\n        SpaceEvent &\r\n        MembershipEvent &\r\n        StatusEvent &\r\n        MessageActionEvent\r\n    ) => {\r\n      listeners.forEach((listener) => {\r\n        const currentListener = listener[listenerType];\r\n\r\n        if (currentListener !== undefined) {\r\n          currentListener(payload);\r\n        }\r\n      });\r\n    },\r\n  };\r\n};\r\n","import { AnyAction } from 'redux';\r\nimport {\r\n  MembersActions,\r\n  FetchMembersSuccess,\r\n  MembersSuccess,\r\n  Members,\r\n} from './MembersActions';\r\nimport { MembersActionType } from './MembersActionType.enum';\r\nimport {\r\n  MembershipListenerActions,\r\n  Membership,\r\n  MembershipEventMessage,\r\n} from '../../features/membership/MembershipActions';\r\nimport { MembershipActionType } from '../../features/membership/MembershipActionType.enum';\r\nimport { AnyMeta } from '../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\n// tag::RDX-type-members-byspaceid[]\r\nexport type MembersBySpaceIdState<\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n> = {\r\n  byId: {\r\n    [spaceId: string]: ReceivedMembers[];\r\n  };\r\n};\r\n// end::RDX-type-members-byspaceid[]\r\n\r\nconst createInitialState = () => ({\r\n  byId: {},\r\n});\r\n\r\nconst userAddedToSpace = <\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  state: MembersBySpaceIdState<ReceivedMembers>,\r\n  payload: MembershipEventMessage<Membership>\r\n) => {\r\n  if (\r\n    state.byId[payload.data.spaceId] &&\r\n    state.byId[payload.data.spaceId].filter(\r\n      (membership) => membership.id === payload.data.userId\r\n    ).length === 0\r\n  ) {\r\n    const newState = {\r\n      byId: { ...state.byId },\r\n    };\r\n\r\n    const newMembers = {\r\n      id: payload.data.userId,\r\n      custom: payload.data.custom,\r\n    };\r\n\r\n    newState.byId[payload.data.spaceId] = [\r\n      ...newState.byId[payload.data.spaceId],\r\n      newMembers as ReceivedMembers,\r\n    ];\r\n\r\n    return newState;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst userRemovedFromSpace = <\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  state: MembersBySpaceIdState<ReceivedMembers>,\r\n  payload: MembershipEventMessage<Membership>\r\n) => {\r\n  if (\r\n    state.byId[payload.data.spaceId] &&\r\n    state.byId[payload.data.spaceId].filter(\r\n      (membership) => membership.id === payload.data.userId\r\n    ).length > 0\r\n  ) {\r\n    const newState = {\r\n      byId: { ...state.byId },\r\n    };\r\n\r\n    newState.byId[payload.data.spaceId] = newState.byId[\r\n      payload.data.spaceId\r\n    ].filter((membership) => membership.id !== payload.data.userId);\r\n\r\n    return newState;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst userMembershipUpdatedOnSpace = <\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  state: MembersBySpaceIdState<ReceivedMembers>,\r\n  payload: MembershipEventMessage<Membership>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  let clonedSpace = newState.byId[payload.data.spaceId];\r\n\r\n  if (clonedSpace !== undefined) {\r\n    clonedSpace = clonedSpace.map((user) => {\r\n      if (user.id === payload.data.userId) {\r\n        return {\r\n          ...user,\r\n          custom: payload.data.custom,\r\n        };\r\n      } else {\r\n        return user;\r\n      }\r\n    });\r\n  }\r\n\r\n  newState.byId[payload.data.spaceId] = clonedSpace;\r\n\r\n  return newState;\r\n};\r\n\r\nconst membersResult = <\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n>(\r\n  state: MembersBySpaceIdState<ReceivedMembers>,\r\n  payload:\r\n    | FetchMembersSuccess<ReceivedMembers>\r\n    | MembersSuccess<ReceivedMembers>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.request.spaceId] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\ntype MembersReducerActions<\r\n  ReceivedMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>\r\n> =\r\n  | MembersActions<ReceivedMembers, AnyMeta>\r\n  | MembershipListenerActions<Membership>;\r\n\r\n// tag::RDX-type-member[]\r\nexport type MembersReducer<\r\n  StoredMembers extends Members<ObjectsCustom, Space<ObjectsCustom>>,\r\n  MembersAction extends AnyAction\r\n> = (\r\n  state: MembersBySpaceIdState<StoredMembers> | undefined,\r\n  action: MembersAction\r\n) => MembersBySpaceIdState<StoredMembers>;\r\n// end::RDX-type-member[]\r\n\r\n// tag::RDX-method-reducer-member[]\r\nexport const createMembersReducer = <\r\n  StoredMembers extends Members<ObjectsCustom, Space<ObjectsCustom>> = Members,\r\n  MembersAction extends AnyAction = MembersReducerActions<StoredMembers>\r\n>(): MembersReducer<StoredMembers, MembersAction> => (\r\n  state = createInitialState(),\r\n  action: MembersAction\r\n): MembersBySpaceIdState<StoredMembers> => {\r\n  switch (action.type) {\r\n    case MembersActionType.MEMBERS_RETRIEVED:\r\n    case MembersActionType.MEMBERS_UPDATED:\r\n    case MembersActionType.MEMBERS_ADDED:\r\n    case MembersActionType.MEMBERS_REMOVED:\r\n      return membersResult<StoredMembers>(state, action.payload);\r\n    case MembershipActionType.USER_ADDED_TO_SPACE_EVENT:\r\n      return userAddedToSpace<StoredMembers>(state, action.payload);\r\n    case MembershipActionType.USER_REMOVED_FROM_SPACE_EVENT:\r\n      return userRemovedFromSpace<StoredMembers>(state, action.payload);\r\n    case MembershipActionType.USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT:\r\n      return userMembershipUpdatedOnSpace<StoredMembers>(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-member[]\r\n","import { AnyAction } from 'redux';\r\nimport {\r\n  FetchMembershipSuccess,\r\n  MembershipSuccess,\r\n  MembershipListenerActions,\r\n  MembershipActions,\r\n  Membership,\r\n  MembershipEventMessage,\r\n} from './MembershipActions';\r\nimport { MembershipActionType } from './MembershipActionType.enum';\r\nimport { AnyMeta } from '../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { User } from 'features/user/UserActions';\r\n\r\n// tag::RDX-type-memberships-byuserid[]\r\nexport type MembershipByUserIdState<\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n> = {\r\n  byId: {\r\n    [userId: string]: ReceivedMembership[];\r\n  };\r\n};\r\n// end::RDX-type-memberships-byuserid[]\r\n\r\nconst createInitialState = () => ({\r\n  byId: {},\r\n});\r\n\r\nconst userAddedToSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n>(\r\n  state: MembershipByUserIdState<ReceivedMembership>,\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n) => {\r\n  if (\r\n    state.byId[payload.data.userId] &&\r\n    state.byId[payload.data.userId].filter(\r\n      (membership) => membership.id === payload.data.spaceId\r\n    ).length === 0\r\n  ) {\r\n    const newState = {\r\n      byId: { ...state.byId },\r\n    };\r\n\r\n    const newMembership = {\r\n      id: payload.data.spaceId,\r\n      custom: payload.data.custom,\r\n    };\r\n\r\n    newState.byId[payload.data.userId] = [\r\n      ...newState.byId[payload.data.userId],\r\n      newMembership as ReceivedMembership,\r\n    ];\r\n\r\n    return newState;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst userRemovedFromSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n>(\r\n  state: MembershipByUserIdState<ReceivedMembership>,\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n) => {\r\n  if (\r\n    state.byId[payload.data.userId] &&\r\n    state.byId[payload.data.userId].filter(\r\n      (membership) => membership.id === payload.data.spaceId\r\n    ).length > 0\r\n  ) {\r\n    const newState = {\r\n      byId: { ...state.byId },\r\n    };\r\n\r\n    newState.byId[payload.data.userId] = newState.byId[\r\n      payload.data.userId\r\n    ].filter((membership) => membership.id !== payload.data.spaceId);\r\n\r\n    return newState;\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst userMembershipUpdatedOnSpace = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n>(\r\n  state: MembershipByUserIdState<ReceivedMembership>,\r\n  payload: MembershipEventMessage<ReceivedMembership>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  let clonedUser = newState.byId[payload.data.userId];\r\n\r\n  if (clonedUser !== undefined) {\r\n    clonedUser = clonedUser.map((space) => {\r\n      if (space.id === payload.data.spaceId) {\r\n        return {\r\n          ...space,\r\n          custom: payload.data.custom,\r\n        };\r\n      } else {\r\n        return space;\r\n      }\r\n    });\r\n  }\r\n\r\n  newState.byId[payload.data.userId] = clonedUser;\r\n\r\n  return newState;\r\n};\r\n\r\nconst membershipResult = <\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n>(\r\n  state: MembershipByUserIdState<ReceivedMembership>,\r\n  payload:\r\n    | FetchMembershipSuccess<ReceivedMembership>\r\n    | MembershipSuccess<ReceivedMembership>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.request.userId] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\ntype MembershipReducerActions<\r\n  ReceivedMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>\r\n> =\r\n  | MembershipActions<ReceivedMembership, AnyMeta>\r\n  | MembershipListenerActions<ReceivedMembership>;\r\n\r\n// tag::RDX-type-membership[]\r\nexport type MembershipReducer<\r\n  StoredMembership extends Membership<ObjectsCustom, User<ObjectsCustom>>,\r\n  MembershipAction extends AnyAction\r\n> = (\r\n  state: MembershipByUserIdState<StoredMembership> | undefined,\r\n  action: MembershipAction\r\n) => MembershipByUserIdState<StoredMembership>;\r\n// end::RDX-type-membership[]\r\n\r\n// tag::RDX-method-reducer-membership[]\r\nexport const createMembershipReducer = <\r\n  StoredMembership extends Membership<\r\n    ObjectsCustom,\r\n    User<ObjectsCustom>\r\n  > = Membership,\r\n  MembershipAction extends AnyAction = MembershipReducerActions<\r\n    StoredMembership\r\n  >\r\n>(): MembershipReducer<StoredMembership, MembershipAction> => (\r\n  state = createInitialState(),\r\n  action: MembershipAction\r\n): MembershipByUserIdState<StoredMembership> => {\r\n  switch (action.type) {\r\n    case MembershipActionType.MEMBERSHIP_RETRIEVED:\r\n    case MembershipActionType.MEMBERSHIP_UPDATED:\r\n    case MembershipActionType.SPACES_JOINED:\r\n    case MembershipActionType.SPACES_LEFT:\r\n      return membershipResult<StoredMembership>(state, action.payload);\r\n    case MembershipActionType.USER_ADDED_TO_SPACE_EVENT:\r\n      return userAddedToSpace<StoredMembership>(state, action.payload);\r\n    case MembershipActionType.USER_REMOVED_FROM_SPACE_EVENT:\r\n      return userRemovedFromSpace<StoredMembership>(state, action.payload);\r\n    case MembershipActionType.USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT:\r\n      return userMembershipUpdatedOnSpace<StoredMembership>(\r\n        state,\r\n        action.payload\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-membership[]\r\n","import {\r\n  Message,\r\n  MessageActions,\r\n  FetchMessageHistorySuccess,\r\n} from './MessageActions';\r\nimport { MessageActionType } from './MessageActionType.enum';\r\nimport { ActionMeta, AnyMeta } from '../../foundations/ActionMeta';\r\n\r\n// tag::RDX-type-messages[]\r\nexport type MessageState<MessageType extends Message> = {\r\n  byId: {\r\n    [channel: string]: MessageType[];\r\n  };\r\n};\r\n// end::RDX-type-messages[]\r\n\r\nconst createInitialState = <\r\n  MessageType extends Message\r\n>(): MessageState<MessageType> => ({\r\n  byId: {},\r\n});\r\n\r\nconst messageReceived = <MessageType extends Message>(\r\n  state: MessageState<MessageType>,\r\n  payload: MessageType\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  if (newState.byId[payload.channel] === undefined) {\r\n    newState.byId[payload.channel] = [];\r\n  }\r\n\r\n  newState.byId[payload.channel] = [...newState.byId[payload.channel], payload];\r\n\r\n  return newState;\r\n};\r\n\r\nconst messageHistoryRetrieved = <\r\n  MessageContentType,\r\n  MessageType extends Message\r\n>(\r\n  state: MessageState<MessageType>,\r\n  payload: FetchMessageHistorySuccess<MessageContentType>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  if (newState.byId[payload.request.channel] === undefined) {\r\n    newState.byId[payload.request.channel] = [];\r\n  }\r\n\r\n  const results: MessageType[] = payload.response.messages.map(\r\n    (m) =>\r\n      (({\r\n        channel: payload.request.channel,\r\n        message: m.entry as MessageContentType,\r\n        timetoken: m.timetoken,\r\n      } as unknown) as MessageType)\r\n  );\r\n\r\n  newState.byId[payload.request.channel] = [\r\n    ...newState.byId[payload.request.channel],\r\n    ...results,\r\n  ];\r\n\r\n  return newState;\r\n};\r\n\r\n// tag::RDX-reducer-messages[]\r\nexport const createMessageReducer = <\r\n  MessageType extends Message = Message,\r\n  MessageContentType extends object = {},\r\n  MessageMetaType extends object = {},\r\n  Meta extends ActionMeta = AnyMeta\r\n>() => (\r\n  state: MessageState<MessageType> = createInitialState<MessageType>(),\r\n  action: MessageActions<MessageType, MessageContentType, MessageMetaType, Meta>\r\n): MessageState<MessageType> => {\r\n  switch (action.type) {\r\n    case MessageActionType.MESSAGE_RECEIVED:\r\n      return messageReceived<MessageType>(state, action.payload);\r\n    case MessageActionType.MESSAGE_HISTORY_RETRIEVED:\r\n      return messageHistoryRetrieved<MessageContentType, MessageType>(\r\n        state,\r\n        action.payload\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-reducer-messages[]\r\n","import { NetworkStatusListenerActions } from './NetworkStatusListener';\r\nimport { NetworkStatusActionType } from './NetworkStatusActionType.enum';\r\n\r\n// tag::RDX-type-state-networkstatus[]\r\nexport interface NetworkStatusState {\r\n  isConnected: boolean;\r\n}\r\n// end::RDX-type-state-networkstatus[]\r\n\r\ntype NetworkStatusInitializerFunction = () => boolean;\r\n\r\n// tag::RDX-reducer-networkstatus[]\r\nexport const createNetworkStatusReducer = (\r\n  initializer: NetworkStatusInitializerFunction | boolean\r\n) => {\r\n  let initialState: NetworkStatusState;\r\n\r\n  if (typeof initializer === 'boolean') {\r\n    initialState = { isConnected: initializer };\r\n  } else if (typeof initializer === 'function') {\r\n    initialState = { isConnected: initializer() };\r\n    if (typeof initialState.isConnected !== 'boolean') {\r\n      throw new Error(\r\n        'The initializer function must return a boolean value (true or false)'\r\n      );\r\n    }\r\n  } else {\r\n    throw new Error(\r\n      'The initializer parameter must be a boolean value (true or false) or function'\r\n    );\r\n  }\r\n\r\n  return function networkStatusReducer(\r\n    state = initialState,\r\n    action: NetworkStatusListenerActions\r\n  ): NetworkStatusState {\r\n    switch (action.type) {\r\n      case NetworkStatusActionType.NETWORK_UP_EVENT:\r\n        return {\r\n          isConnected: true,\r\n        };\r\n      case NetworkStatusActionType.NETWORK_DOWN_EVENT:\r\n        return {\r\n          isConnected: false,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n};\r\n// end::RDX-reducer-networkstatus[]\r\n","import { AnyAction } from 'redux';\r\nimport { PresenceActionType } from './PresenceActionType.enum';\r\nimport {\r\n  PresenceListenerActions,\r\n  PresenceEventMessage,\r\n  Presence,\r\n  HereNowResponse,\r\n  HereNowSuccess,\r\n  HereNowRetrievedAction,\r\n  PresenceStateRetrievedAction,\r\n} from './PresenceActions';\r\nimport { PresenceState } from './PresenceState';\r\n\r\n// tag::RDX-type-presence-byid[]\r\nexport interface PresencebyIdState<ReceivedPresence extends Presence> {\r\n  byId: {\r\n    [channelId: string]: {\r\n      name: string;\r\n      occupants: ReceivedPresence[];\r\n      occupancy: number;\r\n    };\r\n  };\r\n  totalOccupancy: number;\r\n}\r\n// end::RDX-type-presence-byid[]\r\n\r\nconst createInitialState = () => {\r\n  return {\r\n    byId: {},\r\n    totalOccupancy: 0,\r\n  };\r\n};\r\n\r\nconst hereNow = <ReceivedPresence extends Presence<PresenceState>>(\r\n  state: PresencebyIdState<ReceivedPresence>,\r\n  payload: HereNowSuccess<ReceivedPresence>\r\n) => {\r\n  const newState = {\r\n    byId: {\r\n      ...state.byId,\r\n      ...payload.response.channels,\r\n    },\r\n    totalOccupancy: payload.response.totalOccupancy,\r\n  };\r\n\r\n  return newState;\r\n};\r\n\r\nconst getState = <ReceivedPresence extends Presence<PresenceState>>(\r\n  state: PresencebyIdState<ReceivedPresence>,\r\n  payload: HereNowResponse<ReceivedPresence>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n    totalOccupancy: state.totalOccupancy,\r\n  };\r\n\r\n  Object.keys(payload.channels).forEach((channel) => {\r\n    // update occupant state if exists\r\n    if (newState.byId[channel]) {\r\n      newState.byId[channel] = payload.channels[channel];\r\n    }\r\n  });\r\n\r\n  return newState;\r\n};\r\n\r\nconst userJoined = <ReceivedPresence extends Presence<PresenceState>>(\r\n  state: PresencebyIdState<ReceivedPresence>,\r\n  payload: PresenceEventMessage<ReceivedPresence>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n    totalOccupancy: state.totalOccupancy,\r\n  };\r\n\r\n  let occupants: ReceivedPresence[] = [];\r\n\r\n  // remove occupant if exists\r\n  if (newState.byId[payload.channel]) {\r\n    occupants = newState.byId[payload.channel].occupants;\r\n\r\n    newState.byId[payload.channel].occupants = occupants.filter(\r\n      (occupant) => occupant.uuid !== payload.uuid\r\n    );\r\n\r\n    newState.byId[payload.channel].occupancy =\r\n      newState.byId[payload.channel].occupants.length;\r\n\r\n    if (occupants.length === newState.byId[payload.channel].occupants.length) {\r\n      newState.totalOccupancy++;\r\n    }\r\n  } else {\r\n    newState.totalOccupancy++;\r\n  }\r\n\r\n  // add occupant and update occupancy\r\n  newState.byId[payload.channel] = {\r\n    name: payload.channel,\r\n    occupants: [\r\n      ...occupants,\r\n      {\r\n        uuid: payload.uuid,\r\n        state: payload.state,\r\n      } as ReceivedPresence,\r\n    ],\r\n    occupancy: payload.occupancy,\r\n  };\r\n\r\n  return newState;\r\n};\r\n\r\nconst userLeft = <ReceivedPresence extends Presence<PresenceState>>(\r\n  state: PresencebyIdState<ReceivedPresence>,\r\n  payload: PresenceEventMessage<ReceivedPresence>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n    totalOccupancy: state.totalOccupancy,\r\n  };\r\n\r\n  // remove occupant if exists\r\n  if (newState.byId[payload.channel]) {\r\n    const occupants = newState.byId[payload.channel].occupants;\r\n\r\n    newState.byId[payload.channel].occupants = occupants.filter(\r\n      (occupant) => occupant.uuid !== payload.uuid\r\n    );\r\n\r\n    if (occupants.length > newState.byId[payload.channel].occupants.length) {\r\n      newState.byId[payload.channel].occupancy--;\r\n      newState.totalOccupancy--;\r\n    }\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\nconst userStateChange = <ReceivedPresence extends Presence<PresenceState>>(\r\n  state: PresencebyIdState<ReceivedPresence>,\r\n  payload: PresenceEventMessage<ReceivedPresence>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n    totalOccupancy: state.totalOccupancy,\r\n  };\r\n\r\n  // update occupant state if exists\r\n  if (newState.byId[payload.channel]) {\r\n    const occupants = newState.byId[payload.channel].occupants;\r\n\r\n    occupants.forEach((occupant) => {\r\n      if (occupant.uuid === payload.uuid) {\r\n        occupant.state = payload.state;\r\n      }\r\n    });\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\n// tag::RDX-type-presence-action[]\r\nexport type PresenceActions<RetrievedPresence extends Presence> =\r\n  | HereNowRetrievedAction<RetrievedPresence>\r\n  | PresenceStateRetrievedAction<RetrievedPresence>\r\n  | PresenceListenerActions;\r\n// end::RDX-type-presence-action[]\r\n\r\n// tag::RDX-type-presence[]\r\nexport type PresenceReducer<\r\n  StoredPresence extends Presence,\r\n  PresenceAction extends AnyAction\r\n> = (\r\n  state: PresencebyIdState<StoredPresence> | undefined,\r\n  action: PresenceAction\r\n) => PresencebyIdState<StoredPresence>;\r\n// end::RDX-type-presence[]\r\n\r\n// tag::RDX-method-reducer-presence[]\r\nexport const createPresenceReducer = <\r\n  StoredPresence extends Presence<PresenceState> = Presence,\r\n  PresenceAction extends AnyAction = PresenceActions<StoredPresence>\r\n>(): PresenceReducer<StoredPresence, PresenceAction> => (\r\n  state: PresencebyIdState<StoredPresence> = createInitialState(),\r\n  action: PresenceAction\r\n): PresencebyIdState<StoredPresence> => {\r\n  switch (action.type) {\r\n    case PresenceActionType.HERE_NOW_RETRIEVED:\r\n      return hereNow<StoredPresence>(state, action.payload);\r\n    case PresenceActionType.PRESENCE_STATE_RETRIEVED:\r\n      return getState<StoredPresence>(state, action.payload);\r\n    case PresenceActionType.JOIN_EVENT:\r\n      return userJoined<StoredPresence>(state, action.payload);\r\n    case PresenceActionType.LEAVE_EVENT:\r\n    case PresenceActionType.TIMEOUT_EVENT:\r\n      return userLeft<StoredPresence>(state, action.payload);\r\n    case PresenceActionType.STATE_CHANGE_EVENT:\r\n      return userStateChange<StoredPresence>(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-presence[]\r\n","import { Dispatch } from 'redux';\r\nimport { createMessageListener } from '../message/MessageListener';\r\nimport { createPresenceListener } from '../presence/PresenceListener';\r\nimport { createSignalListener } from '../signal/SignalListener';\r\nimport { createErrorStatusListener } from '../errorStatus/ErrorStatusListener';\r\nimport { createNetworkStatusListener } from '../networkStatus/NetworkStatusListener';\r\nimport { createSubscriptionStatusListener } from '../subscriptionStatus/SubscriptionStatusListener';\r\nimport { createMembershipListener } from '../membership/MembershipListener';\r\nimport { createSpaceListener } from '../space/SpaceListener';\r\nimport { createUserListener } from '../user/UserListener';\r\nimport { combineListeners } from '../../foundations/CombineListeners';\r\n\r\n// tag::RDX-listener-pubnub[]\r\nexport const createPubNubListener = (dispatch: Dispatch) =>\r\n  combineListeners(\r\n    createMessageListener(dispatch),\r\n    createPresenceListener(dispatch),\r\n    createSignalListener(dispatch),\r\n    createErrorStatusListener(dispatch),\r\n    createErrorStatusListener(dispatch),\r\n    createNetworkStatusListener(dispatch),\r\n    createSubscriptionStatusListener(dispatch),\r\n    createUserListener(dispatch),\r\n    createSpaceListener(dispatch),\r\n    createMembershipListener(dispatch)\r\n  );\r\n// end::RDX-listener-pubnub[]\r\n","import { Signal, SignalActions } from './SignalActions';\r\nimport { SignalActionType } from './SignalActionType.enum';\r\nimport { ActionMeta, AnyMeta } from '../../foundations/ActionMeta';\r\n\r\n// tag::RDX-type-signals[]\r\nexport type SignalState<SignalType extends Signal> = {\r\n  byId: {\r\n    [channel: string]: SignalType[];\r\n  };\r\n};\r\n// end::RDX-type-signals[]\r\n\r\nconst createInitialState = <\r\n  SignalType extends Signal\r\n>(): SignalState<SignalType> => ({\r\n  byId: {},\r\n});\r\n\r\nconst signalReceived = <SignalType extends Signal>(\r\n  state: SignalState<SignalType>,\r\n  payload: SignalType\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  if (newState.byId[payload.channel] === undefined) {\r\n    newState.byId[payload.channel] = [];\r\n  }\r\n\r\n  newState.byId[payload.channel] = [...newState.byId[payload.channel], payload];\r\n\r\n  return newState;\r\n};\r\n\r\n// tag::RDX-reducer-signals[]\r\nexport const createSignalReducer = <\r\n  SignalType extends Signal = Signal,\r\n  SignalContentType extends object = {},\r\n  Meta extends ActionMeta = AnyMeta\r\n>() => (\r\n  state: SignalState<SignalType> = createInitialState<SignalType>(),\r\n  action: SignalActions<SignalType, SignalContentType, Meta>\r\n): SignalState<SignalType> => {\r\n  switch (action.type) {\r\n    case SignalActionType.SIGNAL_RECEIVED:\r\n      return signalReceived<SignalType>(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-reducer-signals[]\r\n","import {\r\n  SpacesRetrievedAction,\r\n  FetchSpacesSuccess,\r\n  Space,\r\n} from './SpaceActions';\r\nimport { SpaceActionType } from './SpaceActionType.enum';\r\nimport { ActionMeta, AnyMeta } from '../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\ninterface SpaceListState {\r\n  spaceIds: string[];\r\n}\r\n\r\nconst createInitialState = (): SpaceListState => ({\r\n  spaceIds: [],\r\n});\r\n\r\nconst spacesRetrieved = <SpaceType extends Space<ObjectsCustom>>(\r\n  payload: FetchSpacesSuccess<SpaceType>\r\n) => ({ spaceIds: payload.response.data.map((space) => space.id) });\r\n\r\n// tag::RDX-method-reducer-spacelist[]\r\nexport const createSpaceListReducer = <\r\n  SpaceType extends Space<ObjectsCustom> = Space,\r\n  Meta extends ActionMeta = AnyMeta\r\n>() => (\r\n  state: SpaceListState = createInitialState(),\r\n  action: SpacesRetrievedAction<SpaceType, Meta>\r\n): SpaceListState => {\r\n  switch (action.type) {\r\n    case SpaceActionType.SPACES_RETRIEVED:\r\n      return spacesRetrieved<SpaceType>(action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-spacelist[]\r\n","import { AnyAction } from 'redux';\r\nimport {\r\n  SpaceActions,\r\n  SpaceListenerActions,\r\n  SpaceSuccess,\r\n  DeleteSpaceSuccess,\r\n  FetchSpacesSuccess,\r\n  FetchSpaceByIdSuccess,\r\n  Space,\r\n  SpaceEventMessage,\r\n} from './SpaceActions';\r\nimport { SpaceActionType } from './SpaceActionType.enum';\r\nimport {\r\n  MembershipActions,\r\n  FetchMembershipSuccess,\r\n  MembershipRetrievedAction,\r\n  Membership,\r\n} from '../membership/MembershipActions';\r\nimport { MembershipActionType } from '../../features/membership/MembershipActionType.enum';\r\nimport { AnyMeta } from '../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-type-spacesbyid[]\r\nexport type SpacesByIdState<ReceivedSpace extends Space<ObjectsCustom>> = {\r\n  byId: {\r\n    [spaceId: string]: ReceivedSpace;\r\n  };\r\n};\r\n// end::RDX-type-spacesbyid[]\r\n\r\nconst createInitialState = () => ({\r\n  byId: {},\r\n});\r\n\r\nconst spaceCreated = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: SpaceSuccess<ReceivedSpace>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst spaceUpdated = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: SpaceSuccess<ReceivedSpace>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst spaceDeleted = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: DeleteSpaceSuccess\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  delete newState.byId[payload.request.spaceId];\r\n\r\n  return newState;\r\n};\r\n\r\nconst spacesRetrieved = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: FetchSpacesSuccess<ReceivedSpace>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  payload.response.data.forEach((item) => {\r\n    newState.byId[item.id] = item;\r\n  });\r\n\r\n  return newState;\r\n};\r\n\r\nconst spaceRetrieved = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: FetchSpaceByIdSuccess<ReceivedSpace>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst spaceUpdatedEventReceived = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: SpaceEventMessage<ReceivedSpace>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.data.id] = payload.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst spaceDeletedEventReceived = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: SpaceEventMessage<ReceivedSpace>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  delete newState.byId[payload.data.id];\r\n\r\n  return newState;\r\n};\r\n\r\nconst membershipRetrieved = <ReceivedSpace extends Space<ObjectsCustom>>(\r\n  state: SpacesByIdState<ReceivedSpace>,\r\n  payload: FetchMembershipSuccess<Membership<ObjectsCustom, ReceivedSpace>>\r\n) => {\r\n  let newState = state;\r\n\r\n  if (payload.response.data.length > 0) {\r\n    newState = {\r\n      byId: {\r\n        ...state.byId,\r\n      },\r\n    };\r\n\r\n    for (let i = 0; i < payload.response.data.length; i++) {\r\n      const currentMembership = payload.response.data[i];\r\n\r\n      if (currentMembership.space) {\r\n        newState.byId[currentMembership.id] = currentMembership.space;\r\n      }\r\n    }\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\ntype SpaceReducerActions<StoredSpace extends Space<ObjectsCustom>> =\r\n  | SpaceActions<StoredSpace, AnyMeta>\r\n  | SpaceListenerActions<StoredSpace>\r\n  | MembershipRetrievedAction<Membership, AnyMeta>\r\n  | MembershipActions<Membership<ObjectsCustom, StoredSpace>, AnyMeta>;\r\n\r\n// tag::RDX-type-space[]\r\nexport type SpaceReducer<\r\n  StoredSpace extends Space<ObjectsCustom>,\r\n  SpaceAction extends AnyAction\r\n> = (\r\n  state: SpacesByIdState<StoredSpace> | undefined,\r\n  action: SpaceAction\r\n) => SpacesByIdState<StoredSpace>;\r\n// end::RDX-type-space[]\r\n\r\n// tag::RDX-method-reducer-space[]\r\nexport const createSpaceReducer = <\r\n  StoredSpace extends Space<ObjectsCustom> = Space,\r\n  SpaceAction extends AnyAction = SpaceReducerActions<StoredSpace>\r\n>(): SpaceReducer<StoredSpace, SpaceAction> => (\r\n  state: SpacesByIdState<StoredSpace> = createInitialState(),\r\n  action: SpaceAction\r\n): SpacesByIdState<StoredSpace> => {\r\n  switch (action.type) {\r\n    case SpaceActionType.SPACE_CREATED:\r\n      return spaceCreated<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACE_UPDATED:\r\n      return spaceUpdated<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACE_DELETED:\r\n      return spaceDeleted<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACES_RETRIEVED:\r\n      return spacesRetrieved<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACE_RETRIEVED:\r\n      return spaceRetrieved<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACE_UPDATED_EVENT:\r\n      return spaceUpdatedEventReceived<StoredSpace>(state, action.payload);\r\n    case SpaceActionType.SPACE_DELETED_EVENT:\r\n      return spaceDeletedEventReceived<StoredSpace>(state, action.payload);\r\n    case MembershipActionType.MEMBERSHIP_RETRIEVED:\r\n      return membershipRetrieved<StoredSpace>(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-space[]\r\n","import { UsersRetrievedAction, FetchUsersSuccess, User } from './UserActions';\r\nimport { UserActionType } from './UserActionType.enum';\r\nimport { ActionMeta, AnyMeta } from '../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\n\r\n// tag::RDX-state-userlist[]\r\ninterface UserListState {\r\n  userIds: string[];\r\n}\r\n// end::RDX-state-userlist[]\r\n\r\nconst createInitialState = (): UserListState => ({\r\n  userIds: [],\r\n});\r\n\r\nconst usersRetrieved = <UserType extends User<ObjectsCustom>>(\r\n  payload: FetchUsersSuccess<UserType>\r\n) => ({ userIds: payload.response.data.map((user) => user.id) });\r\n\r\n// tag::RDX-method-reducer-userlist[]\r\nexport const createUserListReducer = <\r\n  UserType extends User<ObjectsCustom> = User,\r\n  Meta extends ActionMeta = AnyMeta\r\n>() => (\r\n  state: UserListState = createInitialState(),\r\n  action: UsersRetrievedAction<UserType, Meta>\r\n): UserListState => {\r\n  switch (action.type) {\r\n    case UserActionType.USERS_RETRIEVED:\r\n      return usersRetrieved(action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-userlist[]\r\n","import { AnyAction } from 'redux';\r\nimport {\r\n  UserActions,\r\n  UserListenerActions,\r\n  UserSuccess,\r\n  DeleteUserSuccess,\r\n  FetchUsersSuccess,\r\n  FetchUserByIdSuccess,\r\n  User,\r\n  UserEventMessage,\r\n} from './UserActions';\r\nimport { UserActionType } from './UserActionType.enum';\r\nimport {\r\n  MembersActions,\r\n  FetchMembersSuccess,\r\n  Members,\r\n} from '../../features/members/MembersActions';\r\nimport {\r\n  MembershipActions,\r\n  Membership,\r\n} from '../../features/membership/MembershipActions';\r\nimport { MembersActionType } from '../../features/members/MembersActionType.enum';\r\nimport { AnyMeta } from '../../foundations/ActionMeta';\r\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\r\nimport { Space } from 'features/space/SpaceActions';\r\n\r\n// tag::RDX-state-users-byid[]\r\nexport interface UsersByIdState<ReceivedUser extends User<ObjectsCustom>> {\r\n  byId: {\r\n    [userId: string]: ReceivedUser;\r\n  };\r\n}\r\n// end::RDX-state-users-byid[]\r\n\r\nconst createInitialState = () => ({\r\n  byId: {},\r\n});\r\n\r\nconst userCreated = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: UserSuccess<ReceivedUser>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst userUpdated = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: UserSuccess<ReceivedUser>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst userDeleted = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: DeleteUserSuccess\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  delete newState.byId[payload.request.userId];\r\n\r\n  return newState;\r\n};\r\n\r\nconst usersRetrieved = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: FetchUsersSuccess<ReceivedUser>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  payload.response.data.forEach((item) => {\r\n    newState.byId[item.id] = item;\r\n  });\r\n\r\n  return newState;\r\n};\r\n\r\nconst userRetrieved = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: FetchUserByIdSuccess<ReceivedUser>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.response.data.id] = payload.response.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst userUpdatedEventReceived = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: UserEventMessage<ReceivedUser>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  newState.byId[payload.data.id] = payload.data;\r\n\r\n  return newState;\r\n};\r\n\r\nconst userDeletedEventReceived = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: UserEventMessage<ReceivedUser>\r\n) => {\r\n  const newState = {\r\n    byId: { ...state.byId },\r\n  };\r\n\r\n  delete newState.byId[payload.data.id];\r\n\r\n  return newState;\r\n};\r\n\r\nconst membersRetrieved = <ReceivedUser extends User<ObjectsCustom>>(\r\n  state: UsersByIdState<ReceivedUser>,\r\n  payload: FetchMembersSuccess<Members<ObjectsCustom, ReceivedUser>>\r\n) => {\r\n  let newState = state;\r\n\r\n  if (payload.response.data.length > 0) {\r\n    newState = {\r\n      byId: {\r\n        ...state.byId,\r\n      },\r\n    };\r\n\r\n    for (let i = 0; i < payload.response.data.length; i++) {\r\n      const currentMember = payload.response.data[i];\r\n\r\n      if (currentMember.user) {\r\n        newState.byId[currentMember.id] = currentMember.user;\r\n      }\r\n    }\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\ntype UserReducerActions<StoredUser extends User<ObjectsCustom>> =\r\n  | UserActions<StoredUser, AnyMeta>\r\n  | UserListenerActions<StoredUser>\r\n  | MembersActions<Members<ObjectsCustom, Space>, AnyMeta>\r\n  | MembershipActions<Membership<ObjectsCustom, Space>, AnyMeta>;\r\n\r\n// tag::RDX-type-user[]\r\nexport type UserReducer<\r\n  StoredUser extends User<ObjectsCustom>,\r\n  UserAction extends AnyAction\r\n> = (\r\n  state: UsersByIdState<StoredUser> | undefined,\r\n  action: UserAction\r\n) => UsersByIdState<StoredUser>;\r\n// end::RDX-type-user[]\r\n\r\n// tag::RDX-method-reducer-user[]\r\nexport const createUserReducer = <\r\n  StoredUser extends User<ObjectsCustom> = User,\r\n  UserAction extends AnyAction = UserReducerActions<StoredUser>\r\n>(): UserReducer<StoredUser, UserAction> => (\r\n  state: UsersByIdState<StoredUser> = createInitialState(),\r\n  action: UserAction\r\n): UsersByIdState<StoredUser> => {\r\n  switch (action.type) {\r\n    case UserActionType.USER_CREATED:\r\n      return userCreated<StoredUser>(state, action.payload);\r\n    case UserActionType.USER_UPDATED:\r\n      return userUpdated<StoredUser>(state, action.payload);\r\n    case UserActionType.USER_DELETED:\r\n      return userDeleted<StoredUser>(state, action.payload);\r\n    case UserActionType.USERS_RETRIEVED:\r\n      return usersRetrieved<StoredUser>(state, action.payload);\r\n    case UserActionType.USER_RETRIEVED:\r\n      return userRetrieved<StoredUser>(state, action.payload);\r\n    case UserActionType.USER_UPDATED_EVENT:\r\n      return userUpdatedEventReceived<StoredUser>(state, action.payload);\r\n    case UserActionType.USER_DELETED_EVENT:\r\n      return userDeletedEventReceived<StoredUser>(state, action.payload);\r\n    case MembersActionType.MEMBERS_RETRIEVED:\r\n      return membersRetrieved<StoredUser>(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// end::RDX-method-reducer-user[]\r\n"],"names":["MembershipActionType","MembersActionType","joiningSpaces","payload","meta","type","JOINING_SPACES","spacesJoined","SPACES_JOINED","errorJoiningSpaces","ERROR_JOINING_SPACES","error","leavingSpaces","LEAVING_SPACES","spacesLeft","SPACES_LEFT","errorLeavingSpaces","ERROR_LEAVING_SPACES","fetchingMembership","FETCHING_MEMBERSHIP","membershipRetrieved","MEMBERSHIP_RETRIEVED","errorFetchingMembership","ERROR_FETCHING_MEMBERSHIP","updatingMemberships","UPDATING_MEMBERSHIP","membershipUpdated","MEMBERSHIP_UPDATED","errorUpdatingMembership","ERROR_UPDATING_MEMBERSHIP","MessageActionType","fetchingMembers","FETCHING_MEMBERS","membersRetrieved","MEMBERS_RETRIEVED","errorFetchingMembers","ERROR_FETCHING_MEMBERS","updatingMembers","UPDATING_MEMBERS","membersUpdated","MEMBERS_UPDATED","errorUpdatingMembers","ERROR_UPDATING_MEMBERS","addingMembers","ADDING_MEMBERS","membersAdded","MEMBERS_ADDED","errorAddingMembers","ERROR_ADDING_MEMBERS","removingMembers","REMOVING_MEMBERS","membersRemoved","MEMBERS_REMOVED","errorRemovingMembers","ERROR_REMOVING_MEMBERS","SignalActionType","sendingMessage","SENDING_MESSAGE","messageSent","MESSAGE_SENT","errorSendingMessage","ERROR_SENDING_MESSAGE","SpaceActionType","sendingSignal","SENDING_SIGNAL","signalSent","SIGNAL_SENT","errorSendingSignal","ERROR_SENDING_SIGNAL","fetchingMessageHistory","FETCHING_MESSAGE_HISTORY","messageHistoryRetrieved","MESSAGE_HISTORY_RETRIEVED","errorFetchingMessageHistory","ERROR_FETCHING_MESSAGE_HISTORY","UserActionType","creatingSpace","CREATING_SPACE","spaceCreated","SPACE_CREATED","errorCreatingSpace","ERROR_CREATING_SPACE","deletingSpace","DELETING_SPACE","spaceDeleted","SPACE_DELETED","errorDeletingSpace","ERROR_DELETING_SPACE","fetchingSpaceById","FETCHING_SPACE_BY_ID","spaceRetrieved","SPACE_RETRIEVED","errorFetchingSpaceById","ERROR_FETCHING_SPACE_BY_ID","fetchingSpaces","FETCHING_SPACES","spacesRetrieved","SPACES_RETRIEVED","errorFetchingSpaces","ERROR_FETCHING_SPACES","updatingSpace","UPDATING_SPACE","spaceUpdated","SPACE_UPDATED","errorUpdatingSpace","ERROR_UPDATING_SPACE","PresenceActionType","creatingUser","CREATING_USER","userCreated","USER_CREATED","errorCreatingUser","ERROR_CREATING_USER","deletingUser","DELETING_USER","userDeleted","USER_DELETED","errorDeletingUser","ERROR_DELETING_USER","fetchingUserById","FETCHING_USER_BY_ID","userRetrieved","USER_RETRIEVED","errorFetchingUserById","ERROR_FETCHING_USER_BY_ID","fetchingUsers","FETCHING_USERS","usersRetrieved","USERS_RETRIEVED","errorFetchingUsers","ERROR_FETCHING_USERS","updatingUser","UPDATING_USER","userUpdated","USER_UPDATED","errorUpdatingUser","ERROR_UPDATING_USER","PresenceCategory","fetchingHereNow","FETCHING_HERE_NOW","hereNowRetrieved","HERE_NOW_RETRIEVED","errorFetchingHereNow","ERROR_FETCHING_HERE_NOW","fetchingPresenceState","FETCHING_PRESENCE_STATE","presenceStateRetrieved","PRESENCE_STATE_RETRIEVED","errorFetchingPresenceState","ERROR_FETCHING_PRESENCE_STATE","createUserListener","dispatch","user","message","event","USER_UPDATED_EVENT","USER_DELETED_EVENT","createSpaceListener","space","SPACE_UPDATED_EVENT","SPACE_DELETED_EVENT","createMembershipListener","membership","USER_ADDED_TO_SPACE_EVENT","userAddedToSpace","USER_MEMBERSHIP_UPDATED_ON_SPACE_EVENT","userMembershipUpdatedOnSpace","USER_REMOVED_FROM_SPACE_EVENT","userRemovedFromSpace","createMessageListener","MESSAGE_RECEIVED","messageReceived","ErrorStatusCategory","ErrorStatusActionType","createPresenceListener","presence","action","JOIN","JOIN_EVENT","userJoin","LEAVE","LEAVE_EVENT","userLeave","TIMEOUT","TIMEOUT_EVENT","userTimeout","STATE_CHANGE","STATE_CHANGE_EVENT","userStateChange","createSignalListener","signal","SIGNAL_RECEIVED","signalReceived","NetworkStatusActionType","NetworkStatusCategory","accessDenied","ACCESS_DENIED_EVENT","malformedResponse","MALFORMED_RESPONSE_EVENT","badRequest","BAD_REQUEST_EVENT","decryptionError","DECRYPTION_ERROR_EVENT","requestMessageCountExceeded","REQUEST_MESSAGE_COUNT_EXCEED_EVENT","unknown","UNKNOWN_EVENT","createErrorStatusListener","status","category","PN_ACCES_DENIED_CATEGORY","PN_MALFORMED_RESPONSE_CATEGORY","PN_BAD_REQUEST_CATEGORY","PN_DECRYPTION_ERROR_CATEGORY","PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY","PN_UNKNOWN_CATEGORY","SubscriptionStatusActionType","SubscriptionStatusCategory","networkUp","NETWORK_UP_EVENT","networkDown","NETWORK_DOWN_EVENT","createNetworkStatusListener","PN_NETWORK_UP_CATEGORY","PN_NETWORK_DOWN_CATEGORY","PN_RECONNECTED_CATEGORY","PN_CONNECTED_CATEGORY","PN_TIMEOUT_CATEGORY","reconnected","RECONNECTED_EVENT","connected","CONNECTED_EVENT","createSubscriptionStatusListener","combineListeners","listeners","Object","assign","mergeListenersByType","result","incomingListeners","forEach","listener","undefined","push","entries","listenerType","listenersOfType","length","createCombinedListener","currentListener","request","thunkFunction","_getState","pubnub","Promise","resolve","reject","api","addMembers","response","ADD_MEMBERS_COMMAND","state","byId","newState","spaceId","data","membersResult","filter","id","userId","custom","clonedSpace","map","membershipResult","clonedUser","channel","results","messages","m","entry","timetoken","initializer","initialState","isConnected","Error","totalOccupancy","channels","hereNow","keys","getState","occupants","occupant","uuid","occupancy","name","userJoined","userLeft","createSpace","CREATE_SPACE_COMMAND","spaceIds","item","spaceUpdatedEventReceived","spaceDeletedEventReceived","i","currentMembership","createUser","CREATE_USER_COMMAND","userIds","userUpdatedEventReceived","userDeletedEventReceived","currentMember","deleteSpace","DELETE_SPACE_COMMAND","deleteUser","DELETE_USER_COMMAND","includeUUIDs","includeState","HERE_NOW_COMMAND","getMembers","FETCH_MEMBERS_COMMAND","getMemberships","FETCH_MEMBERSHIP_COMMAND","history","FETCH_MESSAGE_HISTORY_COMMAND","PRESENCE_STATE_COMMAND","getSpace","FETCH_SPACE_BY_ID_COMMAND","getSpaces","FETCH_SPACES_COMMAND","getUser","FETCH_USER_BY_ID_COMMAND","getUsers","FETCH_USERS_COMMAND","joinSpaces","JOIN_SPACES_COMMAND","leaveSpaces","spaces","LEAVE_SPACES_COMMAND","NETWORK_ISSUES_EVENT","removeMembers","users","REMOVE_MEMBERS_COMMAND","publish","SEND_MESSAGE_COMMAND","SEND_SIGNAL_COMMAND","TIMEOUT_CONNECTION_EVENT","updateMembers","UPDATE_MEMBERS_COMMAND","updateMemberships","UPDATE_MEMBERSHIP_COMMAND","updateSpace","UPDATE_SPACE_COMMAND","updateUser","UPDATE_USER_COMMAND"],"mappings":"4NACA,IAAYA,GAAAA,EAAAA,+BAAAA,6FAEVA,mDACAA,qDACAA,+DACAA,+DACAA,uEACAA,yFACAA,mDACAA,iDACAA,+DACAA,mDACAA,qDACAA,+DACAA,yCACAA,uCACAA,qDACAA,yCACAA,mCACAA,yDCnBUC,ECiBCC,EAAgB,SAI3BC,EACAC,SAC+C,CAC/CC,KAAML,6BAAqBM,eAC3BH,QAAAA,EACAC,KAAAA,IAKWG,EAAe,SAI1BJ,EACAC,SAC8C,CAC9CC,KAAML,6BAAqBQ,cAC3BL,QAAAA,EACAC,KAAAA,IAKWK,EAAqB,SAIhCN,EACAC,SACoD,CACpDC,KAAML,6BAAqBU,qBAC3BP,QAAAA,EACAC,KAAAA,EACAO,OAAO,ICtCIC,EAAgB,SAI3BT,EACAC,SAC+C,CAC/CC,KAAML,6BAAqBa,eAC3BV,QAAAA,EACAC,KAAAA,IAKWU,EAAa,SAIxBX,EACAC,SAC4C,CAC5CC,KAAML,6BAAqBe,YAC3BZ,QAAAA,EACAC,KAAAA,IAKWY,EAAqB,SAIhCb,EACAC,SACoD,CACpDC,KAAML,6BAAqBiB,qBAC3Bd,QAAAA,EACAC,KAAAA,EACAO,OAAO,ICtCIO,EAAqB,SAChCf,EACAC,SACoC,CACpCC,KAAML,6BAAqBmB,oBAC3BhB,QAAAA,EACAC,KAAAA,IAKWgB,EAAsB,SAIjCjB,EACAC,SACqD,CACrDC,KAAML,6BAAqBqB,qBAC3BlB,QAAAA,EACAC,KAAAA,IAKWkB,EAA0B,SACrCnB,EACAC,SACyC,CACzCC,KAAML,6BAAqBuB,0BAC3BpB,QAAAA,EACAC,KAAAA,EACAO,OAAO,IChCIa,EAAsB,SAIjCrB,EACAC,SACoD,CACpDC,KAAML,6BAAqByB,oBAC3BtB,QAAAA,EACAC,KAAAA,IAKWsB,EAAoB,SAI/BvB,EACAC,SACmD,CACnDC,KAAML,6BAAqB2B,mBAC3BxB,QAAAA,EACAC,KAAAA,IAKWwB,EAA0B,SAIrCzB,EACAC,SACyD,CACzDC,KAAML,6BAAqB6B,0BAC3B1B,QAAAA,EACAC,KAAAA,EACAO,OAAO,KJvDGV,EAAAA,4BAAAA,oFAEVA,yDACAA,mDACAA,yDACAA,6CACAA,+CACAA,yDACAA,6CACAA,2CACAA,yDACAA,yCACAA,uCACAA,qDACAA,6CACAA,2CACAA,6DKhBU6B,ECiBCC,EAAkB,SAC7B5B,EACAC,SACiC,CACjCC,KAAMJ,0BAAkB+B,iBACxB7B,QAAAA,EACAC,KAAAA,IAKW6B,EAAmB,SAI9B9B,EACAC,SAC+C,CAC/CC,KAAMJ,0BAAkBiC,kBACxB/B,QAAAA,EACAC,KAAAA,IAKW+B,EAAuB,SAClChC,EACAC,SACsC,CACtCC,KAAMJ,0BAAkBmC,uBACxBjC,QAAAA,EACAC,KAAAA,EACAO,OAAO,IChCI0B,EAAkB,SAI7BlC,EACAC,SAC8C,CAC9CC,KAAMJ,0BAAkBqC,iBACxBnC,QAAAA,EACAC,KAAAA,IAKWmC,EAAiB,SAI5BpC,EACAC,SAC6C,CAC7CC,KAAMJ,0BAAkBuC,gBACxBrC,QAAAA,EACAC,KAAAA,IAKWqC,EAAuB,SAIlCtC,EACAC,SACmD,CACnDC,KAAMJ,0BAAkByC,uBACxBvC,QAAAA,EACAC,KAAAA,EACAO,OAAO,ICtCIgC,EAAgB,SAI3BxC,EACAC,SAC4C,CAC5CC,KAAMJ,0BAAkB2C,eACxBzC,QAAAA,EACAC,KAAAA,IAKWyC,EAAe,SAI1B1C,EACAC,SAC2C,CAC3CC,KAAMJ,0BAAkB6C,cACxB3C,QAAAA,EACAC,KAAAA,IAKW2C,EAAqB,SAIhC5C,EACAC,SACiD,CACjDC,KAAMJ,0BAAkB+C,qBACxB7C,QAAAA,EACAC,KAAAA,EACAO,OAAO,ICtCIsC,EAAkB,SAI7B9C,EACAC,SAC8C,CAC9CC,KAAMJ,0BAAkBiD,iBACxB/C,QAAAA,EACAC,KAAAA,IAKW+C,EAAiB,SAI5BhD,EACAC,SAC6C,CAC7CC,KAAMJ,0BAAkBmD,gBACxBjD,QAAAA,EACAC,KAAAA,IAKWiD,EAAuB,SAIlClD,EACAC,SACmD,CACnDC,KAAMJ,0BAAkBqD,uBACxBnD,QAAAA,EACAC,KAAAA,EACAO,OAAO,KJvDGmB,EAAAA,4BAAAA,kFAEVA,uEACAA,6CACAA,2CACAA,qCACAA,uDACAA,6DACAA,+DACAA,6EKTUyB,ECaCC,EAAiB,SAK5BrD,EACAC,SACiE,CACjEC,KAAMyB,0BAAkB2B,gBACxBtD,QAAAA,EACAC,KAAAA,IAKWsD,EAAc,SAKzBvD,EACAC,SAC8D,CAC9DC,KAAMyB,0BAAkB6B,aACxBxD,QAAAA,EACAC,KAAAA,IAKWwD,EAAsB,SAKjCzD,EACAC,SACsE,CACtEC,KAAMyB,0BAAkB+B,sBACxB1D,QAAAA,EACAC,KAAAA,KDrDUmD,EAAAA,2BAAAA,+EAEVA,2CACAA,yCACAA,mCACAA,yDELUO,ECaCC,EAAgB,SAI3B5D,EACAC,SACkD,CAClDC,KAAMkD,yBAAiBS,eACvB7D,QAAAA,EACAC,KAAAA,IAKW6D,EAAa,SAIxB9D,EACAC,SAC+C,CAC/CC,KAAMkD,yBAAiBW,YACvB/D,QAAAA,EACAC,KAAAA,IAKW+D,EAAqB,SAIhChE,EACAC,SACuD,CACvDC,KAAMkD,yBAAiBa,qBACvBjE,QAAAA,EACAC,KAAAA,ICnCWiE,EAAyB,SACpClE,EACAC,SACwC,CACxCC,KAAMyB,0BAAkBwC,yBACxBnE,QAAAA,EACAC,KAAAA,IAKWmE,EAA0B,SAIrCpE,EACAC,SAC6D,CAC7DC,KAAMyB,0BAAkB0C,0BACxBrE,QAAAA,EACAC,KAAAA,IAKWqE,EAA8B,SACzCtE,EACAC,SAC6C,CAC7CC,KAAMyB,0BAAkB4C,+BACxBvE,QAAAA,EACAC,KAAAA,KF9CU0D,EAAAA,0BAAAA,gFAEVA,+DACAA,qDACAA,qDACAA,qDACAA,yCACAA,uCACAA,qDACAA,yCACAA,uCACAA,qDACAA,yCACAA,uCACAA,qDACAA,2CACAA,6CACAA,uDACAA,qDACAA,2CACAA,iEACAA,mDACAA,uDGtBUa,ECgBCC,EAAgB,SAC3BzE,EACAC,SAC+B,CAC/BC,KAAMyD,wBAAgBe,eACtB1E,QAAAA,EACAC,KAAAA,IAKW0E,EAAe,SAI1B3E,EACAC,SACyC,CACzCC,KAAMyD,wBAAgBiB,cACtB5E,QAAAA,EACAC,KAAAA,IAKW4E,EAAqB,SAChC7E,EACAC,SACoC,CACpCC,KAAMyD,wBAAgBmB,qBACtB9E,QAAAA,EACAC,KAAAA,EACAO,OAAO,ICnCIuE,EAAgB,SAC3B/E,EACAC,SAC+B,CAC/BC,KAAMyD,wBAAgBqB,eACtBhF,QAAAA,EACAC,KAAAA,IAKWgF,EAAe,SAC1BjF,EACAC,SAC8B,CAC9BC,KAAMyD,wBAAgBuB,cACtBlF,QAAAA,EACAC,KAAAA,IAKWkF,EAAqB,SAChCnF,EACAC,SACoC,CACpCC,KAAMyD,wBAAgByB,qBACtBpF,QAAAA,EACAC,KAAAA,EACAO,OAAO,IC1BI6E,EAAoB,SAC/BrF,EACAC,SACmC,CACnCC,KAAMyD,wBAAgB2B,qBACtBtF,QAAAA,EACAC,KAAAA,IAKWsF,EAAiB,SAI5BvF,EACAC,SAC2C,CAC3CC,KAAMyD,wBAAgB6B,gBACtBxF,QAAAA,EACAC,KAAAA,IAKWwF,EAAyB,SACpCzF,EACAC,SACwC,CACxCC,KAAMyD,wBAAgB+B,2BACtB1F,QAAAA,EACAC,KAAAA,EACAO,OAAO,IChCImF,EAAiB,SAC5B3F,EACAC,SACgC,CAChCC,KAAMyD,wBAAgBiC,gBACtB5F,QAAAA,EACAC,KAAAA,IAKW4F,EAAkB,SAI7B7F,EACAC,SAC4C,CAC5CC,KAAMyD,wBAAgBmC,iBACtB9F,QAAAA,EACAC,KAAAA,IAKW8F,EAAsB,SACjC/F,EACAC,SACqC,CACrCC,KAAMyD,wBAAgBqC,sBACtBhG,QAAAA,EACAC,KAAAA,EACAO,OAAO,IChCIyF,EAAgB,SAC3BjG,EACAC,SAC+B,CAC/BC,KAAMyD,wBAAgBuC,eACtBlG,QAAAA,EACAC,KAAAA,IAKWkG,EAAe,SAI1BnG,EACAC,SACyC,CACzCC,KAAMyD,wBAAgByC,cACtBpG,QAAAA,EACAC,KAAAA,IAKWoG,GAAqB,SAChCrG,EACAC,SACoC,CACpCC,KAAMyD,wBAAgB2C,qBACtBtG,QAAAA,EACAC,KAAAA,EACAO,OAAO,KLhDGgE,EAAAA,yBAAAA,6EAEVA,6DACAA,mDACAA,mDACAA,mDACAA,uCACAA,qCACAA,mDACAA,uCACAA,qCACAA,mDACAA,uCACAA,qCACAA,mDACAA,yCACAA,2CACAA,qDACAA,mDACAA,yCACAA,+DACAA,iDACAA,qDMtBU+B,GCgBCC,GAAe,SAC1BxG,EACAC,SAC8B,CAC9BC,KAAMsE,uBAAeiC,cACrBzG,QAAAA,EACAC,KAAAA,IAKWyG,GAAc,SAIzB1G,EACAC,SACuC,CACvCC,KAAMsE,uBAAemC,aACrB3G,QAAAA,EACAC,KAAAA,IAKW2G,GAAoB,SAC/B5G,EACAC,SACmC,CACnCC,KAAMsE,uBAAeqC,oBACrB7G,QAAAA,EACAC,KAAAA,EACAO,OAAO,ICnCIsG,GAAe,SAC1B9G,EACAC,SAC8B,CAC9BC,KAAMsE,uBAAeuC,cACrB/G,QAAAA,EACAC,KAAAA,IAKW+G,GAAc,SACzBhH,EACAC,SAC6B,CAC7BC,KAAMsE,uBAAeyC,aACrBjH,QAAAA,EACAC,KAAAA,IAKWiH,GAAoB,SAC/BlH,EACAC,SACmC,CACnCC,KAAMsE,uBAAe2C,oBACrBnH,QAAAA,EACAC,KAAAA,EACAO,OAAO,IC1BI4G,GAAmB,SAC9BpH,EACAC,SACkC,CAClCC,KAAMsE,uBAAe6C,oBACrBrH,QAAAA,EACAC,KAAAA,IAKWqH,GAAgB,SAI3BtH,EACAC,SACyC,CACzCC,KAAMsE,uBAAe+C,eACrBvH,QAAAA,EACAC,KAAAA,IAKWuH,GAAwB,SACnCxH,EACAC,SACuC,CACvCC,KAAMsE,uBAAeiD,0BACrBzH,QAAAA,EACAC,KAAAA,EACAO,OAAO,IChCIkH,GAAgB,SAC3B1H,EACAC,SAC+B,CAC/BC,KAAMsE,uBAAemD,eACrB3H,QAAAA,EACAC,KAAAA,IAKW2H,GAAiB,SAI5B5H,EACAC,SAC0C,CAC1CC,KAAMsE,uBAAeqD,gBACrB7H,QAAAA,EACAC,KAAAA,IAKW6H,GAAqB,SAChC9H,EACAC,SACoC,CACpCC,KAAMsE,uBAAeuD,qBACrB/H,QAAAA,EACAC,KAAAA,EACAO,OAAO,IChCIwH,GAAe,SAC1BhI,EACAC,SAC8B,CAC9BC,KAAMsE,uBAAeyD,cACrBjI,QAAAA,EACAC,KAAAA,IAKWiI,GAAc,SAIzBlI,EACAC,SACuC,CACvCC,KAAMsE,uBAAe2D,aACrBnI,QAAAA,EACAC,KAAAA,IAKWmI,GAAoB,SAC/BpI,EACAC,SACmC,CACnCC,KAAMsE,uBAAe6D,oBACrBrI,QAAAA,EACAC,KAAAA,EACAO,OAAO,KLhDG+F,GAAAA,6BAAAA,2EAEVA,0DACAA,gDACAA,kDACAA,4DACAA,4DACAA,8DACAA,wEACAA,kCACAA,oCACAA,wCACAA,sDMZU+B,GCaCC,GAAkB,SAC7BvI,EACAC,SACiC,CACjCC,KAAMqG,2BAAmBiC,kBACzBxI,QAAAA,EACAC,KAAAA,IAKWwI,GAAmB,SAC9BzI,EACAC,SACkC,CAClCC,KAAMqG,2BAAmBmC,mBACzB1I,QAAAA,EACAC,KAAAA,IAKW0I,GAAuB,SAClC3I,EACAC,SACsC,CACtCC,KAAMqG,2BAAmBqC,wBACzB5I,QAAAA,EACAC,KAAAA,IC5BW4I,GAAwB,SACnC7I,EACAC,SACuC,CACvCC,KAAMqG,2BAAmBuC,wBACzB9I,QAAAA,EACAC,KAAAA,IAKW8I,GAAyB,SACpC/I,EACAC,SACwC,CACxCC,KAAMqG,2BAAmByC,yBACzBhJ,QAAAA,EACAC,KAAAA,IAKWgJ,GAA6B,SACxCjJ,EACAC,SAC4C,CAC5CC,KAAMqG,2BAAmB2C,8BACzBlJ,QAAAA,EACAC,KAAAA,ICVWkJ,GAAqB,SAChCC,SACI,CACJC,KAAM,SAACrJ,UACGA,EAAQsJ,QAAQC,WACjB,SACHH,EAxBmB,SACzBpJ,SACsC,CACtCE,KAAMsE,uBAAegF,mBACrBxJ,QAAAA,GAqBQkI,CACIlI,EAAsDsJ,oBAIzD,SACHF,EAtBmB,SACzBpJ,SACsC,CACtCE,KAAMsE,uBAAeiF,mBACrBzJ,QAAAA,GAmBQgH,CACIhH,EAAsDsJ,cCfvDI,GAAsB,SACjCN,SACI,CACJO,MAAO,SAAC3J,UACEA,EAAQsJ,QAAQC,WACjB,SACHH,EAxBoB,SAC1BpJ,SAC4C,CAC5CE,KAAMyD,wBAAgBiG,oBACtB5J,QAAAA,GAqBQmG,CACInG,EACCsJ,oBAIJ,SACHF,EAvBoB,SAC1BpJ,SAC4C,CAC5CE,KAAMyD,wBAAgBkG,oBACtB7J,QAAAA,GAoBQiF,CACIjF,EACCsJ,cCNFQ,GAA2B,SAMtCV,SACI,CACJW,WAAY,SAAC/J,UACHA,EAAQsJ,QAAQC,WACjB,SACHH,EA9BiB,SAGvBpJ,SACqD,CACrDE,KAAML,6BAAqBmK,0BAC3BhK,QAAAA,GAyBQiK,CACIjK,EAECsJ,oBAIJ,SACHF,EAhD6B,SAGnCpJ,SACiE,CACjEE,KAAML,6BAAqBqK,uCAC3BlK,QAAAA,GA2CQmK,CACInK,EAECsJ,oBAIJ,SACHF,EAvCqB,SAG3BpJ,SACyD,CACzDE,KAAML,6BAAqBuK,8BAC3BpK,QAAAA,GAkCQqK,CACIrK,EAECsJ,cC7DFgB,GAAwB,SACnClB,SACI,CACJE,QAAS,SAACtJ,UACRoJ,EAb2B,SAC7BpJ,SACwC,CACxCE,KAAMyB,0BAAkB4I,iBACxBvK,QAAAA,GASWwK,CAA8BxK,QNlB/BsI,GAAAA,2BAAAA,0CAEVA,+BACAA,iBACAA,qBOQK,ICZKmC,GCAAC,GF4CCC,GAAyB,SACpCvB,SACI,CACJwB,SAAU,SAAC5K,UACDA,EAAQ6K,aACTvC,yBAAiBwC,KACpB1B,EAtCgB,SAACpJ,SAAoD,CAC3EE,KAAMqG,2BAAmBwE,WACzB/K,QAAAA,GAoCegL,CAAShL,eAEfsI,yBAAiB2C,MACpB7B,EAlCiB,SAACpJ,SAAqD,CAC7EE,KAAMqG,2BAAmB2E,YACzBlL,QAAAA,GAgCemL,CAAUnL,eAEhBsI,yBAAiB8C,QACpBhC,EA9BmB,SACzBpJ,SACwB,CACxBE,KAAMqG,2BAAmB8E,cACzBrL,QAAAA,GA0BesL,CAAYtL,eAElBsI,yBAAiBiD,aACpBnC,EAxBuB,SAC7BpJ,SAC4B,CAC5BE,KAAMqG,2BAAmBiF,mBACzBxL,QAAAA,GAoBeyL,CAAgBzL,QG7CpB0L,GAAuB,SAClCtC,SACI,CACJuC,OAAQ,SAAC3L,UACPoJ,EAb0B,SAC5BpJ,SACsC,CACtCE,KAAMkD,yBAAiBwI,gBACvB5L,QAAAA,GASW6L,CAA4B7L,QFlBzC,SAAYyK,GACVA,uDACAA,oDACAA,+DACAA,iDACAA,2DACAA,mFACAA,0CAPF,CAAYA,KAAAA,SCAAC,GAAAA,gCAAAA,sFAEVA,oDACAA,8DACAA,gDACAA,0DACAA,8DACAA,kFACAA,4CERUoB,GCAAC,GCwBCC,GAAe,SAC1BhM,SAC6B,CAC7BE,KAAMwK,8BAAsBuB,oBAC5BjM,QAAAA,IAKWkM,GAAoB,SAC/BlM,SACkC,CAClCE,KAAMwK,8BAAsByB,yBAC5BnM,QAAAA,IAKWoM,GAAa,SACxBpM,SAC2B,CAC3BE,KAAMwK,8BAAsB2B,kBAC5BrM,QAAAA,IAKWsM,GAAkB,SAC7BtM,SACgC,CAChCE,KAAMwK,8BAAsB6B,uBAC5BvM,QAAAA,IAcWwM,GAA8B,SACzCxM,SAC0C,CAC1CE,KAAMwK,8BAAsB+B,mCAC5BzM,QAAAA,IAKW0M,GAAU,SAAC1M,SAAsD,CAC5EE,KAAMwK,8BAAsBiC,cAC5B3M,QAAAA,IAeW4M,GAA4B,SACvCxD,SACI,CACJyD,OAAQ,SAAC7M,UACCA,EAAQ8M,eACTrC,GAAoBsC,yBACvB3D,EAAS4C,GAAahM,eAEnByK,GAAoBuC,+BACvB5D,EAAS8C,GAAkBlM,eAExByK,GAAoBwC,wBACvB7D,EAASgD,GAAWpM,eAEjByK,GAAoByC,6BACvB9D,EAASkD,GAAgBtM,eAEtByK,GAAoB0C,2CACvB/D,EAASoD,GAA4BxM,eAElCyK,GAAoB2C,oBACvBhE,EAASsD,GAAQ1M,SFpHb8L,GAAAA,kCAAAA,gFAEVA,kDCFF,SAAYC,GACVA,+CACAA,mDACAA,kDACAA,8CACAA,0CALF,CAAYA,KAAAA,YEAAsB,GCAAC,GCSCC,GAAY,iBAA6B,CACpDrN,KAAM4L,gCAAwB0B,mBAKnBC,GAAc,iBAA+B,CACxDvN,KAAM4L,gCAAwB4B,qBAWnBC,GAA8B,SACzCvE,SACI,CACJyD,OAAQ,SAAC7M,UACCA,EAAQ8M,eACTf,GAAsB6B,uBACzBxE,EAASmE,iBAENxB,GAAsB8B,yBACzBzE,EAASqE,iBAEN1B,GAAsB+B,6BAGtB/B,GAAsBgC,sBACzB3E,EAASmE,iBAENxB,GAAsBiC,oBACzB5E,EAASqE,WF7CLJ,GAAAA,uCAAAA,uFAEVA,4CCFF,SAAYC,GACVA,8CACAA,kDAFF,CAAYA,KAAAA,YESCW,GAAc,SACzBjO,SACuB,CACvBE,KAAMmN,qCAA6Ba,kBACnClO,QAAAA,IAKWmO,GAAY,SACvBnO,SACqB,CACrBE,KAAMmN,qCAA6Be,gBACnCpO,QAAAA,IAWWqO,GAAmC,SAC9CjF,SACI,CACJyD,OAAQ,SAAC7M,UACCA,EAAQ8M,eACTQ,GAA2BS,sBAC9B3E,EAAS+E,GAAUnO,eAEhBsN,GAA2BQ,wBAC9B1E,EAAS6E,GAAYjO,QC3BhBsO,GAAmB,sCAAIC,2BAAAA,yBAC3BC,OAAOC,aAAPD,QAAc,WAAOE,GAAqBH,MAS7CG,GAAuB,SAC3BH,OAEMI,EAAsC,GACtCC,EAEF,UAGJL,EAAUM,SAAQ,SAACC,QACQC,IAArBD,EAASxF,eACuByF,IAA9BH,EAAkBtF,UACpBsF,EAAiB,QAAc,IAGjCA,EAAiB,QAAYI,KAAKF,SAGVC,IAAtBD,EAASlE,gBACwBmE,IAA/BH,EAAkBhE,WACpBgE,EAAiB,SAAe,IAGlCA,EAAiB,SAAaI,KAAKF,SAGbC,IAApBD,EAASnD,cACsBoD,IAA7BH,EAAkBjD,SACpBiD,EAAiB,OAAa,IAGhCA,EAAiB,OAAWI,KAAKF,SAGbC,IAAlBD,EAASzF,YACoB0F,IAA3BH,EAAkBvF,OACpBuF,EAAiB,KAAW,IAG9BA,EAAiB,KAASI,KAAKF,SAGVC,IAAnBD,EAASnF,aACqBoF,IAA5BH,EAAkBjF,QACpBiF,EAAiB,MAAY,IAG/BA,EAAiB,MAAUI,KAAKF,SAGNC,IAAxBD,EAAS/E,kBAC0BgF,IAAjCH,EAAkB7E,aACpB6E,EAAiB,WAAiB,IAGpCA,EAAiB,WAAeI,KAAKF,SAGfC,IAApBD,EAASjC,cACsBkC,IAA7BH,EAAkB/B,SACpB+B,EAAiB,OAAa,IAGhCA,EAAiB,OAAWI,KAAKF,OAKrCN,OAAOS,QAAQL,GAAmBC,SAChC,gBAAEK,OAAcC,OACVA,GAA8C,IAA3BA,EAAgBC,OAErCT,EAAOK,KAAKG,EAAgB,IACnBA,GAAmBA,EAAgBC,OAAS,GAErDT,EAAOK,KACLK,GACEH,EACAC,OAOHR,GAUHU,GAAyB,SAC7BH,EACAX,sBAIGW,GAAe,SACdlP,GASAuO,EAAUM,SAAQ,SAACC,OACXQ,EAAkBR,EAASI,QAETH,IAApBO,GACFA,EAAgBtP,qDrChFA,SAIxBuP,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAAS5G,EAAiC+M,EAAStP,IAEnDyP,EAAOI,IAAIC,gBAEJR,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASxG,EAAsC5C,EAASC,IACxD4P,EAAO7P,QAQPoJ,EAAS1G,EANO,CACd6M,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAGgD5M,IAClD2P,kBAMVJ,EAActP,KAAOJ,0BAAkBmQ,oBAEhCT,oKsCiD2B,kBAGiB,SACnDU,EACArF,mBADAqF,IAAAA,EAlIgC,CAChCC,KAAM,KAoIEtF,EAAO3K,WACRJ,0BAAkBiC,uBAClBjC,0BAAkBuC,qBAClBvC,0BAAkB6C,mBAClB7C,0BAAkBmD,uBA7CL,SAGpBiN,EACAlQ,OAIMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQuP,QAAQc,SAAWrQ,EAAQgQ,SAASM,KAEnDF,EAgCIG,CAA6BL,EAAOrF,EAAO7K,cAC/CH,6BAAqBmK,iCAvIL,SAGvBkG,EACAlQ,MAGEkQ,EAAMC,KAAKnQ,EAAQsQ,KAAKD,UAGX,IAFbH,EAAMC,KAAKnQ,EAAQsQ,KAAKD,SAASG,QAC/B,SAACzG,UAAeA,EAAW0G,KAAOzQ,EAAQsQ,KAAKI,UAC/CtB,OACF,KACMgB,EAAW,CACfD,UAAWD,EAAMC,cAQnBC,EAASD,KAAKnQ,EAAQsQ,KAAKD,mBACtBD,EAASD,KAAKnQ,EAAQsQ,KAAKD,UANb,CACjBI,GAAIzQ,EAAQsQ,KAAKI,OACjBC,OAAQ3Q,EAAQsQ,KAAKK,UAQhBP,SAGFF,EA2GIjG,CAAgCiG,EAAOrF,EAAO7K,cAClDH,6BAAqBuK,qCAzGD,SAG3B8F,EACAlQ,MAGEkQ,EAAMC,KAAKnQ,EAAQsQ,KAAKD,UACxBH,EAAMC,KAAKnQ,EAAQsQ,KAAKD,SAASG,QAC/B,SAACzG,UAAeA,EAAW0G,KAAOzQ,EAAQsQ,KAAKI,UAC/CtB,OAAS,EACX,KACMgB,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQsQ,KAAKD,SAAWD,EAASD,KAC7CnQ,EAAQsQ,KAAKD,SACbG,QAAO,SAACzG,UAAeA,EAAW0G,KAAOzQ,EAAQsQ,KAAKI,UAEjDN,SAGFF,EAmFI7F,CAAoC6F,EAAOrF,EAAO7K,cACtDH,6BAAqBqK,8CAjFO,SAGnCgG,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,OAGfS,EAAcR,EAASD,KAAKnQ,EAAQsQ,KAAKD,qBAEzBtB,IAAhB6B,IACFA,EAAcA,EAAYC,KAAI,SAACxH,UACzBA,EAAKoH,KAAOzQ,EAAQsQ,KAAKI,YAEtBrH,GACHsH,OAAQ3Q,EAAQsQ,KAAKK,SAGhBtH,MAKb+G,EAASD,KAAKnQ,EAAQsQ,KAAKD,SAAWO,EAE/BR,EAuDIjG,CAA4C+F,EAAOrF,EAAO7K,wBAE1DkQ,yECxB0B,kBAQuB,SAC5DA,EACArF,mBADAqF,IAAAA,EAvIgC,CAChCC,KAAM,KAyIEtF,EAAO3K,WACRL,6BAAqBqB,0BACrBrB,6BAAqB2B,wBACrB3B,6BAAqBQ,mBACrBR,6BAAqBe,mBAlDL,SAGvBsP,EACAlQ,OAIMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQuP,QAAQmB,QAAU1Q,EAAQgQ,SAASM,KAElDF,EAqCIU,CAAmCZ,EAAOrF,EAAO7K,cACrDH,6BAAqBmK,iCA5IL,SAGvBkG,EACAlQ,MAGEkQ,EAAMC,KAAKnQ,EAAQsQ,KAAKI,SAGX,IAFbR,EAAMC,KAAKnQ,EAAQsQ,KAAKI,QAAQF,QAC9B,SAACzG,UAAeA,EAAW0G,KAAOzQ,EAAQsQ,KAAKD,WAC/CjB,OACF,KACMgB,EAAW,CACfD,UAAWD,EAAMC,cAQnBC,EAASD,KAAKnQ,EAAQsQ,KAAKI,kBACtBN,EAASD,KAAKnQ,EAAQsQ,KAAKI,SANV,CACpBD,GAAIzQ,EAAQsQ,KAAKD,QACjBM,OAAQ3Q,EAAQsQ,KAAKK,UAQhBP,SAGFF,EAgHIjG,CAAmCiG,EAAOrF,EAAO7K,cACrDH,6BAAqBuK,qCA9GD,SAG3B8F,EACAlQ,MAGEkQ,EAAMC,KAAKnQ,EAAQsQ,KAAKI,SACxBR,EAAMC,KAAKnQ,EAAQsQ,KAAKI,QAAQF,QAC9B,SAACzG,UAAeA,EAAW0G,KAAOzQ,EAAQsQ,KAAKD,WAC/CjB,OAAS,EACX,KACMgB,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQsQ,KAAKI,QAAUN,EAASD,KAC5CnQ,EAAQsQ,KAAKI,QACbF,QAAO,SAACzG,UAAeA,EAAW0G,KAAOzQ,EAAQsQ,KAAKD,WAEjDD,SAGFF,EAwFI7F,CAAuC6F,EAAOrF,EAAO7K,cACzDH,6BAAqBqK,8CAtFO,SAGnCgG,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,OAGfY,EAAaX,EAASD,KAAKnQ,EAAQsQ,KAAKI,oBAEzB3B,IAAfgC,IACFA,EAAaA,EAAWF,KAAI,SAAClH,UACvBA,EAAM8G,KAAOzQ,EAAQsQ,KAAKD,aAEvB1G,GACHgH,OAAQ3Q,EAAQsQ,KAAKK,SAGhBhH,MAKbyG,EAASD,KAAKnQ,EAAQsQ,KAAKI,QAAUK,EAE9BX,EA4DIjG,CACL+F,EACArF,EAAO7K,wBAGFkQ,mEC1GuB,kBAK7B,SACLA,EACArF,mBADAqF,IAAAA,EA5DiC,CACjCC,KAAM,KA8DEtF,EAAO3K,WACRyB,0BAAkB4I,wBA5DH,SACtB2F,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,mBAGoBpB,IAAnCqB,EAASD,KAAKnQ,EAAQgR,WACxBZ,EAASD,KAAKnQ,EAAQgR,SAAW,IAGnCZ,EAASD,KAAKnQ,EAAQgR,mBAAeZ,EAASD,KAAKnQ,EAAQgR,UAAUhR,IAE9DoQ,EA+CI5F,CAA6B0F,EAAOrF,EAAO7K,cAC/C2B,0BAAkB0C,iCA7CK,SAI9B6L,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,YAG4BpB,IAA3CqB,EAASD,KAAKnQ,EAAQuP,QAAQyB,WAChCZ,EAASD,KAAKnQ,EAAQuP,QAAQyB,SAAW,QAGrCC,EAAyBjR,EAAQgQ,SAASkB,SAASL,KACvD,SAACM,SACG,CACAH,QAAShR,EAAQuP,QAAQyB,QACzB1H,QAAS6H,EAAEC,MACXC,UAAWF,EAAEE,qBAInBjB,EAASD,KAAKnQ,EAAQuP,QAAQyB,mBACzBZ,EAASD,KAAKnQ,EAAQuP,QAAQyB,SAC9BC,GAGEb,EAiBIhM,CACL8L,EACArF,EAAO7K,wBAGFkQ,+EC9E6B,SACxCoB,OAEIC,KAEuB,kBAAhBD,EACTC,EAAe,CAAEC,YAAaF,OACzB,CAAA,GAA2B,mBAAhBA,QAQV,IAAIG,MACR,oFAPsC,kBADxCF,EAAe,CAAEC,YAAaF,MACNE,kBAChB,IAAIC,MACR,+EASC,SACLvB,EACArF,mBADAqF,IAAAA,EAAQqB,GAGA1G,EAAO3K,WACR4L,gCAAwB0B,uBACpB,CACLgE,aAAa,QAEZ1F,gCAAwB4B,yBACpB,CACL8D,aAAa,kBAGRtB,qECqIsB,kBAGmB,SACtDA,EACArF,mBADAqF,IAAAA,EA5JO,CACLC,KAAM,GACNuB,eAAgB,IA6JV7G,EAAO3K,WACRqG,2BAAmBmC,0BA1JZ,SACdwH,EACAlQ,SAEiB,CACfmQ,UACKD,EAAMC,QACNnQ,EAAQgQ,SAAS2B,UAEtBD,eAAgB1R,EAAQgQ,SAAS0B,gBAkJxBE,CAAwB1B,EAAOrF,EAAO7K,cAC1CuG,2BAAmByC,gCA7IX,SACfkH,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,MACjBuB,eAAgBxB,EAAMwB,uBAGxBlD,OAAOqD,KAAK7R,EAAQ2R,UAAU9C,SAAQ,SAACmC,GAEjCZ,EAASD,KAAKa,KAChBZ,EAASD,KAAKa,GAAWhR,EAAQ2R,SAASX,OAIvCZ,EA8HI0B,CAAyB5B,EAAOrF,EAAO7K,cAC3CuG,2BAAmBwE,kBA5HT,SACjBmF,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,MACjBuB,eAAgBxB,EAAMwB,gBAGpBK,EAAgC,UAGhC3B,EAASD,KAAKnQ,EAAQgR,UAGxBZ,EAASD,KAAKnQ,EAAQgR,SAASe,WAF/BA,EAAY3B,EAASD,KAAKnQ,EAAQgR,SAASe,WAEUvB,QACnD,SAACwB,UAAaA,EAASC,OAASjS,EAAQiS,QAG1C7B,EAASD,KAAKnQ,EAAQgR,SAASkB,UAC7B9B,EAASD,KAAKnQ,EAAQgR,SAASe,UAAU3C,OAEvC2C,EAAU3C,SAAWgB,EAASD,KAAKnQ,EAAQgR,SAASe,UAAU3C,QAChEgB,EAASsB,kBAGXtB,EAASsB,iBAIXtB,EAASD,KAAKnQ,EAAQgR,SAAW,CAC/BmB,KAAMnS,EAAQgR,QACde,oBACKA,GACH,CACEE,KAAMjS,EAAQiS,KACd/B,MAAOlQ,EAAQkQ,SAGnBgC,UAAWlS,EAAQkS,WAGd9B,EAmFIgC,CAA2BlC,EAAOrF,EAAO7K,cAC7CuG,2BAAmB2E,iBACnB3E,2BAAmB8E,qBAlFX,SACf6E,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,MACjBuB,eAAgBxB,EAAMwB,mBAIpBtB,EAASD,KAAKnQ,EAAQgR,SAAU,KAC5Be,EAAY3B,EAASD,KAAKnQ,EAAQgR,SAASe,UAEjD3B,EAASD,KAAKnQ,EAAQgR,SAASe,UAAYA,EAAUvB,QACnD,SAACwB,UAAaA,EAASC,OAASjS,EAAQiS,QAGtCF,EAAU3C,OAASgB,EAASD,KAAKnQ,EAAQgR,SAASe,UAAU3C,SAC9DgB,EAASD,KAAKnQ,EAAQgR,SAASkB,YAC/B9B,EAASsB,yBAINtB,EA4DIiC,CAAyBnC,EAAOrF,EAAO7K,cAC3CuG,2BAAmBiF,0BA1DJ,SACtB0E,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,MACjBuB,eAAgBxB,EAAMwB,uBAIpBtB,EAASD,KAAKnQ,EAAQgR,UACNZ,EAASD,KAAKnQ,EAAQgR,SAASe,UAEvClD,SAAQ,SAACmD,GACbA,EAASC,OAASjS,EAAQiS,OAC5BD,EAAS9B,MAAQlQ,EAAQkQ,UAKxBE,EAuCI3E,CAAgCyE,EAAOrF,EAAO7K,wBAE9CkQ,kCC1LuB,SAAC9G,UACnCkF,GACEhE,GAAsBlB,GACtBuB,GAAuBvB,GACvBsC,GAAqBtC,GACrBwD,GAA0BxD,GAC1BwD,GAA0BxD,GAC1BuE,GAA4BvE,GAC5BiF,GAAiCjF,GACjCD,GAAmBC,GACnBM,GAAoBN,GACpBU,GAAyBV,iECYM,kBAI5B,SACL8G,EACArF,mBADAqF,IAAAA,EA3B+B,CAC/BC,KAAM,KA6BEtF,EAAO3K,WACRkD,yBAAiBwI,uBA3BH,SACrBsE,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,mBAGoBpB,IAAnCqB,EAASD,KAAKnQ,EAAQgR,WACxBZ,EAASD,KAAKnQ,EAAQgR,SAAW,IAGnCZ,EAASD,KAAKnQ,EAAQgR,mBAAeZ,EAASD,KAAKnQ,EAAQgR,UAAUhR,IAE9DoQ,EAcIvE,CAA2BqE,EAAOrF,EAAO7K,wBAEzCkQ,yBpCMc,SAIzBX,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAAS3E,EAAoB8K,EAAStP,IAEtCyP,EAAOI,IAAIwC,iBAEJ/C,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASvE,EAAyB7E,EAASC,IAC3C4P,EAAO7P,QAQPoJ,EAASzE,EANO,CACd4K,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAG8C5M,IAChD2P,kBAMVJ,EAActP,KAAOyD,wBAAgB4O,qBAE9B/C,kCqC5E6B,kBAG/B,SACLU,EACArF,mBADAqF,IAAAA,EAbgD,CAChDsC,SAAU,KAeF3H,EAAO3K,WACRyD,wBAAgBmC,uBAXnB,CAAE0M,SAYgC3H,EAAO7K,QAZrBgQ,SAASM,KAAKO,KAAI,SAAClH,UAAUA,EAAM8G,sBAchDP,+DCwIqB,kBAGa,SAC7CA,EACArF,mBADAqF,IAAAA,EA/IgC,CAChCC,KAAM,KAiJEtF,EAAO3K,WACRyD,wBAAgBiB,qBA/IJ,SACnBsL,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQgQ,SAASM,KAAKG,IAAMzQ,EAAQgQ,SAASM,KAEpDF,EAsIIzL,CAA0BuL,EAAOrF,EAAO7K,cAC5C2D,wBAAgByC,qBApIJ,SACnB8J,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQgQ,SAASM,KAAKG,IAAMzQ,EAAQgQ,SAASM,KAEpDF,EA2HIjK,CAA0B+J,EAAOrF,EAAO7K,cAC5C2D,wBAAgBuB,qBAzHJ,SACnBgL,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,qBAGZC,EAASD,KAAKnQ,EAAQuP,QAAQc,SAE9BD,EAgHInL,CAA0BiL,EAAOrF,EAAO7K,cAC5C2D,wBAAgBmC,wBA9GD,SACtBoK,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBnQ,EAAQgQ,SAASM,KAAKzB,SAAQ,SAAC4D,GAC7BrC,EAASD,KAAKsC,EAAKhC,IAAMgC,KAGpBrC,EAmGIvK,CAA6BqK,EAAOrF,EAAO7K,cAC/C2D,wBAAgB6B,uBAjGF,SACrB0K,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQgQ,SAASM,KAAKG,IAAMzQ,EAAQgQ,SAASM,KAEpDF,EAwFI7K,CAA4B2K,EAAOrF,EAAO7K,cAC9C2D,wBAAgBiG,2BAtFS,SAChCsG,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQsQ,KAAKG,IAAMzQ,EAAQsQ,KAElCF,EA6EIsC,CAAuCxC,EAAOrF,EAAO7K,cACzD2D,wBAAgBkG,2BA3ES,SAChCqG,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,qBAGZC,EAASD,KAAKnQ,EAAQsQ,KAAKG,IAE3BL,EAkEIuC,CAAuCzC,EAAOrF,EAAO7K,cACzDH,6BAAqBqB,4BAhEF,SAC1BgP,EACAlQ,OAEIoQ,EAAWF,KAEXlQ,EAAQgQ,SAASM,KAAKlB,OAAS,EAAG,CACpCgB,EAAW,CACTD,UACKD,EAAMC,WAIR,IAAIyC,EAAI,EAAGA,EAAI5S,EAAQgQ,SAASM,KAAKlB,OAAQwD,IAAK,KAC/CC,EAAoB7S,EAAQgQ,SAASM,KAAKsC,GAE5CC,EAAkBlJ,QACpByG,EAASD,KAAK0C,EAAkBpC,IAAMoC,EAAkBlJ,eAKvDyG,EA2CInP,CAAiCiP,EAAOrF,EAAO7K,wBAE/CkQ,oEhC5Ia,SAIxBX,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAAS5C,GAAmB+I,EAAStP,IAErCyP,EAAOI,IAAIgD,gBAEJvD,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASxC,GAAwB5G,EAASC,IAC1C4P,EAAO7P,QAQPoJ,EAAS1C,GANO,CACd6I,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAG4C5M,IAC9C2P,kBAMVJ,EAActP,KAAOsE,uBAAeuO,oBAE7BvD,iCiC9E4B,kBAG9B,SACLU,EACArF,mBADAqF,IAAAA,EAb+C,CAC/C8C,QAAS,KAeDnI,EAAO3K,WACRsE,uBAAeqD,sBAXlB,CAAEmL,QAYoBnI,EAAO7K,QAZVgQ,SAASM,KAAKO,KAAI,SAACxH,UAASA,EAAKoH,sBAc7CP,6DC8IoB,kBAGW,SAC1CA,EACArF,mBADAqF,IAAAA,EA/IgC,CAChCC,KAAM,KAiJEtF,EAAO3K,WACRsE,uBAAemC,oBA/IJ,SAClBuJ,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQgQ,SAASM,KAAKG,IAAMzQ,EAAQgQ,SAASM,KAEpDF,EAsII1J,CAAwBwJ,EAAOrF,EAAO7K,cAC1CwE,uBAAe2D,oBApIJ,SAClB+H,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQgQ,SAASM,KAAKG,IAAMzQ,EAAQgQ,SAASM,KAEpDF,EA2HIlI,CAAwBgI,EAAOrF,EAAO7K,cAC1CwE,uBAAeyC,oBAzHJ,SAClBiJ,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,qBAGZC,EAASD,KAAKnQ,EAAQuP,QAAQmB,QAE9BN,EAgHIpJ,CAAwBkJ,EAAOrF,EAAO7K,cAC1CwE,uBAAeqD,uBA9GD,SACrBqI,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBnQ,EAAQgQ,SAASM,KAAKzB,SAAQ,SAAC4D,GAC7BrC,EAASD,KAAKsC,EAAKhC,IAAMgC,KAGpBrC,EAmGIxI,CAA2BsI,EAAOrF,EAAO7K,cAC7CwE,uBAAe+C,sBAjGF,SACpB2I,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQgQ,SAASM,KAAKG,IAAMzQ,EAAQgQ,SAASM,KAEpDF,EAwFI9I,CAA0B4I,EAAOrF,EAAO7K,cAC5CwE,uBAAegF,0BAtFS,SAC/B0G,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,cAGnBC,EAASD,KAAKnQ,EAAQsQ,KAAKG,IAAMzQ,EAAQsQ,KAElCF,EA6EI6C,CAAqC/C,EAAOrF,EAAO7K,cACvDwE,uBAAeiF,0BA3ES,SAC/ByG,EACAlQ,OAEMoQ,EAAW,CACfD,UAAWD,EAAMC,qBAGZC,EAASD,KAAKnQ,EAAQsQ,KAAKG,IAE3BL,EAkEI8C,CAAqChD,EAAOrF,EAAO7K,cACvDF,0BAAkBiC,yBAhEF,SACvBmO,EACAlQ,OAEIoQ,EAAWF,KAEXlQ,EAAQgQ,SAASM,KAAKlB,OAAS,EAAG,CACpCgB,EAAW,CACTD,UACKD,EAAMC,WAIR,IAAIyC,EAAI,EAAGA,EAAI5S,EAAQgQ,SAASM,KAAKlB,OAAQwD,IAAK,KAC/CO,EAAgBnT,EAAQgQ,SAASM,KAAKsC,GAExCO,EAAc9J,OAChB+G,EAASD,KAAKgD,EAAc1C,IAAM0C,EAAc9J,cAK/C+G,EA2CItO,CAA6BoO,EAAOrF,EAAO7K,wBAE3CkQ,oGvCtJc,SACzBX,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASrE,EAAoBwK,EAAStP,IAEtCyP,EAAOI,IAAIsD,YAAY7D,EAAQc,SAAS,SAACxD,MACnCA,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASjE,EAAyBnF,EAASC,IAC3C4P,EAAO7P,QAOPoJ,EAASnE,EALO,CACdsK,QAAAA,EACA1C,OAAAA,GAGmC5M,IACrC2P,kBAKRJ,EAActP,KAAOyD,wBAAgB0P,qBAE9B7D,sBMnCiB,SACxBD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAAStC,GAAmByI,EAAStP,IAErCyP,EAAOI,IAAIwD,WAAW/D,EAAQmB,QAAQ,SAAC7D,MACjCA,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASlC,GAAwBlH,EAASC,IAC1C4P,EAAO7P,QAOPoJ,EAASpC,GALO,CACduI,QAAAA,EACA1C,OAAAA,GAGkC5M,IACpC2P,kBAKRJ,EAActP,KAAOsE,uBAAe+O,oBAE7B/D,oxBKpCmB,SAC1BD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASb,GAAgBgH,EAAStP,IAElCyP,EAAOI,IAAI8B,aAEJrC,GACHiE,cAAc,EACdC,cAAc,KAEhB,SAAC5G,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAAST,GAA2B3I,EAASC,IAC7C4P,EAAO7P,QAQPoJ,EAASX,GANO,CACd8G,QAAAA,EACAS,SAAAA,EACAnD,OAAAA,GAGuC5M,IACzC2P,kBAMVJ,EAActP,KAAOqG,2BAAmBmN,iBAEjClE,wBtBnCmB,SAI1BD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASxH,EAAsB2N,EAAStP,IAExCyP,EAAOI,IAAI6D,gBAEJpE,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASpH,EAA2BhC,EAASC,IAC7C4P,EAAO7P,QAQPoJ,EAAStH,EANO,CACdyN,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAGoD5M,IACtD2P,kBAMVJ,EAActP,KAAOJ,0BAAkB8T,sBAEhCpE,4BH5CuB,SAI9BD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASrI,EAAyBwO,EAAStP,IAE3CyP,EAAOI,IAAI+D,oBAEJtE,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASjI,EAA8BnB,EAASC,IAChD4P,EAAO7P,QAQPoJ,EAASnI,EANO,CACdsO,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAG0D5M,IAC5D2P,kBAMVJ,EAActP,KAAOL,6BAAqBiU,yBAEnCtE,+BW/C0B,SAIjCD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASlF,EAAuBqL,EAAStP,IAEzCyP,EAAOI,IAAIiE,aAEHxE,IAEN,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAAS9E,EAAkCtE,EAASC,IACpD4P,EAAO7P,QAUPoJ,EACEhF,EATc,CACdmL,QAAAA,EACAS,SAAUA,EAGVnD,OAAAA,GAI2D5M,IAE7D2P,kBAMVJ,EAActP,KAAOyB,0BAAkBqS,8BAEhCxE,8BerDyB,SAChCD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASP,GAAsB0G,EAAStP,IAExCyP,EAAOI,IAAIgC,cAEJvC,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASH,GAAiCjJ,EAASC,IACnD4P,EAAO7P,QAQPoJ,EAASL,GANO,CACdwG,QAAAA,EACAS,SAAAA,EACAnD,OAAAA,GAG6C5M,IAC/C2P,kBAMVJ,EAActP,KAAOqG,2BAAmB0N,uBAEjCzE,0BXlCqB,SAI5BD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EACE/D,OAEOkK,GAELtP,IAIJyP,EAAOI,IAAIoE,cAEJ3E,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAAS3D,EAA6BzF,EAASC,IAC/C4P,EAAO7P,QAQPoJ,EAAS7D,EANO,CACdgK,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAGgD5M,IAClD2P,kBAMVJ,EAActP,KAAOyD,wBAAgBwQ,0BAE9B3E,uBCnDkB,SAIzBD,EACAtP,YADAsP,IAAAA,EAA8B,QAGxBC,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASzD,EAAqB4J,EAAStP,IAEvCyP,EAAOI,IAAIsE,eAEJ7E,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASrD,EAA0B/F,EAASC,IAC5C4P,EAAO7P,QAQPoJ,EAASvD,EANO,CACd0J,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAGiD5M,IACnD2P,kBAMVJ,EAActP,KAAOyD,wBAAgB0Q,qBAE9B7E,yBK5CoB,SAI3BD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EACEhC,QAEOmI,GAELtP,IAIJyP,EAAOI,IAAIwE,aAEJ/E,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAAS5B,GAA4BxH,EAASC,IAC9C4P,EAAO7P,QAQPoJ,EAAS9B,GANO,CACdiI,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAG8C5M,IAChD2P,kBAMVJ,EAActP,KAAOsE,uBAAe+P,yBAE7B/E,sBCnDiB,SAIxBD,EACAtP,YADAsP,IAAAA,EAA6B,QAGvBC,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAAS1B,GAAoB6H,EAAStP,IAEtCyP,EAAOI,IAAI0E,cAEJjF,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAAStB,GAAyB9H,EAASC,IAC3C4P,EAAO7P,QAQPoJ,EAASxB,GANO,CACd2H,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAG+C5M,IACjD2P,kBAMVJ,EAActP,KAAOsE,uBAAeiQ,oBAE7BjF,gTxBrCiB,SAIxBD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASrJ,EAAoCwP,EAAStP,IAEtDyP,EAAOI,IAAI4E,gBAEJnF,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAAS9I,EAAyCN,EAASC,IAC3D4P,EAAO7P,QAQPoJ,EAAShJ,EANO,CACdmP,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAGmD5M,IACrD2P,kBAMVJ,EAActP,KAAOL,6BAAqB8U,oBAEnCnF,+CC5CkB,SAIzBD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAAS3I,EAAoC8O,EAAStP,IAEtDyP,EAAOI,IAAI8E,iBAEJrF,GACHsF,OAAQtF,EAAQsF,OAAOhE,KAAI,SAAClH,UAAUA,EAAM8G,SAE9C,SAAC5D,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASvI,EAAmBb,EAASC,IACrC4P,EAAO7P,QAQPoJ,EAASzI,EANO,CACd4O,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAGiD5M,IACnD2P,kBAMVJ,EAActP,KAAOL,6BAAqBiV,qBAEnCtF,2TsC1FoB,SAC3BxP,SAC8B,CAC9BE,KAAMwK,8BAAsBqK,qBAC5B/U,QAAAA,wG/ByC2B,SAI3BuP,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAAStG,EAAmCyM,EAAStP,IAErDyP,EAAOI,IAAIkF,mBAEJzF,GACH0F,MAAO1F,EAAQ0F,MAAMpE,KAAI,SAACxH,UAASA,EAAKoH,SAE1C,SAAC5D,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAASlG,EAAwClD,EAASC,IAC1D4P,EAAO7P,QAQPoJ,EAASpG,EANO,CACduM,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAGkD5M,IACpD2P,kBAMVJ,EAActP,KAAOJ,0BAAkBoV,uBAEhC1F,wFE/CkB,SAKzBD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAAS/F,EAAekM,EAAStP,IAEjCyP,EAAOI,IAAIqF,aAEJ5F,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EACE3F,EACEzD,EACAC,IAGJ4P,EAAO7P,QAQPoJ,EACE7F,EAPc,CACdgM,QAAAA,EACAS,SAAAA,EACAnD,OAAAA,GAI4D5M,IAE9D2P,kBAMVJ,EAActP,KAAOyB,0BAAkByT,qBAEhC5F,sBEvDiB,SAIxBD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASxF,EAAc2L,EAAStP,IAEhCyP,EAAOI,IAAInE,YAEJ4D,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EACEpF,EAA4ChE,EAASC,IAEvD4P,EAAO7P,QAQPoJ,EAAStF,EANO,CACdyL,QAAAA,EACAS,SAAAA,EACAnD,OAAAA,GAGoD5M,IACtD2P,kBAMVJ,EAActP,KAAOkD,yBAAiBiS,oBAE/B7F,uQ2BzCwB,SAC/BxP,SACkC,CAClCE,KAAMwK,8BAAsB4K,yBAC5BtV,QAAAA,6CjCJ2B,SAI3BuP,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASlH,EAAgBqN,EAAStP,IAElCyP,EAAOI,IAAIyF,mBAEJhG,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAAS9G,EAAwCtC,EAASC,IAC1D4P,EAAO7P,QAQPoJ,EAAShH,EANO,CACdmN,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAGkD5M,IACpD2P,kBAMVJ,EAActP,KAAOJ,0BAAkB0V,uBAEhChG,4BH5CuB,SAI9BD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAAS/H,EAA0CkO,EAAStP,IAE5DyP,EAAOI,IAAI2F,uBAEJlG,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EACE3H,EAA8CzB,EAASC,IAEzD4P,EAAO7P,QAQPoJ,EAAS7H,EANO,CACdgO,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAGwD5M,IAC1D2P,kBAMVJ,EAActP,KAAOL,6BAAqB6V,0BAEnClG,uBgBrDkB,SAIzBD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASnD,EAAoBsJ,EAAStP,IAEtCyP,EAAOI,IAAI6F,iBAEJpG,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAAS/C,GAAyBrG,EAASC,IAC3C4P,EAAO7P,QAQPoJ,EAASjD,EANO,CACdoJ,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAG8C5M,IAChD2P,kBAMVJ,EAActP,KAAOyD,wBAAgBiS,qBAE9BpG,sBM5CiB,SAIxBD,EACAtP,OAEMuP,EAAgB,SACpBpG,EACAqG,SACEC,IAAAA,cAEF,IAAIC,SAAc,SAACC,EAASC,GAC1BzG,EAASpB,GAAmBuH,EAAStP,IAErCyP,EAAOI,IAAI+F,gBAEJtG,IAEL,SAAC1C,EAAQmD,MACHnD,EAAOrM,MAAO,KACVR,EAAU,CACduP,QAAAA,EACA1C,OAAAA,GAGFzD,EAAShB,GAAwBpI,EAASC,IAC1C4P,EAAO7P,QAQPoJ,EAASlB,GANO,CACdqH,QAAAA,EACAS,SAAUA,EACVnD,OAAAA,GAG4C5M,IAC9C2P,kBAMVJ,EAActP,KAAOsE,uBAAesR,oBAE7BtG"}